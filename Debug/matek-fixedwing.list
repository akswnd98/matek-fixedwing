
matek-fixedwing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800dc28  0800dc28  0001dc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e288  0800e288  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e288  0800e288  0001e288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e290  0800e290  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00000d08  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f20  20000f20  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010fd8  00000000  00000000  0002028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032ea  00000000  00000000  00031263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001238  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc0  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002402d  00000000  00000000  00036548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015c92  00000000  00000000  0005a575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce152  00000000  00000000  00070207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006330  00000000  00000000  0013e35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0014468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc10 	.word	0x0800dc10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800dc10 	.word	0x0800dc10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_phi_dot_ref>:
int servo1_offset = 0;
int servo2_offset = 0;
int servo3_offset = 0;
int servo4_offset = 0;

float get_phi_dot_ref () {
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	return (phi_ref - phi) * phi_error_P_gain;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <get_phi_dot_ref+0x2c>)
 8000ff6:	ed93 7a00 	vldr	s14, [r3]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <get_phi_dot_ref+0x30>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <get_phi_dot_ref+0x34>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200002f4 	.word	0x200002f4
 8001020:	20000330 	.word	0x20000330
 8001024:	20000000 	.word	0x20000000

08001028 <get_theta_dot_ref>:

float get_theta_dot_ref () {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	return (theta_ref - theta) * theta_error_P_gain;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <get_theta_dot_ref+0x2c>)
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <get_theta_dot_ref+0x30>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <get_theta_dot_ref+0x34>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200002f8 	.word	0x200002f8
 8001058:	20000334 	.word	0x20000334
 800105c:	20000004 	.word	0x20000004

08001060 <get_phi_dot_dot_ref>:

float get_phi_dot_dot_ref (float phi_dot_ref) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
	return phi_dot_ref * phi_dot_FF_gain + (phi_dot_ref - phi_dot) * phi_dot_error_P_gain;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <get_phi_dot_dot_ref+0x44>)
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <get_phi_dot_dot_ref+0x48>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001082:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <get_phi_dot_dot_ref+0x4c>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000338 	.word	0x20000338
 80010ac:	20000234 	.word	0x20000234

080010b0 <get_theta_dot_dot_ref>:

float get_theta_dot_dot_ref (float theta_dot_ref) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	ed87 0a01 	vstr	s0, [r7, #4]
	return theta_dot_ref * theta_dot_FF_gain + (theta_dot_ref - theta_dot) * theta_dot_error_P_gain;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <get_theta_dot_dot_ref+0x44>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <get_theta_dot_dot_ref+0x48>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80010d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <get_theta_dot_dot_ref+0x4c>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	2000033c 	.word	0x2000033c
 80010fc:	2000023c 	.word	0x2000023c

08001100 <get_psi_dot_dot_ref>:

float get_psi_dot_dot_ref () {
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	return 0.0;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	ee07 3a90 	vmov	s15, r3
}
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <get_w_dot_ref>:

void get_w_dot_ref (float w_dot_ref[3]) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	float eta_dot_dot[3] = {
		get_phi_dot_dot_ref(get_phi_dot_ref()),
 8001120:	f7ff ff66 	bl	8000ff0 <get_phi_dot_ref>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	eeb0 0a67 	vmov.f32	s0, s15
 800112c:	f7ff ff98 	bl	8001060 <get_phi_dot_dot_ref>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
	float eta_dot_dot[3] = {
 8001134:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		get_theta_dot_dot_ref(get_theta_dot_ref()),
 8001138:	f7ff ff76 	bl	8001028 <get_theta_dot_ref>
 800113c:	eef0 7a40 	vmov.f32	s15, s0
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	f7ff ffb4 	bl	80010b0 <get_theta_dot_dot_ref>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
	float eta_dot_dot[3] = {
 800114c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		get_psi_dot_dot_ref()
 8001150:	f7ff ffd6 	bl	8001100 <get_psi_dot_dot_ref>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
	float eta_dot_dot[3] = {
 8001158:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	};
	float C[3][3];
	get_C(phi, theta, C);
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <get_w_dot_ref+0x7c>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <get_w_dot_ref+0x80>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	4618      	mov	r0, r3
 800116e:	eef0 0a47 	vmov.f32	s1, s14
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	f000 fda7 	bl	8001cc8 <get_C>
	mul_mat_vec_3d(C, eta_dot_dot, w_dot_ref);
 800117a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fd4d 	bl	8001c24 <mul_mat_vec_3d>
}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000330 	.word	0x20000330
 8001198:	20000334 	.word	0x20000334

0800119c <saturate>:

int saturate (int val, int bottom, int top) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	return max(min(val, top), bottom);
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f001 fe3b 	bl	8002e26 <min>
 80011b0:	4603      	mov	r3, r0
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fe26 	bl	8002e06 <max>
 80011ba:	4603      	mov	r3, r0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <update_control_surface_angle>:

int update_control_surface_angle_cnt = 0;
void update_control_surface_angle () {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
	float w_dot_ref[3];
	get_w_dot_ref(w_dot_ref);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffa3 	bl	8001118 <get_w_dot_ref>
	update_servo1_pwm(saturate((int)w_dot_ref[0] + 1500 + servo1_offset, 1500 + servo1_offset - 400, 1500 + servo1_offset + 400));
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011da:	ee17 3a90 	vmov	r3, s15
 80011de:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <update_control_surface_angle+0xe8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	18d0      	adds	r0, r2, r3
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <update_control_surface_angle+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f203 414c 	addw	r1, r3, #1100	; 0x44c
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <update_control_surface_angle+0xe8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80011f8:	461a      	mov	r2, r3
 80011fa:	f7ff ffcf 	bl	800119c <saturate>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fe53 	bl	8002eac <update_servo1_pwm>
	update_servo2_pwm(saturate(-(int)w_dot_ref[0] + 1500 + servo2_offset, 1500 + servo2_offset - 400, 1500 + servo2_offset + 400));
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 3a90 	vmov	r3, s15
 8001212:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001216:	3304      	adds	r3, #4
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <update_control_surface_angle+0xec>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	1898      	adds	r0, r3, r2
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <update_control_surface_angle+0xec>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f203 414c 	addw	r1, r3, #1100	; 0x44c
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <update_control_surface_angle+0xec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800122e:	461a      	mov	r2, r3
 8001230:	f7ff ffb4 	bl	800119c <saturate>
 8001234:	4603      	mov	r3, r0
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fe52 	bl	8002ee0 <update_servo2_pwm>
	update_servo3_pwm(saturate((int)w_dot_ref[1] + 1500 + servo3_offset, 1500 + servo3_offset - 400, 1500 + servo3_offset + 400));
 800123c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <update_control_surface_angle+0xf0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	18d0      	adds	r0, r2, r3
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <update_control_surface_angle+0xf0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f203 414c 	addw	r1, r3, #1100	; 0x44c
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <update_control_surface_angle+0xf0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8001262:	461a      	mov	r2, r3
 8001264:	f7ff ff9a 	bl	800119c <saturate>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fe52 	bl	8002f14 <update_servo3_pwm>
	update_servo4_pwm(saturate((int)w_dot_ref[2] + 1500 + servo4_offset, 1500 + servo4_offset - 400, 1500 + servo4_offset + 400));
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001278:	ee17 3a90 	vmov	r3, s15
 800127c:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <update_control_surface_angle+0xf4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	18d0      	adds	r0, r2, r3
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <update_control_surface_angle+0xf4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f203 414c 	addw	r1, r3, #1100	; 0x44c
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <update_control_surface_angle+0xf4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8001296:	461a      	mov	r2, r3
 8001298:	f7ff ff80 	bl	800119c <saturate>
 800129c:	4603      	mov	r3, r0
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fe52 	bl	8002f48 <update_servo4_pwm>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000244 	.word	0x20000244
 80012b0:	20000248 	.word	0x20000248
 80012b4:	2000024c 	.word	0x2000024c
 80012b8:	20000250 	.word	0x20000250
 80012bc:	00000000 	.word	0x00000000

080012c0 <process_control_receive>:
float phi_ref = 0;
float theta_ref = 0;
uint16_t control_crc = 0;
uint8_t shutdown = 0;

void process_control_receive (uint8_t data) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if (control_payload_cnt == 0 && data == 0x20) {
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <process_control_receive+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <process_control_receive+0x2e>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d10a      	bne.n	80012ee <process_control_receive+0x2e>
    control_rx_buf[control_payload_cnt] = data;
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <process_control_receive+0x1bc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4968      	ldr	r1, [pc, #416]	; (8001480 <process_control_receive+0x1c0>)
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <process_control_receive+0x1bc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a64      	ldr	r2, [pc, #400]	; (800147c <process_control_receive+0x1bc>)
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e13d      	b.n	800156a <process_control_receive+0x2aa>
  } else if (control_payload_cnt == 1 && data == 0x40) {
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <process_control_receive+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10d      	bne.n	8001312 <process_control_receive+0x52>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d10a      	bne.n	8001312 <process_control_receive+0x52>
    control_rx_buf[control_payload_cnt] = data;
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <process_control_receive+0x1bc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	495f      	ldr	r1, [pc, #380]	; (8001480 <process_control_receive+0x1c0>)
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <process_control_receive+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a5b      	ldr	r2, [pc, #364]	; (800147c <process_control_receive+0x1bc>)
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e12b      	b.n	800156a <process_control_receive+0x2aa>
  } else if (control_payload_cnt >= 2 && control_payload_cnt < 2 + 2 * MAX_CHANNEL_NUM) {
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <process_control_receive+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	dd0e      	ble.n	8001338 <process_control_receive+0x78>
 800131a:	4b58      	ldr	r3, [pc, #352]	; (800147c <process_control_receive+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b1d      	cmp	r3, #29
 8001320:	dc0a      	bgt.n	8001338 <process_control_receive+0x78>
    control_rx_buf[control_payload_cnt] = data;
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <process_control_receive+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4956      	ldr	r1, [pc, #344]	; (8001480 <process_control_receive+0x1c0>)
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <process_control_receive+0x1bc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a52      	ldr	r2, [pc, #328]	; (800147c <process_control_receive+0x1bc>)
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e118      	b.n	800156a <process_control_receive+0x2aa>
  } else if (control_payload_cnt == 2 + 2 * MAX_CHANNEL_NUM) {
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <process_control_receive+0x1bc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b1e      	cmp	r3, #30
 800133e:	d114      	bne.n	800136a <process_control_receive+0xaa>
    control_crc &= 0xff00;
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <process_control_receive+0x1c4>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <process_control_receive+0x1c4>)
 800134c:	801a      	strh	r2, [r3, #0]
    control_crc |= data;
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <process_control_receive+0x1c4>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <process_control_receive+0x1c4>)
 800135c:	801a      	strh	r2, [r3, #0]
    control_payload_cnt++;
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <process_control_receive+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <process_control_receive+0x1bc>)
 8001366:	6013      	str	r3, [r2, #0]
    }
    control_payload_cnt = 0;
  } else {
    control_payload_cnt = 0;
  }
}
 8001368:	e0ff      	b.n	800156a <process_control_receive+0x2aa>
  } else if (control_payload_cnt == 2 + 2 * MAX_CHANNEL_NUM + 1) {
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <process_control_receive+0x1bc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b1f      	cmp	r3, #31
 8001370:	f040 80f7 	bne.w	8001562 <process_control_receive+0x2a2>
    control_crc &= 0x00ff;
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <process_control_receive+0x1c4>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <process_control_receive+0x1c4>)
 800137e:	801a      	strh	r2, [r3, #0]
    control_crc |= (uint16_t)data << 8;
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <process_control_receive+0x1c4>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21b      	sxth	r3, r3
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <process_control_receive+0x1c4>)
 8001394:	801a      	strh	r2, [r3, #0]
    uint16_t check_sum = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < (MAX_CHANNEL_NUM + 1) * 2; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	e00a      	b.n	80013b6 <process_control_receive+0xf6>
      check_sum += control_rx_buf[i];
 80013a0:	4a37      	ldr	r2, [pc, #220]	; (8001480 <process_control_receive+0x1c0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	8bfb      	ldrh	r3, [r7, #30]
 80013ac:	4413      	add	r3, r2
 80013ae:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < (MAX_CHANNEL_NUM + 1) * 2; i++) {
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3301      	adds	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b1d      	cmp	r3, #29
 80013ba:	ddf1      	ble.n	80013a0 <process_control_receive+0xe0>
    if (0xffff - check_sum == control_crc) {
 80013bc:	8bfb      	ldrh	r3, [r7, #30]
 80013be:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80013c2:	33ff      	adds	r3, #255	; 0xff
 80013c4:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <process_control_receive+0x1c4>)
 80013c6:	8812      	ldrh	r2, [r2, #0]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f040 80c6 	bne.w	800155a <process_control_receive+0x29a>
      for (int i = 0, j = 2; i < MAX_CHANNEL_NUM; i++, j += 2) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2302      	movs	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	e011      	b.n	80013fc <process_control_receive+0x13c>
        control[i] = *(uint16_t *)(control_rx_buf + j) & 0xfff;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <process_control_receive+0x1c0>)
 80013dc:	4413      	add	r3, r2
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e6:	b219      	sxth	r1, r3
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <process_control_receive+0x1c8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0, j = 2; i < MAX_CHANNEL_NUM; i++, j += 2) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	3302      	adds	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b0d      	cmp	r3, #13
 8001400:	ddea      	ble.n	80013d8 <process_control_receive+0x118>
      control[0] -= 1500;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <process_control_receive+0x1c8>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	b29b      	uxth	r3, r3
 800140a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800140e:	b29b      	uxth	r3, r3
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <process_control_receive+0x1c8>)
 8001414:	801a      	strh	r2, [r3, #0]
      control[1] -= 1500;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <process_control_receive+0x1c8>)
 8001418:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800141c:	b29b      	uxth	r3, r3
 800141e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001422:	b29b      	uxth	r3, r3
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <process_control_receive+0x1c8>)
 8001428:	805a      	strh	r2, [r3, #2]
      control[2] -= 1000;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <process_control_receive+0x1c8>)
 800142c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001430:	b29b      	uxth	r3, r3
 8001432:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <process_control_receive+0x1c8>)
 800143c:	809a      	strh	r2, [r3, #4]
      control[2] = MAX(control[2], 0);
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <process_control_receive+0x1c8>)
 8001440:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <process_control_receive+0x1c8>)
 800144c:	809a      	strh	r2, [r3, #4]
      control[3] -= 1500;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <process_control_receive+0x1c8>)
 8001450:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001454:	b29b      	uxth	r3, r3
 8001456:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800145a:	b29b      	uxth	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <process_control_receive+0x1c8>)
 8001460:	80da      	strh	r2, [r3, #6]
      control[3] = -control[3];
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <process_control_receive+0x1c8>)
 8001464:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001468:	b29b      	uxth	r3, r3
 800146a:	425b      	negs	r3, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <process_control_receive+0x1c8>)
 8001472:	80da      	strh	r2, [r3, #6]
      for (int i = 0; i < 4; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e019      	b.n	80014ae <process_control_receive+0x1ee>
 800147a:	bf00      	nop
 800147c:	20000264 	.word	0x20000264
 8001480:	20000268 	.word	0x20000268
 8001484:	200002fc 	.word	0x200002fc
 8001488:	200002cc 	.word	0x200002cc
        command[i] = control[i];
 800148c:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <process_control_receive+0x2c8>)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149c:	4a3b      	ldr	r2, [pc, #236]	; (800158c <process_control_receive+0x2cc>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 4; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	ddeb      	ble.n	800148c <process_control_receive+0x1cc>
      phi_ref = command[0] / 500.0 * M_PI * (80.0 / 180.0);
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <process_control_receive+0x2cc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <process_control_receive+0x2d0>)
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a329      	add	r3, pc, #164	; (adr r3, 8001578 <process_control_receive+0x2b8>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f88f 	bl	80005f8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a327      	add	r3, pc, #156	; (adr r3, 8001580 <process_control_receive+0x2c0>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb78 	bl	8000be8 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a26      	ldr	r2, [pc, #152]	; (8001594 <process_control_receive+0x2d4>)
 80014fc:	6013      	str	r3, [r2, #0]
      theta_ref = command[1] / 500.0 * M_PI * (80.0 / 180.0);
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <process_control_receive+0x2cc>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f820 	bl	8000548 <__aeabi_f2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <process_control_receive+0x2d0>)
 800150e:	f7ff f99d 	bl	800084c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	a317      	add	r3, pc, #92	; (adr r3, 8001578 <process_control_receive+0x2b8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f86a 	bl	80005f8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	a314      	add	r3, pc, #80	; (adr r3, 8001580 <process_control_receive+0x2c0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f861 	bl	80005f8 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb53 	bl	8000be8 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <process_control_receive+0x2d8>)
 8001546:	6013      	str	r3, [r2, #0]
      if (control[4] == 2000) {
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <process_control_receive+0x2c8>)
 800154a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800154e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001552:	d102      	bne.n	800155a <process_control_receive+0x29a>
        shutdown = 1;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <process_control_receive+0x2dc>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
    control_payload_cnt = 0;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <process_control_receive+0x2e0>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	e003      	b.n	800156a <process_control_receive+0x2aa>
    control_payload_cnt = 0;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <process_control_receive+0x2e0>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	e7ff      	b.n	800156a <process_control_receive+0x2aa>
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	54442d18 	.word	0x54442d18
 800157c:	400921fb 	.word	0x400921fb
 8001580:	1c71c71c 	.word	0x1c71c71c
 8001584:	3fdc71c7 	.word	0x3fdc71c7
 8001588:	200002cc 	.word	0x200002cc
 800158c:	20000254 	.word	0x20000254
 8001590:	407f4000 	.word	0x407f4000
 8001594:	200002f4 	.word	0x200002f4
 8001598:	200002f8 	.word	0x200002f8
 800159c:	200002fe 	.word	0x200002fe
 80015a0:	20000264 	.word	0x20000264

080015a4 <_write>:
 *      Author: akswnd98
 */

#include "uart_utils.h"

int _write (int fd, char *buf, int len) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  do_debug_transmit_it((uint8_t *)buf, len);
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	68b8      	ldr	r0, [r7, #8]
 80015b4:	f002 fbc2 	bl	8003d3c <do_debug_transmit_it>
  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <start_esc>:
#include "main.h"
#include "esc.h"

extern TIM_HandleTypeDef htim4;

void start_esc () {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015c8:	2104      	movs	r1, #4
 80015ca:	4802      	ldr	r0, [pc, #8]	; (80015d4 <start_esc+0x10>)
 80015cc:	f004 fb1e 	bl	8005c0c <HAL_TIM_PWM_Start>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200003e4 	.word	0x200003e4

080015d8 <update_throttle>:

void terminate_esc () {
  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
}

void update_throttle (int throttle) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  htim4.Instance->CCR2 = throttle;
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <update_throttle+0x1c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	200003e4 	.word	0x200003e4

080015f8 <skip_arming_mode>:

void skip_arming_mode () {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  update_throttle(50);
 80015fc:	2032      	movs	r0, #50	; 0x32
 80015fe:	f7ff ffeb 	bl	80015d8 <update_throttle>
  HAL_Delay(100);
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f002 fc70 	bl	8003ee8 <HAL_Delay>
  update_throttle(0);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ffe5 	bl	80015d8 <update_throttle>
  HAL_Delay(3000);
 800160e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001612:	f002 fc69 	bl	8003ee8 <HAL_Delay>
  update_throttle(1000);
 8001616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161a:	f7ff ffdd 	bl	80015d8 <update_throttle>
  HAL_Delay(3000);
 800161e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001622:	f002 fc61 	bl	8003ee8 <HAL_Delay>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <read_imu>:
uint8_t acc_offset[6];
int16_t acc_x_offset = 0;
int16_t acc_y_offset = 0;
int16_t acc_z_offset = 0;

void read_imu (uint8_t addr, uint8_t *data, uint8_t len) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x80 | addr;
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001646:	bf00      	nop
 8001648:	4810      	ldr	r0, [pc, #64]	; (800168c <read_imu+0x60>)
 800164a:	f004 f831 	bl	80056b0 <HAL_SPI_GetState>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d1f9      	bne.n	8001648 <read_imu+0x1c>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <read_imu+0x64>)
 800165a:	f002 ff17 	bl	800448c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &tmp, 1, 100);
 800165e:	f107 010f 	add.w	r1, r7, #15
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	2201      	movs	r2, #1
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <read_imu+0x60>)
 8001668:	f003 fc17 	bl	8004e9a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, data, len, 100);
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	b29a      	uxth	r2, r3
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <read_imu+0x60>)
 8001676:	f003 fd53 	bl	8005120 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2110      	movs	r1, #16
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <read_imu+0x64>)
 8001680:	f002 ff04 	bl	800448c <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000344 	.word	0x20000344
 8001690:	40020000 	.word	0x40020000

08001694 <write_imu>:

void write_imu (uint8_t addr, uint8_t *data) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80016a0:	bf00      	nop
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <write_imu+0x50>)
 80016a4:	f004 f804 	bl	80056b0 <HAL_SPI_GetState>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d1f9      	bne.n	80016a2 <write_imu+0xe>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <write_imu+0x54>)
 80016b4:	f002 feea 	bl	800448c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 80016b8:	1df9      	adds	r1, r7, #7
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	2201      	movs	r2, #1
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <write_imu+0x50>)
 80016c0:	f003 fbeb 	bl	8004e9a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, 1, 100);
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	2201      	movs	r2, #1
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <write_imu+0x50>)
 80016cc:	f003 fbe5 	bl	8004e9a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <write_imu+0x54>)
 80016d6:	f002 fed9 	bl	800448c <HAL_GPIO_WritePin>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000344 	.word	0x20000344
 80016e8:	40020000 	.word	0x40020000

080016ec <init_imu>:

void init_imu () {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  int delay_time = 100;
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2110      	movs	r1, #16
 80016fa:	4855      	ldr	r0, [pc, #340]	; (8001850 <init_imu+0x164>)
 80016fc:	f002 fec6 	bl	800448c <HAL_GPIO_WritePin>
  HAL_Delay(delay_time);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fbf0 	bl	8003ee8 <HAL_Delay>

  uint8_t tx_val = 0x00;
 8001708:	2300      	movs	r3, #0
 800170a:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_val;

  HAL_Delay(delay_time);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fbea 	bl	8003ee8 <HAL_Delay>

  read_imu(WHO_AM_I, &rx_val, 1);
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	2075      	movs	r0, #117	; 0x75
 800171c:	f7ff ff86 	bl	800162c <read_imu>
  HAL_Delay(delay_time);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fbe0 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_PWR_MGMT0_BITS(3, 3);
 8001728:	230f      	movs	r3, #15
 800172a:	70fb      	strb	r3, [r7, #3]
  write_imu(PWR_MGMT0, &tx_val);
 800172c:	1cfb      	adds	r3, r7, #3
 800172e:	4619      	mov	r1, r3
 8001730:	204e      	movs	r0, #78	; 0x4e
 8001732:	f7ff ffaf 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fbd5 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_GYRO_CONFIG0_BITS(0b0100, 0b000);
 800173e:	2304      	movs	r3, #4
 8001740:	70fb      	strb	r3, [r7, #3]
  write_imu(GYRO_CONFIG0, &tx_val);
 8001742:	1cfb      	adds	r3, r7, #3
 8001744:	4619      	mov	r1, r3
 8001746:	204f      	movs	r0, #79	; 0x4f
 8001748:	f7ff ffa4 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fbca 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_ACCEL_CONFIG0_BITS(0b0100, 0b000);
 8001754:	2304      	movs	r3, #4
 8001756:	70fb      	strb	r3, [r7, #3]
  write_imu(ACCEL_CONFIG0, &tx_val);
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	4619      	mov	r1, r3
 800175c:	2050      	movs	r0, #80	; 0x50
 800175e:	f7ff ff99 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fbbf 	bl	8003ee8 <HAL_Delay>

  tx_val = 0x01;
 800176a:	2301      	movs	r3, #1
 800176c:	70fb      	strb	r3, [r7, #3]
  write_imu(REG_BANK_SEL, &tx_val);
 800176e:	1cfb      	adds	r3, r7, #3
 8001770:	4619      	mov	r1, r3
 8001772:	2076      	movs	r0, #118	; 0x76
 8001774:	f7ff ff8e 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fbb4 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_GYRO_CONFIG_STATIC2_BITS(1, 0);
 8001780:	2301      	movs	r3, #1
 8001782:	70fb      	strb	r3, [r7, #3]
  write_imu(GYRO_CONFIG_STATIC2, &tx_val);
 8001784:	1cfb      	adds	r3, r7, #3
 8001786:	4619      	mov	r1, r3
 8001788:	200b      	movs	r0, #11
 800178a:	f7ff ff83 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fba9 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_GYRO_CONFIG_STATIC3_BITS(30);
 8001796:	231e      	movs	r3, #30
 8001798:	70fb      	strb	r3, [r7, #3]
  write_imu(GYRO_CONFIG_STATIC3, &tx_val);
 800179a:	1cfb      	adds	r3, r7, #3
 800179c:	4619      	mov	r1, r3
 800179e:	200c      	movs	r0, #12
 80017a0:	f7ff ff78 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 fb9e 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_GYRO_CONFIG_STATIC4_BITS(896);
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	70fb      	strb	r3, [r7, #3]
  write_imu(GYRO_CONFIG_STATIC4, &tx_val);
 80017b0:	1cfb      	adds	r3, r7, #3
 80017b2:	4619      	mov	r1, r3
 80017b4:	200d      	movs	r0, #13
 80017b6:	f7ff ff6d 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fb93 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_GYRO_CONFIG_STATIC5_BITS(896, 5);
 80017c2:	2353      	movs	r3, #83	; 0x53
 80017c4:	70fb      	strb	r3, [r7, #3]
  write_imu(GYRO_CONFIG_STATIC5, &tx_val);
 80017c6:	1cfb      	adds	r3, r7, #3
 80017c8:	4619      	mov	r1, r3
 80017ca:	200e      	movs	r0, #14
 80017cc:	f7ff ff62 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fb88 	bl	8003ee8 <HAL_Delay>

  tx_val = 0x02;
 80017d8:	2302      	movs	r3, #2
 80017da:	70fb      	strb	r3, [r7, #3]
  write_imu(REG_BANK_SEL, &tx_val);
 80017dc:	1cfb      	adds	r3, r7, #3
 80017de:	4619      	mov	r1, r3
 80017e0:	2076      	movs	r0, #118	; 0x76
 80017e2:	f7ff ff57 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fb7d 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_ACCEL_CONFIG_STATIC2_BITS(0, 30);
 80017ee:	233c      	movs	r3, #60	; 0x3c
 80017f0:	70fb      	strb	r3, [r7, #3]
  write_imu(ACCEL_CONFIG_STATIC2, &tx_val);
 80017f2:	1cfb      	adds	r3, r7, #3
 80017f4:	4619      	mov	r1, r3
 80017f6:	2003      	movs	r0, #3
 80017f8:	f7ff ff4c 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fb72 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_ACCEL_CONFIG_STATIC3_BITS(896);
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	70fb      	strb	r3, [r7, #3]
  write_imu(ACCEL_CONFIG_STATIC3, &tx_val);
 8001808:	1cfb      	adds	r3, r7, #3
 800180a:	4619      	mov	r1, r3
 800180c:	2004      	movs	r0, #4
 800180e:	f7ff ff41 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fb67 	bl	8003ee8 <HAL_Delay>

  tx_val = CALC_ACCEL_CONFIG_STATIC4_BITS(896, 5);
 800181a:	2353      	movs	r3, #83	; 0x53
 800181c:	70fb      	strb	r3, [r7, #3]
  write_imu(ACCEL_CONFIG_STATIC4, &tx_val);
 800181e:	1cfb      	adds	r3, r7, #3
 8001820:	4619      	mov	r1, r3
 8001822:	2005      	movs	r0, #5
 8001824:	f7ff ff36 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fb5c 	bl	8003ee8 <HAL_Delay>

  tx_val = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	70fb      	strb	r3, [r7, #3]
  write_imu(REG_BANK_SEL, &tx_val);
 8001834:	1cfb      	adds	r3, r7, #3
 8001836:	4619      	mov	r1, r3
 8001838:	2076      	movs	r0, #118	; 0x76
 800183a:	f7ff ff2b 	bl	8001694 <write_imu>
  HAL_Delay(delay_time);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fb51 	bl	8003ee8 <HAL_Delay>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020000 	.word	0x40020000

08001854 <update_imu_value>:

void update_imu_value () {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  read_imu(ACCEL_DATA_X1, imu_buf, 12);
 8001858:	220c      	movs	r2, #12
 800185a:	4943      	ldr	r1, [pc, #268]	; (8001968 <update_imu_value+0x114>)
 800185c:	201f      	movs	r0, #31
 800185e:	f7ff fee5 	bl	800162c <read_imu>

  raw_acc_x = (int16_t)(((uint16_t)imu_buf[0] << 8) | (uint16_t)imu_buf[1]);
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <update_imu_value+0x114>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <update_imu_value+0x114>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <update_imu_value+0x118>)
 8001876:	801a      	strh	r2, [r3, #0]
  // acc_x = acc_x_sensor / 32767.0 * 4.0 * g;
  raw_acc_y = (int16_t)(((uint16_t)imu_buf[2] << 8) | (uint16_t)imu_buf[3]);
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <update_imu_value+0x114>)
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <update_imu_value+0x114>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <update_imu_value+0x11c>)
 800188c:	801a      	strh	r2, [r3, #0]
  raw_acc_z = (int16_t)(((uint16_t)imu_buf[4] << 8) | (uint16_t)imu_buf[5]);
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <update_imu_value+0x114>)
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <update_imu_value+0x114>)
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	b21b      	sxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b21a      	sxth	r2, r3
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <update_imu_value+0x120>)
 80018a2:	801a      	strh	r2, [r3, #0]

  raw_gyro_x = (int16_t)(((uint16_t)imu_buf[6] << 8) | (uint16_t)imu_buf[7]);
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <update_imu_value+0x114>)
 80018a6:	799b      	ldrb	r3, [r3, #6]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <update_imu_value+0x114>)
 80018ae:	79db      	ldrb	r3, [r3, #7]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <update_imu_value+0x124>)
 80018b8:	801a      	strh	r2, [r3, #0]
  // gyro_x_sensor = gyro_x_sensor / 32767.0 * 1000.0 * M_PI / 180.0;
  raw_gyro_y = (int16_t)(((uint16_t)imu_buf[8] << 8) | (uint16_t)imu_buf[9]);
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <update_imu_value+0x114>)
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <update_imu_value+0x114>)
 80018c4:	7a5b      	ldrb	r3, [r3, #9]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <update_imu_value+0x128>)
 80018ce:	801a      	strh	r2, [r3, #0]
  raw_gyro_z = (int16_t)(((uint16_t)imu_buf[10] << 8) | (uint16_t)imu_buf[11]);
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <update_imu_value+0x114>)
 80018d2:	7a9b      	ldrb	r3, [r3, #10]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <update_imu_value+0x114>)
 80018da:	7adb      	ldrb	r3, [r3, #11]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <update_imu_value+0x12c>)
 80018e4:	801a      	strh	r2, [r3, #0]

	acc_x = (float)raw_acc_x;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <update_imu_value+0x118>)
 80018e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <update_imu_value+0x130>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]
	acc_y = (float)raw_acc_y;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <update_imu_value+0x11c>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <update_imu_value+0x134>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
	acc_z = (float)raw_acc_z;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <update_imu_value+0x120>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <update_imu_value+0x138>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

	gyro_x = (float)raw_gyro_x;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <update_imu_value+0x124>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <update_imu_value+0x13c>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_y;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <update_imu_value+0x128>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <update_imu_value+0x140>)
 8001946:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_z;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <update_imu_value+0x12c>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <update_imu_value+0x144>)
 800195a:	edc3 7a00 	vstr	s15, [r3]

  adjust_imu_unit();
 800195e:	f000 f81d 	bl	800199c <adjust_imu_unit>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000300 	.word	0x20000300
 800196c:	2000030c 	.word	0x2000030c
 8001970:	2000030e 	.word	0x2000030e
 8001974:	20000310 	.word	0x20000310
 8001978:	20000312 	.word	0x20000312
 800197c:	20000314 	.word	0x20000314
 8001980:	20000316 	.word	0x20000316
 8001984:	2000031c 	.word	0x2000031c
 8001988:	20000318 	.word	0x20000318
 800198c:	20000320 	.word	0x20000320
 8001990:	20000324 	.word	0x20000324
 8001994:	20000328 	.word	0x20000328
 8001998:	2000032c 	.word	0x2000032c

0800199c <adjust_imu_unit>:

void adjust_imu_unit () {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	adjust_acc_unit();
 80019a0:	f000 f806 	bl	80019b0 <adjust_acc_unit>
	adjust_gyro_unit();
 80019a4:	f000 f89c 	bl	8001ae0 <adjust_gyro_unit>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	0000      	movs	r0, r0
	...

080019b0 <adjust_acc_unit>:

void adjust_acc_unit () {
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	acc_x = acc_x / 32767.0 * ACCEL_FS * g;
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <adjust_acc_unit+0x118>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdc5 	bl	8000548 <__aeabi_f2d>
 80019be:	a340      	add	r3, pc, #256	; (adr r3, 8001ac0 <adjust_acc_unit+0x110>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff42 	bl	800084c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <adjust_acc_unit+0x11c>)
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <adjust_acc_unit+0x120>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdae 	bl	8000548 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8f2 	bl	8000be8 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <adjust_acc_unit+0x118>)
 8001a08:	6013      	str	r3, [r2, #0]
	acc_y = acc_y / 32767.0 * ACCEL_FS * g;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <adjust_acc_unit+0x124>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd9a 	bl	8000548 <__aeabi_f2d>
 8001a14:	a32a      	add	r3, pc, #168	; (adr r3, 8001ac0 <adjust_acc_unit+0x110>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe ff17 	bl	800084c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <adjust_acc_unit+0x11c>)
 8001a2c:	f7fe fde4 	bl	80005f8 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <adjust_acc_unit+0x120>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd83 	bl	8000548 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f8c7 	bl	8000be8 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <adjust_acc_unit+0x124>)
 8001a5e:	6013      	str	r3, [r2, #0]
	acc_z = acc_z / 32767.0 * ACCEL_FS * g;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <adjust_acc_unit+0x128>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd6f 	bl	8000548 <__aeabi_f2d>
 8001a6a:	a315      	add	r3, pc, #84	; (adr r3, 8001ac0 <adjust_acc_unit+0x110>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <adjust_acc_unit+0x11c>)
 8001a82:	f7fe fdb9 	bl	80005f8 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <adjust_acc_unit+0x120>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd58 	bl	8000548 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f89c 	bl	8000be8 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <adjust_acc_unit+0x128>)
 8001ab4:	6013      	str	r3, [r2, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40dfffc0 	.word	0x40dfffc0
 8001ac8:	2000031c 	.word	0x2000031c
 8001acc:	40300000 	.word	0x40300000
 8001ad0:	20000014 	.word	0x20000014
 8001ad4:	20000318 	.word	0x20000318
 8001ad8:	20000320 	.word	0x20000320
 8001adc:	00000000 	.word	0x00000000

08001ae0 <adjust_gyro_unit>:

void adjust_gyro_unit () {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	gyro_x = gyro_x / 32767.0 * GYRO_FS * M_PI / 180;
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <adjust_gyro_unit+0x130>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd2d 	bl	8000548 <__aeabi_f2d>
 8001aee:	a344      	add	r3, pc, #272	; (adr r3, 8001c00 <adjust_gyro_unit+0x120>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe feaa 	bl	800084c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <adjust_gyro_unit+0x134>)
 8001b06:	f7fe fd77 	bl	80005f8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	a33d      	add	r3, pc, #244	; (adr r3, 8001c08 <adjust_gyro_unit+0x128>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fd6e 	bl	80005f8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <adjust_gyro_unit+0x138>)
 8001b2a:	f7fe fe8f 	bl	800084c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f857 	bl	8000be8 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <adjust_gyro_unit+0x130>)
 8001b3e:	6013      	str	r3, [r2, #0]
	gyro_y = gyro_y / 32767.0 * GYRO_FS * M_PI / 180;
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <adjust_gyro_unit+0x13c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	a32d      	add	r3, pc, #180	; (adr r3, 8001c00 <adjust_gyro_unit+0x120>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fe7c 	bl	800084c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <adjust_gyro_unit+0x134>)
 8001b62:	f7fe fd49 	bl	80005f8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	a326      	add	r3, pc, #152	; (adr r3, 8001c08 <adjust_gyro_unit+0x128>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fd40 	bl	80005f8 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <adjust_gyro_unit+0x138>)
 8001b86:	f7fe fe61 	bl	800084c <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7ff f829 	bl	8000be8 <__aeabi_d2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <adjust_gyro_unit+0x13c>)
 8001b9a:	6013      	str	r3, [r2, #0]
	gyro_z = gyro_z / 32767.0 * GYRO_FS * M_PI / 180;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <adjust_gyro_unit+0x140>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	a316      	add	r3, pc, #88	; (adr r3, 8001c00 <adjust_gyro_unit+0x120>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fe4e 	bl	800084c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <adjust_gyro_unit+0x134>)
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	a30f      	add	r3, pc, #60	; (adr r3, 8001c08 <adjust_gyro_unit+0x128>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fd12 	bl	80005f8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <adjust_gyro_unit+0x138>)
 8001be2:	f7fe fe33 	bl	800084c <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe fffb 	bl	8000be8 <__aeabi_d2f>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <adjust_gyro_unit+0x140>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	00000000 	.word	0x00000000
 8001c04:	40dfffc0 	.word	0x40dfffc0
 8001c08:	54442d18 	.word	0x54442d18
 8001c0c:	400921fb 	.word	0x400921fb
 8001c10:	20000324 	.word	0x20000324
 8001c14:	409f4000 	.word	0x409f4000
 8001c18:	40668000 	.word	0x40668000
 8001c1c:	20000328 	.word	0x20000328
 8001c20:	2000032c 	.word	0x2000032c

08001c24 <mul_mat_vec_3d>:
};

float dt = 0.001;
float H = 0.004;

void mul_mat_vec_3d (float mat[3][3], float vec[3], float rst[3]) {
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e009      	b.n	8001c4a <mul_mat_vec_3d+0x26>
		rst[i] = 0;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	ddf2      	ble.n	8001c36 <mul_mat_vec_3d+0x12>
	}
	for (int i = 0; i < 3; i++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e02e      	b.n	8001cb4 <mul_mat_vec_3d+0x90>
		for (int j = 0; j < 3; j++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e025      	b.n	8001ca8 <mul_mat_vec_3d+0x84>
			rst[i] += mat[i][j] * vec[j];
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	441a      	add	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	edd3 6a00 	vldr	s13, [r3]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++) {
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	ddd6      	ble.n	8001c5c <mul_mat_vec_3d+0x38>
	for (int i = 0; i < 3; i++) {
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	ddcd      	ble.n	8001c56 <mul_mat_vec_3d+0x32>
		}
	}
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3724      	adds	r7, #36	; 0x24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <get_C>:
	for (int i = 0; i < 4; i++) {
		rst[i] = scalar * vec[i];
	}
}

void get_C (float phi, float theta, float C[3][3]) {
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cd6:	6078      	str	r0, [r7, #4]
	C[0][0] = cos(theta);
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f7fe fc35 	bl	8000548 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ec43 2b10 	vmov	d0, r2, r3
 8001ce6:	f00a f9cb 	bl	800c080 <cos>
 8001cea:	ec53 2b10 	vmov	r2, r3, d0
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff79 	bl	8000be8 <__aeabi_d2f>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	601a      	str	r2, [r3, #0]
	C[0][1] = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
	C[0][2] = -sin(theta) * cos(phi);
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f7fe fc1f 	bl	8000548 <__aeabi_f2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ec43 2b10 	vmov	d0, r2, r3
 8001d12:	f00a fa15 	bl	800c140 <sin>
 8001d16:	ec53 2b10 	vmov	r2, r3, d0
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b10 	vmov	d0, r2, r3
 8001d2e:	f00a f9a7 	bl	800c080 <cos>
 8001d32:	ec53 2b10 	vmov	r2, r3, d0
 8001d36:	4620      	mov	r0, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	f7fe fc5d 	bl	80005f8 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff4f 	bl	8000be8 <__aeabi_d2f>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

	C[1][0] = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	330c      	adds	r3, #12
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
	C[1][1] = 1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d62:	605a      	str	r2, [r3, #4]
	C[1][2] = sin(phi);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7fe fbef 	bl	8000548 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	ec43 2b10 	vmov	d0, r2, r3
 8001d72:	f00a f9e5 	bl	800c140 <sin>
 8001d76:	ec51 0b10 	vmov	r0, r1, d0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f103 040c 	add.w	r4, r3, #12
 8001d80:	f7fe ff32 	bl	8000be8 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60a3      	str	r3, [r4, #8]

	C[2][0] = sin(theta);
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f7fe fbdd 	bl	8000548 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	ec43 2b10 	vmov	d0, r2, r3
 8001d96:	f00a f9d3 	bl	800c140 <sin>
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f103 0418 	add.w	r4, r3, #24
 8001da4:	f7fe ff20 	bl	8000be8 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	6023      	str	r3, [r4, #0]
	C[2][1] = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3318      	adds	r3, #24
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
	C[2][2] = cos(phi) * cos(theta);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe fbc6 	bl	8000548 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	ec43 2b10 	vmov	d0, r2, r3
 8001dc4:	f00a f95c 	bl	800c080 <cos>
 8001dc8:	ec55 4b10 	vmov	r4, r5, d0
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f7fe fbbb 	bl	8000548 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b10 	vmov	d0, r2, r3
 8001dda:	f00a f951 	bl	800c080 <cos>
 8001dde:	ec53 2b10 	vmov	r2, r3, d0
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fc07 	bl	80005f8 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f103 0418 	add.w	r4, r3, #24
 8001df8:	f7fe fef6 	bl	8000be8 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60a3      	str	r3, [r4, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}

08001e08 <get_C_inv>:

void get_C_inv (float phi, float theta, float C_inv[3][3]) {
 8001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e14:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e18:	6078      	str	r0, [r7, #4]
	C_inv[0][0] = cos(theta);
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f7fe fb94 	bl	8000548 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	ec43 2b10 	vmov	d0, r2, r3
 8001e28:	f00a f92a 	bl	800c080 <cos>
 8001e2c:	ec53 2b10 	vmov	r2, r3, d0
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fed8 	bl	8000be8 <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
	C_inv[0][1] = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
	C_inv[0][2] = sin(theta);
 8001e46:	68b8      	ldr	r0, [r7, #8]
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_f2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	ec43 2b10 	vmov	d0, r2, r3
 8001e54:	f00a f974 	bl	800c140 <sin>
 8001e58:	ec53 2b10 	vmov	r2, r3, d0
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fec2 	bl	8000be8 <__aeabi_d2f>
 8001e64:	4602      	mov	r2, r0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]

	C_inv[1][0] = sin(theta) * tan(phi);
 8001e6a:	68b8      	ldr	r0, [r7, #8]
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_f2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ec43 2b10 	vmov	d0, r2, r3
 8001e78:	f00a f962 	bl	800c140 <sin>
 8001e7c:	ec5b ab10 	vmov	sl, fp, d0
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fb61 	bl	8000548 <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b10 	vmov	d0, r2, r3
 8001e8e:	f00a f9af 	bl	800c1f0 <tan>
 8001e92:	ec53 2b10 	vmov	r2, r3, d0
 8001e96:	4650      	mov	r0, sl
 8001e98:	4659      	mov	r1, fp
 8001e9a:	f7fe fbad 	bl	80005f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 060c 	add.w	r6, r3, #12
 8001eac:	f7fe fe9c 	bl	8000be8 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	6033      	str	r3, [r6, #0]
	C_inv[1][1] = 1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ebc:	605a      	str	r2, [r3, #4]
	C_inv[1][2] = -cos(theta) * tan(phi);
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	ec43 2b10 	vmov	d0, r2, r3
 8001ecc:	f00a f8d8 	bl	800c080 <cos>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	ec43 2b10 	vmov	d0, r2, r3
 8001ee8:	f00a f982 	bl	800c1f0 <tan>
 8001eec:	ec53 2b10 	vmov	r2, r3, d0
 8001ef0:	4640      	mov	r0, r8
 8001ef2:	4649      	mov	r1, r9
 8001ef4:	f7fe fb80 	bl	80005f8 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f103 060c 	add.w	r6, r3, #12
 8001f06:	f7fe fe6f 	bl	8000be8 <__aeabi_d2f>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	60b3      	str	r3, [r6, #8]

	C_inv[2][0] = -sin(theta) / cos(phi);
 8001f0e:	68b8      	ldr	r0, [r7, #8]
 8001f10:	f7fe fb1a 	bl	8000548 <__aeabi_f2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	ec43 2b10 	vmov	d0, r2, r3
 8001f1c:	f00a f910 	bl	800c140 <sin>
 8001f20:	ec53 2b10 	vmov	r2, r3, d0
 8001f24:	4614      	mov	r4, r2
 8001f26:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7fe fb0c 	bl	8000548 <__aeabi_f2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	ec43 2b10 	vmov	d0, r2, r3
 8001f38:	f00a f8a2 	bl	800c080 <cos>
 8001f3c:	ec53 2b10 	vmov	r2, r3, d0
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe fc82 	bl	800084c <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 0418 	add.w	r4, r3, #24
 8001f56:	f7fe fe47 	bl	8000be8 <__aeabi_d2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6023      	str	r3, [r4, #0]
	C_inv[2][1] = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3318      	adds	r3, #24
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]
	C_inv[2][2] = cos(theta) / cos(phi);
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ec43 2b10 	vmov	d0, r2, r3
 8001f76:	f00a f883 	bl	800c080 <cos>
 8001f7a:	ec55 4b10 	vmov	r4, r5, d0
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7fe fae2 	bl	8000548 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	ec43 2b10 	vmov	d0, r2, r3
 8001f8c:	f00a f878 	bl	800c080 <cos>
 8001f90:	ec53 2b10 	vmov	r2, r3, d0
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe fc58 	bl	800084c <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f103 0418 	add.w	r4, r3, #24
 8001faa:	f7fe fe1d 	bl	8000be8 <__aeabi_d2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60a3      	str	r3, [r4, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fbc:	0000      	movs	r0, r0
	...

08001fc0 <update_euler_state>:
	C_dot[2][2] = -sin(phi) * cos(theta) - sin(theta) * cos(phi);
}



void update_euler_state () {
 8001fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fc4:	b094      	sub	sp, #80	; 0x50
 8001fc6:	af00      	add	r7, sp, #0
	float new_phi_high_freq = phi + phi_dot * dt;
 8001fc8:	4b95      	ldr	r3, [pc, #596]	; (8002220 <update_euler_state+0x260>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b95      	ldr	r3, [pc, #596]	; (8002224 <update_euler_state+0x264>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd8:	4b93      	ldr	r3, [pc, #588]	; (8002228 <update_euler_state+0x268>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float new_theta_high_freq = theta + theta_dot * dt;
 8001fe6:	4b91      	ldr	r3, [pc, #580]	; (800222c <update_euler_state+0x26c>)
 8001fe8:	ed93 7a00 	vldr	s14, [r3]
 8001fec:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <update_euler_state+0x264>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff6:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <update_euler_state+0x270>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float new_phi_low_freq = asin(-acc_y / sqrt(acc_x * acc_x + acc_y * acc_y + acc_z * acc_z));
 8002004:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <update_euler_state+0x274>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eef1 7a67 	vneg.f32	s15, s15
 800200e:	ee17 3a90 	vmov	r3, s15
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa98 	bl	8000548 <__aeabi_f2d>
 8002018:	4604      	mov	r4, r0
 800201a:	460d      	mov	r5, r1
 800201c:	4b86      	ldr	r3, [pc, #536]	; (8002238 <update_euler_state+0x278>)
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <update_euler_state+0x278>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <update_euler_state+0x274>)
 800202e:	edd3 6a00 	vldr	s13, [r3]
 8002032:	4b80      	ldr	r3, [pc, #512]	; (8002234 <update_euler_state+0x274>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002040:	4b7e      	ldr	r3, [pc, #504]	; (800223c <update_euler_state+0x27c>)
 8002042:	edd3 6a00 	vldr	s13, [r3]
 8002046:	4b7d      	ldr	r3, [pc, #500]	; (800223c <update_euler_state+0x27c>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002054:	ee17 0a90 	vmov	r0, s15
 8002058:	f7fe fa76 	bl	8000548 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	ec43 2b10 	vmov	d0, r2, r3
 8002064:	f009 fe40 	bl	800bce8 <sqrt>
 8002068:	ec53 2b10 	vmov	r2, r3, d0
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe fbec 	bl	800084c <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	ec43 2b17 	vmov	d7, r2, r3
 800207c:	eeb0 0a47 	vmov.f32	s0, s14
 8002080:	eef0 0a67 	vmov.f32	s1, s15
 8002084:	f009 fdfc 	bl	800bc80 <asin>
 8002088:	ec53 2b10 	vmov	r2, r3, d0
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fdaa 	bl	8000be8 <__aeabi_d2f>
 8002094:	4603      	mov	r3, r0
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
	float new_theta_low_freq = atan(acc_x / (acc_z + 0.00001));
 8002098:	4b67      	ldr	r3, [pc, #412]	; (8002238 <update_euler_state+0x278>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa53 	bl	8000548 <__aeabi_f2d>
 80020a2:	4604      	mov	r4, r0
 80020a4:	460d      	mov	r5, r1
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <update_euler_state+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	a359      	add	r3, pc, #356	; (adr r3, 8002218 <update_euler_state+0x258>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe f8e9 	bl	800028c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fbc3 	bl	800084c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ec43 2b17 	vmov	d7, r2, r3
 80020ce:	eeb0 0a47 	vmov.f32	s0, s14
 80020d2:	eef0 0a67 	vmov.f32	s1, s15
 80020d6:	f009 fe33 	bl	800bd40 <atan>
 80020da:	ec53 2b10 	vmov	r2, r3, d0
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd81 	bl	8000be8 <__aeabi_d2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	643b      	str	r3, [r7, #64]	; 0x40
	phi = new_phi_low_freq * H + new_phi_high_freq * (1.0 - H);
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <update_euler_state+0x280>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	ee17 0a90 	vmov	r0, s15
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	4680      	mov	r8, r0
 800210c:	4689      	mov	r9, r1
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <update_euler_state+0x280>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	f04f 0000 	mov.w	r0, #0
 8002120:	4948      	ldr	r1, [pc, #288]	; (8002244 <update_euler_state+0x284>)
 8002122:	f7fe f8b1 	bl	8000288 <__aeabi_dsub>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4640      	mov	r0, r8
 800212c:	4649      	mov	r1, r9
 800212e:	f7fe fa63 	bl	80005f8 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f8a7 	bl	800028c <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd4f 	bl	8000be8 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a36      	ldr	r2, [pc, #216]	; (8002228 <update_euler_state+0x268>)
 800214e:	6013      	str	r3, [r2, #0]
	theta = new_theta_low_freq * H + new_theta_high_freq * (1.0 - H);
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <update_euler_state+0x280>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe f9f1 	bl	8000548 <__aeabi_f2d>
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800216c:	f7fe f9ec 	bl	8000548 <__aeabi_f2d>
 8002170:	4680      	mov	r8, r0
 8002172:	4689      	mov	r9, r1
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <update_euler_state+0x280>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9e5 	bl	8000548 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	492f      	ldr	r1, [pc, #188]	; (8002244 <update_euler_state+0x284>)
 8002188:	f7fe f87e 	bl	8000288 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4640      	mov	r0, r8
 8002192:	4649      	mov	r1, r9
 8002194:	f7fe fa30 	bl	80005f8 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe f874 	bl	800028c <__adddf3>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd1c 	bl	8000be8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <update_euler_state+0x270>)
 80021b4:	6013      	str	r3, [r2, #0]

	float C_inv[3][3];
	get_C_inv(phi, theta, C_inv);
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <update_euler_state+0x268>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <update_euler_state+0x270>)
 80021be:	ed93 7a00 	vldr	s14, [r3]
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4618      	mov	r0, r3
 80021c8:	eef0 0a47 	vmov.f32	s1, s14
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	f7ff fe1a 	bl	8001e08 <get_C_inv>

	float w[3] = {gyro_x, gyro_y, gyro_z};
 80021d4:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <update_euler_state+0x288>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <update_euler_state+0x28c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <update_euler_state+0x290>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]

	float eta_dot[3];
	mul_mat_vec_3d(C_inv, w, eta_dot);
 80021e6:	1d3a      	adds	r2, r7, #4
 80021e8:	f107 0110 	add.w	r1, r7, #16
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fd17 	bl	8001c24 <mul_mat_vec_3d>
	phi_dot = eta_dot[0];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <update_euler_state+0x260>)
 80021fa:	6013      	str	r3, [r2, #0]
	theta_dot = eta_dot[1];
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <update_euler_state+0x26c>)
 8002200:	6013      	str	r3, [r2, #0]
	psi_dot = eta_dot[2];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <update_euler_state+0x294>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	3750      	adds	r7, #80	; 0x50
 800220c:	46bd      	mov	sp, r7
 800220e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	88e368f1 	.word	0x88e368f1
 800221c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002220:	20000338 	.word	0x20000338
 8002224:	20000018 	.word	0x20000018
 8002228:	20000330 	.word	0x20000330
 800222c:	2000033c 	.word	0x2000033c
 8002230:	20000334 	.word	0x20000334
 8002234:	20000318 	.word	0x20000318
 8002238:	2000031c 	.word	0x2000031c
 800223c:	20000320 	.word	0x20000320
 8002240:	2000001c 	.word	0x2000001c
 8002244:	3ff00000 	.word	0x3ff00000
 8002248:	20000324 	.word	0x20000324
 800224c:	20000328 	.word	0x20000328
 8002250:	2000032c 	.word	0x2000032c
 8002254:	20000340 	.word	0x20000340

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60da      	str	r2, [r3, #12]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023800 	.word	0x40023800

080023e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40023800 	.word	0x40023800

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241e:	f001 fcf1 	bl	8003e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002422:	f000 f895 	bl	8002550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002426:	f000 fc7b 	bl	8002d20 <MX_GPIO_Init>
  MX_UART4_Init();
 800242a:	f000 fb41 	bl	8002ab0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800242e:	f000 fc17 	bl	8002c60 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002432:	f000 f8f7 	bl	8002624 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002436:	f000 f9e9 	bl	800280c <MX_TIM5_Init>
  MX_TIM4_Init();
 800243a:	f000 f98d 	bl	8002758 <MX_TIM4_Init>
  MX_TIM3_Init();
 800243e:	f000 f927 	bl	8002690 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002442:	f000 faa5 	bl	8002990 <MX_TIM8_Init>
  MX_TIM6_Init();
 8002446:	f000 fa37 	bl	80028b8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800244a:	f000 fa6b 	bl	8002924 <MX_TIM7_Init>
  MX_UART5_Init();
 800244e:	f000 fb8f 	bl	8002b70 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  init_uarts();
 8002452:	f001 fbc1 	bl	8003bd8 <init_uarts>
  init_imu();
 8002456:	f7ff f949 	bl	80016ec <init_imu>
  start_euler_state_update_tim();
 800245a:	f001 f851 	bl	8003500 <start_euler_state_update_tim>
  start_control_surface_angle_update_tim();
 800245e:	f001 f859 	bl	8003514 <start_control_surface_angle_update_tim>
  start_debug_tim();
 8002462:	f001 f861 	bl	8003528 <start_debug_tim>
  start_servos();
 8002466:	f000 fd0a 	bl	8002e7e <start_servos>

  start_esc();
 800246a:	f7ff f8ab 	bl	80015c4 <start_esc>
  // do_calibration();
  skip_arming_mode();
 800246e:	f7ff f8c3 	bl	80015f8 <skip_arming_mode>
  update_throttle(1000);
 8002472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002476:	f7ff f8af 	bl	80015d8 <update_throttle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
		if (euler_state_update_it) {
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <main+0x118>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <main+0x78>
			update_imu_value();
 8002482:	f7ff f9e7 	bl	8001854 <update_imu_value>
			update_euler_state();
 8002486:	f7ff fd9b 	bl	8001fc0 <update_euler_state>
			euler_state_update_it = 0;
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <main+0x118>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
		}
		if (control_surface_angle_update_it) {
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <main+0x11c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02a      	beq.n	80024ee <main+0xd6>
			update_control_surface_angle();
 8002498:	f7fe fe94 	bl	80011c4 <update_control_surface_angle>
			update_throttle(1000.0 + command[2] * 9.0 / 10.0);
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <main+0x120>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f851 	bl	8000548 <__aeabi_f2d>
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <main+0x124>)
 80024ac:	f7fe f8a4 	bl	80005f8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <main+0x128>)
 80024be:	f7fe f9c5 	bl	800084c <__aeabi_ddiv>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <main+0x12c>)
 80024d0:	f7fd fedc 	bl	800028c <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe fb3c 	bl	8000b58 <__aeabi_d2iz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f878 	bl	80015d8 <update_throttle>
			control_surface_angle_update_it = 0;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <main+0x11c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
		}
		if (debug_it) {
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <main+0x130>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0c1      	beq.n	800247a <main+0x62>
			float w_dot_ref[3];
			get_w_dot_ref(w_dot_ref);
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fe0d 	bl	8001118 <get_w_dot_ref>
			printf("%d\r\n", saturate((int)w_dot_ref[0] + 1500, 1000, 2000));
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002506:	ee17 3a90 	vmov	r3, s15
 800250a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800250e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002512:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fe40 	bl	800119c <saturate>
 800251c:	4603      	mov	r3, r0
 800251e:	4619      	mov	r1, r3
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <main+0x134>)
 8002522:	f005 fefb 	bl	800831c <iprintf>
			debug_it = 0;
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <main+0x130>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
		if (euler_state_update_it) {
 800252c:	e7a5      	b.n	800247a <main+0x62>
 800252e:	bf00      	nop
 8002530:	20000550 	.word	0x20000550
 8002534:	20000551 	.word	0x20000551
 8002538:	20000254 	.word	0x20000254
 800253c:	40220000 	.word	0x40220000
 8002540:	40240000 	.word	0x40240000
 8002544:	408f4000 	.word	0x408f4000
 8002548:	20000552 	.word	0x20000552
 800254c:	0800dc28 	.word	0x0800dc28

08002550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b094      	sub	sp, #80	; 0x50
 8002554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	2230      	movs	r2, #48	; 0x30
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f005 ff51 	bl	8008406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <SystemClock_Config+0xcc>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a27      	ldr	r2, [pc, #156]	; (800261c <SystemClock_Config+0xcc>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <SystemClock_Config+0xcc>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <SystemClock_Config+0xd0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <SystemClock_Config+0xd0>)
 800259a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <SystemClock_Config+0xd0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b6:	2302      	movs	r3, #2
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025c0:	2304      	movs	r3, #4
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025c4:	23a8      	movs	r3, #168	; 0xa8
 80025c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025cc:	2304      	movs	r3, #4
 80025ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d0:	f107 0320 	add.w	r3, r7, #32
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 ff73 	bl	80044c0 <HAL_RCC_OscConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025e0:	f000 fc0c 	bl	8002dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e4:	230f      	movs	r3, #15
 80025e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80025f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	2105      	movs	r1, #5
 8002602:	4618      	mov	r0, r3
 8002604:	f002 f9d4 	bl	80049b0 <HAL_RCC_ClockConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800260e:	f000 fbf5 	bl	8002dfc <Error_Handler>
  }
}
 8002612:	bf00      	nop
 8002614:	3750      	adds	r7, #80	; 0x50
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000

08002624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_SPI1_Init+0x64>)
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <MX_SPI1_Init+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_SPI1_Init+0x64>)
 8002630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_SPI1_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_SPI1_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_SPI1_Init+0x64>)
 8002644:	2202      	movs	r2, #2
 8002646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_SPI1_Init+0x64>)
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_SPI1_Init+0x64>)
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_SPI1_Init+0x64>)
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_SPI1_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_SPI1_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_SPI1_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_SPI1_Init+0x64>)
 8002670:	220a      	movs	r2, #10
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_SPI1_Init+0x64>)
 8002676:	f002 fb87 	bl	8004d88 <HAL_SPI_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002680:	f000 fbbc 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000344 	.word	0x20000344
 800268c:	40013000 	.word	0x40013000

08002690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002696:	f107 0320 	add.w	r3, r7, #32
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	615a      	str	r2, [r3, #20]
 80026b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <MX_TIM3_Init+0xc4>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026ba:	2253      	movs	r2, #83	; 0x53
 80026bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80026ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026d8:	481d      	ldr	r0, [pc, #116]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026da:	f003 fa48 	bl	8005b6e <HAL_TIM_PWM_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80026e4:	f000 fb8a 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4619      	mov	r1, r3
 80026f6:	4816      	ldr	r0, [pc, #88]	; (8002750 <MX_TIM3_Init+0xc0>)
 80026f8:	f004 f808 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002702:	f000 fb7b 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002706:	2360      	movs	r3, #96	; 0x60
 8002708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2208      	movs	r2, #8
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_TIM3_Init+0xc0>)
 800271e:	f003 fc89 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002728:	f000 fb68 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	220c      	movs	r2, #12
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM3_Init+0xc0>)
 8002734:	f003 fc7e 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800273e:	f000 fb5d 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM3_Init+0xc0>)
 8002744:	f000 fd3c 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000039c 	.word	0x2000039c
 8002754:	40000400 	.word	0x40000400

08002758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275e:	f107 0320 	add.w	r3, r7, #32
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <MX_TIM4_Init+0xac>)
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <MX_TIM4_Init+0xb0>)
 800277e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <MX_TIM4_Init+0xac>)
 8002782:	2253      	movs	r2, #83	; 0x53
 8002784:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <MX_TIM4_Init+0xac>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_TIM4_Init+0xac>)
 800278e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002792:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_TIM4_Init+0xac>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <MX_TIM4_Init+0xac>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027a0:	4818      	ldr	r0, [pc, #96]	; (8002804 <MX_TIM4_Init+0xac>)
 80027a2:	f003 f9e4 	bl	8005b6e <HAL_TIM_PWM_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80027ac:	f000 fb26 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4619      	mov	r1, r3
 80027be:	4811      	ldr	r0, [pc, #68]	; (8002804 <MX_TIM4_Init+0xac>)
 80027c0:	f003 ffa4 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80027ca:	f000 fb17 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ce:	2360      	movs	r3, #96	; 0x60
 80027d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2204      	movs	r2, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4807      	ldr	r0, [pc, #28]	; (8002804 <MX_TIM4_Init+0xac>)
 80027e6:	f003 fc25 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80027f0:	f000 fb04 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <MX_TIM4_Init+0xac>)
 80027f6:	f000 fce3 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200003e4 	.word	0x200003e4
 8002808:	40000800 	.word	0x40000800

0800280c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002830:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <MX_TIM5_Init+0xa8>)
 8002832:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002836:	2253      	movs	r2, #83	; 0x53
 8002838:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM5_Init+0xa4>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002842:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002846:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_TIM5_Init+0xa4>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002854:	4816      	ldr	r0, [pc, #88]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002856:	f003 f93b 	bl	8005ad0 <HAL_TIM_OC_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002860:	f000 facc 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800286c:	f107 0320 	add.w	r3, r7, #32
 8002870:	4619      	mov	r1, r3
 8002872:	480f      	ldr	r0, [pc, #60]	; (80028b0 <MX_TIM5_Init+0xa4>)
 8002874:	f003 ff4a 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800287e:	f000 fabd 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM5_Init+0xa4>)
 800289a:	f003 fb6f 	bl	8005f7c <HAL_TIM_OC_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028a4:	f000 faaa 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000042c 	.word	0x2000042c
 80028b4:	40000c00 	.word	0x40000c00

080028b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028be:	463b      	mov	r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <MX_TIM6_Init+0x64>)
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <MX_TIM6_Init+0x68>)
 80028ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <MX_TIM6_Init+0x64>)
 80028ce:	2253      	movs	r2, #83	; 0x53
 80028d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <MX_TIM6_Init+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <MX_TIM6_Init+0x64>)
 80028da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80028de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <MX_TIM6_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <MX_TIM6_Init+0x64>)
 80028e8:	f003 f832 	bl	8005950 <HAL_TIM_Base_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80028f2:	f000 fa83 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028fe:	463b      	mov	r3, r7
 8002900:	4619      	mov	r1, r3
 8002902:	4806      	ldr	r0, [pc, #24]	; (800291c <MX_TIM6_Init+0x64>)
 8002904:	f003 ff02 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800290e:	f000 fa75 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000474 	.word	0x20000474
 8002920:	40001000 	.word	0x40001000

08002924 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <MX_TIM7_Init+0x64>)
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <MX_TIM7_Init+0x68>)
 8002936:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_TIM7_Init+0x64>)
 800293a:	2253      	movs	r2, #83	; 0x53
 800293c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <MX_TIM7_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <MX_TIM7_Init+0x64>)
 8002946:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800294a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_TIM7_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002952:	480d      	ldr	r0, [pc, #52]	; (8002988 <MX_TIM7_Init+0x64>)
 8002954:	f002 fffc 	bl	8005950 <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800295e:	f000 fa4d 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800296a:	463b      	mov	r3, r7
 800296c:	4619      	mov	r1, r3
 800296e:	4806      	ldr	r0, [pc, #24]	; (8002988 <MX_TIM7_Init+0x64>)
 8002970:	f003 fecc 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800297a:	f000 fa3f 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200004bc 	.word	0x200004bc
 800298c:	40001400 	.word	0x40001400

08002990 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b092      	sub	sp, #72	; 0x48
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
 80029b0:	615a      	str	r2, [r3, #20]
 80029b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	2220      	movs	r2, #32
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f005 fd23 	bl	8008406 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029c0:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029c2:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <MX_TIM8_Init+0x11c>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029c8:	2253      	movs	r2, #83	; 0x53
 80029ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80029d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80029ec:	482e      	ldr	r0, [pc, #184]	; (8002aa8 <MX_TIM8_Init+0x118>)
 80029ee:	f003 f8be 	bl	8005b6e <HAL_TIM_PWM_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80029f8:	f000 fa00 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4827      	ldr	r0, [pc, #156]	; (8002aa8 <MX_TIM8_Init+0x118>)
 8002a0c:	f003 fe7e 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002a16:	f000 f9f1 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a1a:	2360      	movs	r3, #96	; 0x60
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a26:	2300      	movs	r3, #0
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <MX_TIM8_Init+0x118>)
 8002a40:	f003 faf8 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002a4a:	f000 f9d7 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	220c      	movs	r2, #12
 8002a54:	4619      	mov	r1, r3
 8002a56:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <MX_TIM8_Init+0x118>)
 8002a58:	f003 faec 	bl	8006034 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002a62:	f000 f9cb 	bl	8002dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <MX_TIM8_Init+0x118>)
 8002a8a:	f003 febb 	bl	8006804 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002a94:	f000 f9b2 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a98:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <MX_TIM8_Init+0x118>)
 8002a9a:	f000 fb91 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002a9e:	bf00      	nop
 8002aa0:	3748      	adds	r7, #72	; 0x48
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000504 	.word	0x20000504
 8002aac:	40010400 	.word	0x40010400

08002ab0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002ada:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ade:	f7ff fc83 	bl	80023e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7ff fc68 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002aec:	2302      	movs	r3, #2
 8002aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002afc:	2308      	movs	r3, #8
 8002afe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4818      	ldr	r0, [pc, #96]	; (8002b68 <MX_UART4_Init+0xb8>)
 8002b06:	f004 f82e 	bl	8006b66 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b0a:	f7ff fba5 	bl	8002258 <__NVIC_GetPriorityGrouping>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbf5 	bl	8002304 <NVIC_EncodePriority>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	2034      	movs	r0, #52	; 0x34
 8002b20:	f7ff fbc6 	bl	80022b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002b24:	2034      	movs	r0, #52	; 0x34
 8002b26:	f7ff fba5 	bl	8002274 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002b2a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002b2e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b44:	2300      	movs	r3, #0
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4807      	ldr	r0, [pc, #28]	; (8002b6c <MX_UART4_Init+0xbc>)
 8002b50:	f004 fc2c 	bl	80073ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_UART4_Init+0xbc>)
 8002b56:	f7ff fc18 	bl	800238a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002b5a:	4804      	ldr	r0, [pc, #16]	; (8002b6c <MX_UART4_Init+0xbc>)
 8002b5c:	f7ff fc05 	bl	800236a <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	3738      	adds	r7, #56	; 0x38
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40004c00 	.word	0x40004c00

08002b70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002b9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b9e:	f7ff fc23 	bl	80023e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002ba2:	2004      	movs	r0, #4
 8002ba4:	f7ff fc08 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002ba8:	2008      	movs	r0, #8
 8002baa:	f7ff fc05 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4821      	ldr	r0, [pc, #132]	; (8002c54 <MX_UART5_Init+0xe4>)
 8002bce:	f003 ffca 	bl	8006b66 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002be6:	2308      	movs	r3, #8
 8002be8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	481a      	ldr	r0, [pc, #104]	; (8002c58 <MX_UART5_Init+0xe8>)
 8002bf0:	f003 ffb9 	bl	8006b66 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002bf4:	f7ff fb30 	bl	8002258 <__NVIC_GetPriorityGrouping>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb80 	bl	8002304 <NVIC_EncodePriority>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4619      	mov	r1, r3
 8002c08:	2035      	movs	r0, #53	; 0x35
 8002c0a:	f7ff fb51 	bl	80022b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002c0e:	2035      	movs	r0, #53	; 0x35
 8002c10:	f7ff fb30 	bl	8002274 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002c14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c26:	230c      	movs	r3, #12
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	4808      	ldr	r0, [pc, #32]	; (8002c5c <MX_UART5_Init+0xec>)
 8002c3a:	f004 fbb7 	bl	80073ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002c3e:	4807      	ldr	r0, [pc, #28]	; (8002c5c <MX_UART5_Init+0xec>)
 8002c40:	f7ff fba3 	bl	800238a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_UART5_Init+0xec>)
 8002c46:	f7ff fb90 	bl	800236a <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	3738      	adds	r7, #56	; 0x38
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40005000 	.word	0x40005000

08002c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	615a      	str	r2, [r3, #20]
 8002c78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c8e:	f7ff fbab 	bl	80023e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7ff fb90 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002c98:	230c      	movs	r3, #12
 8002c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002cac:	2307      	movs	r3, #7
 8002cae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4818      	ldr	r0, [pc, #96]	; (8002d18 <MX_USART2_UART_Init+0xb8>)
 8002cb6:	f003 ff56 	bl	8006b66 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002cba:	f7ff facd 	bl	8002258 <__NVIC_GetPriorityGrouping>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fb1d 	bl	8002304 <NVIC_EncodePriority>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	2026      	movs	r0, #38	; 0x26
 8002cd0:	f7ff faee 	bl	80022b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002cd4:	2026      	movs	r0, #38	; 0x26
 8002cd6:	f7ff facd 	bl	8002274 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002cda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cde:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002cec:	230c      	movs	r3, #12
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4807      	ldr	r0, [pc, #28]	; (8002d1c <MX_USART2_UART_Init+0xbc>)
 8002d00:	f004 fb54 	bl	80073ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_USART2_UART_Init+0xbc>)
 8002d06:	f7ff fb40 	bl	800238a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002d0a:	4804      	ldr	r0, [pc, #16]	; (8002d1c <MX_USART2_UART_Init+0xbc>)
 8002d0c:	f7ff fb2d 	bl	800236a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	3738      	adds	r7, #56	; 0x38
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40004400 	.word	0x40004400

08002d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_GPIO_Init+0xd4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f246 0110 	movw	r1, #24592	; 0x6010
 8002dc8:	480b      	ldr	r0, [pc, #44]	; (8002df8 <MX_GPIO_Init+0xd8>)
 8002dca:	f001 fb5f 	bl	800448c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14;
 8002dce:	f246 0310 	movw	r3, #24592	; 0x6010
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	4804      	ldr	r0, [pc, #16]	; (8002df8 <MX_GPIO_Init+0xd8>)
 8002de8:	f001 f9b4 	bl	8004154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dec:	bf00      	nop
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000

08002dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e00:	b672      	cpsid	i
}
 8002e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <Error_Handler+0x8>

08002e06 <max>:
 *      Author: akswnd98
 */

#include "math_utils.h"

int max (int a, int b) {
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bfb8      	it	lt
 8002e18:	4613      	movlt	r3, r2
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <min>:

int min (int a, int b) {
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bfa8      	it	ge
 8002e38:	4613      	movge	r3, r2
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <min_f>:

float max_f (float a, float b) {
	return a > b ? a : b;
}

float min_f (float a, float b) {
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e50:	edc7 0a00 	vstr	s1, [r7]
	return a < b ? a : b;
 8002e54:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e58:	edd7 7a00 	vldr	s15, [r7]
 8002e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d501      	bpl.n	8002e6a <min_f+0x24>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	e000      	b.n	8002e6c <min_f+0x26>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	ee07 3a90 	vmov	s15, r3
}
 8002e70:	eeb0 0a67 	vmov.f32	s0, s15
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <start_servos>:
#include "main.h"

extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim8;

void start_servos () {
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0
	start_servo1();
 8002e82:	f000 f809 	bl	8002e98 <start_servo1>
	start_servo2();
 8002e86:	f000 f821 	bl	8002ecc <start_servo2>
	start_servo3();
 8002e8a:	f000 f839 	bl	8002f00 <start_servo3>
	start_servo4();
 8002e8e:	f000 f851 	bl	8002f34 <start_servo4>
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <start_servo1>:

void start_servo1 () {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <start_servo1+0x10>)
 8002ea0:	f002 feb4 	bl	8005c0c <HAL_TIM_PWM_Start>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000039c 	.word	0x2000039c

08002eac <update_servo1_pwm>:

void update_servo1_pwm (int signal) {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR3 = signal;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <update_servo1_pwm+0x1c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	2000039c 	.word	0x2000039c

08002ecc <start_servo2>:

void start_servo2 () {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002ed0:	210c      	movs	r1, #12
 8002ed2:	4802      	ldr	r0, [pc, #8]	; (8002edc <start_servo2+0x10>)
 8002ed4:	f002 fe9a 	bl	8005c0c <HAL_TIM_PWM_Start>
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000039c 	.word	0x2000039c

08002ee0 <update_servo2_pwm>:

void update_servo2_pwm (int signal) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR4 = signal;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <update_servo2_pwm+0x1c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	2000039c 	.word	0x2000039c

08002f00 <start_servo3>:

void start_servo3 () {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002f04:	2108      	movs	r1, #8
 8002f06:	4802      	ldr	r0, [pc, #8]	; (8002f10 <start_servo3+0x10>)
 8002f08:	f002 fe80 	bl	8005c0c <HAL_TIM_PWM_Start>
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000504 	.word	0x20000504

08002f14 <update_servo3_pwm>:

void update_servo3_pwm (int signal) {
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	htim8.Instance->CCR3 = signal;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <update_servo3_pwm+0x1c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000504 	.word	0x20000504

08002f34 <start_servo4>:

void start_servo4 () {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002f38:	210c      	movs	r1, #12
 8002f3a:	4802      	ldr	r0, [pc, #8]	; (8002f44 <start_servo4+0x10>)
 8002f3c:	f002 fe66 	bl	8005c0c <HAL_TIM_PWM_Start>
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000504 	.word	0x20000504

08002f48 <update_servo4_pwm>:

void update_servo4_pwm (int signal) {
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	htim8.Instance->CCR4 = signal;
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <update_servo4_pwm+0x1c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	20000504 	.word	0x20000504

08002f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_MspInit+0x4c>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_SPI_MspInit+0x84>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d12b      	bne.n	8003032 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8002fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_SPI_MspInit+0x88>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003012:	23e0      	movs	r3, #224	; 0xe0
 8003014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003022:	2305      	movs	r3, #5
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <HAL_SPI_MspInit+0x8c>)
 800302e:	f001 f891 	bl	8004154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003032:	bf00      	nop
 8003034:	3728      	adds	r7, #40	; 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40013000 	.word	0x40013000
 8003040:	40023800 	.word	0x40023800
 8003044:	40020000 	.word	0x40020000

08003048 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003076:	e026      	b.n	80030c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_TIM_PWM_MspInit+0x94>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10e      	bne.n	80030a0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
}
 800309e:	e012      	b.n	80030c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_TIM_PWM_MspInit+0x98>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_TIM_PWM_MspInit+0x90>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_TIM_OC_MspInit+0x48>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d115      	bne.n	8003122 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <HAL_TIM_OC_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <HAL_TIM_OC_MspInit+0x4c>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_TIM_OC_MspInit+0x4c>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2032      	movs	r0, #50	; 0x32
 8003118:	f000 ffe5 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800311c:	2032      	movs	r0, #50	; 0x32
 800311e:	f000 fffe 	bl	800411e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <HAL_TIM_Base_MspInit+0x80>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d116      	bne.n	8003174 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 8003150:	f043 0310 	orr.w	r3, r3, #16
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	2036      	movs	r0, #54	; 0x36
 8003168:	f000 ffbd 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800316c:	2036      	movs	r0, #54	; 0x36
 800316e:	f000 ffd6 	bl	800411e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003172:	e01a      	b.n	80031aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a10      	ldr	r2, [pc, #64]	; (80031bc <HAL_TIM_Base_MspInit+0x88>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d115      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_TIM_Base_MspInit+0x84>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	2037      	movs	r0, #55	; 0x37
 80031a0:	f000 ffa1 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031a4:	2037      	movs	r0, #55	; 0x37
 80031a6:	f000 ffba 	bl	800411e <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40001000 	.word	0x40001000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40001400 	.word	0x40001400

080031c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_TIM_MspPostInit+0xf8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d11e      	bne.n	8003220 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031fe:	2303      	movs	r3, #3
 8003200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800320e:	2302      	movs	r3, #2
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4829      	ldr	r0, [pc, #164]	; (80032c0 <HAL_TIM_MspPostInit+0x100>)
 800321a:	f000 ff9b 	bl	8004154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800321e:	e047      	b.n	80032b0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_TIM_MspPostInit+0x104>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d11e      	bne.n	8003268 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003256:	2302      	movs	r3, #2
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4817      	ldr	r0, [pc, #92]	; (80032c0 <HAL_TIM_MspPostInit+0x100>)
 8003262:	f000 ff77 	bl	8004154 <HAL_GPIO_Init>
}
 8003266:	e023      	b.n	80032b0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_TIM_MspPostInit+0x108>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d11e      	bne.n	80032b0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_TIM_MspPostInit+0xfc>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800328e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032a0:	2303      	movs	r3, #3
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4808      	ldr	r0, [pc, #32]	; (80032cc <HAL_TIM_MspPostInit+0x10c>)
 80032ac:	f000 ff52 	bl	8004154 <HAL_GPIO_Init>
}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40010400 	.word	0x40010400
 80032cc:	40020800 	.word	0x40020800

080032d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d4:	e7fe      	b.n	80032d4 <NMI_Handler+0x4>

080032d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <MemManage_Handler+0x4>

080032e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <BusFault_Handler+0x4>

080032e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <UsageFault_Handler+0x4>

080032ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800331c:	f000 fdc4 	bl	8003ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  // handle_hc12_transmit_it();
  // handle_hc12_receive_it();
	handle_ia6b_receive_it();
 8003328:	f000 fcec 	bl	8003d04 <handle_ia6b_receive_it>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <TIM5_IRQHandler+0x10>)
 8003336:	f002 fd31 	bl	8005d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000042c 	.word	0x2000042c

08003344 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	handle_hc12_receive_it();
 8003348:	f000 fcc0 	bl	8003ccc <handle_hc12_receive_it>
	handle_hc12_transmit_it();
 800334c:	f000 fca4 	bl	8003c98 <handle_hc12_transmit_it>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	handle_debug_transmit_it();
 8003358:	f000 fd10 	bl	8003d7c <handle_debug_transmit_it>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}

08003360 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <TIM6_DAC_IRQHandler+0x10>)
 8003366:	f002 fd19 	bl	8005d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000474 	.word	0x20000474

08003374 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <TIM7_IRQHandler+0x10>)
 800337a:	f002 fd0f 	bl	8005d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200004bc 	.word	0x200004bc

08003388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return 1;
 800338c:	2301      	movs	r3, #1
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_kill>:

int _kill(int pid, int sig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033a2:	f005 f883 	bl	80084ac <__errno>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2216      	movs	r2, #22
 80033aa:	601a      	str	r2, [r3, #0]
  return -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_exit>:

void _exit (int status)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffe7 	bl	8003398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ca:	e7fe      	b.n	80033ca <_exit+0x12>

080033cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00a      	b.n	80033f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033de:	f3af 8000 	nop.w
 80033e2:	4601      	mov	r1, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60ba      	str	r2, [r7, #8]
 80033ea:	b2ca      	uxtb	r2, r1
 80033ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf0      	blt.n	80033de <_read+0x12>
  }

  return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
  return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f005 f804 	bl	80084ac <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20020000 	.word	0x20020000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	2000054c 	.word	0x2000054c
 80034d8:	20000f20 	.word	0x20000f20

080034dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <start_euler_state_update_tim>:

extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim7;

void start_euler_state_update_tim () {
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim5);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <start_euler_state_update_tim+0x10>)
 8003506:	f002 fa73 	bl	80059f0 <HAL_TIM_Base_Start_IT>
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	2000042c 	.word	0x2000042c

08003514 <start_control_surface_angle_update_tim>:

void start_control_surface_angle_update_tim () {
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <start_control_surface_angle_update_tim+0x10>)
 800351a:	f002 fa69 	bl	80059f0 <HAL_TIM_Base_Start_IT>
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000474 	.word	0x20000474

08003528 <start_debug_tim>:

void start_debug_tim () {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <start_debug_tim+0x10>)
 800352e:	f002 fa5f 	bl	80059f0 <HAL_TIM_Base_Start_IT>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200004bc 	.word	0x200004bc

0800353c <HAL_TIM_PeriodElapsedCallback>:

uint8_t euler_state_update_it = 0;
uint8_t control_surface_angle_update_it = 0;
uint8_t debug_it = 0;
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <HAL_TIM_PeriodElapsedCallback+0x1a>
		euler_state_update_it = 1;
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == htim6.Instance) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d102      	bne.n	8003568 <HAL_TIM_PeriodElapsedCallback+0x2c>
		control_surface_angle_update_it = 1;
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == htim7.Instance) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d102      	bne.n	800357a <HAL_TIM_PeriodElapsedCallback+0x3e>
		debug_it = 1;
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
	}
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000042c 	.word	0x2000042c
 800358c:	20000550 	.word	0x20000550
 8003590:	20000474 	.word	0x20000474
 8003594:	20000551 	.word	0x20000551
 8003598:	200004bc 	.word	0x200004bc
 800359c:	20000552 	.word	0x20000552

080035a0 <process_tuning_receive>:
uint8_t tuning_rx_buf[100];
int tuning_payload_cnt = 0;
uint16_t tuning[20] = {0, };
uint16_t tuning_crc = 0;

void process_tuning_receive (uint8_t data) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if (tuning_payload_cnt == 0 && data == 0x20) {
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <process_tuning_receive+0x118>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <process_tuning_receive+0x2e>
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d10a      	bne.n	80035ce <process_tuning_receive+0x2e>
    tuning_rx_buf[tuning_payload_cnt] = data;
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <process_tuning_receive+0x118>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	493f      	ldr	r1, [pc, #252]	; (80036bc <process_tuning_receive+0x11c>)
 80035be:	79fa      	ldrb	r2, [r7, #7]
 80035c0:	54ca      	strb	r2, [r1, r3]
    tuning_payload_cnt++;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <process_tuning_receive+0x118>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <process_tuning_receive+0x118>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e252      	b.n	8003a74 <process_tuning_receive+0x4d4>
  } else if (tuning_payload_cnt == 1 && data == 0x40) {
 80035ce:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <process_tuning_receive+0x118>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10d      	bne.n	80035f2 <process_tuning_receive+0x52>
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d10a      	bne.n	80035f2 <process_tuning_receive+0x52>
    tuning_rx_buf[tuning_payload_cnt] = data;
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <process_tuning_receive+0x118>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4936      	ldr	r1, [pc, #216]	; (80036bc <process_tuning_receive+0x11c>)
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	54ca      	strb	r2, [r1, r3]
    tuning_payload_cnt++;
 80035e6:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <process_tuning_receive+0x118>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <process_tuning_receive+0x118>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e240      	b.n	8003a74 <process_tuning_receive+0x4d4>
  } else if (tuning_payload_cnt >= 2 && tuning_payload_cnt < 2 + 2 * NUM_OF_TUNINGS) {
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <process_tuning_receive+0x118>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	dd0e      	ble.n	8003618 <process_tuning_receive+0x78>
 80035fa:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <process_tuning_receive+0x118>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b1d      	cmp	r3, #29
 8003600:	dc0a      	bgt.n	8003618 <process_tuning_receive+0x78>
    tuning_rx_buf[tuning_payload_cnt] = data;
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <process_tuning_receive+0x118>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	492d      	ldr	r1, [pc, #180]	; (80036bc <process_tuning_receive+0x11c>)
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	54ca      	strb	r2, [r1, r3]
    tuning_payload_cnt++;
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <process_tuning_receive+0x118>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <process_tuning_receive+0x118>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e22d      	b.n	8003a74 <process_tuning_receive+0x4d4>
  } else if (tuning_payload_cnt == 2 + 2 * NUM_OF_TUNINGS) {
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <process_tuning_receive+0x118>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b1e      	cmp	r3, #30
 800361e:	d114      	bne.n	800364a <process_tuning_receive+0xaa>
    tuning_crc &= 0xff00;
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <process_tuning_receive+0x120>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <process_tuning_receive+0x120>)
 800362c:	801a      	strh	r2, [r3, #0]
    tuning_crc |= data;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	b29a      	uxth	r2, r3
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <process_tuning_receive+0x120>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <process_tuning_receive+0x120>)
 800363c:	801a      	strh	r2, [r3, #0]
    tuning_payload_cnt++;
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <process_tuning_receive+0x118>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <process_tuning_receive+0x118>)
 8003646:	6013      	str	r3, [r2, #0]
    }
    tuning_payload_cnt = 0;
  } else {
    tuning_payload_cnt = 0;
  }
}
 8003648:	e214      	b.n	8003a74 <process_tuning_receive+0x4d4>
  } else if (tuning_payload_cnt == 2 + 2 * NUM_OF_TUNINGS + 1) {
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <process_tuning_receive+0x118>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b1f      	cmp	r3, #31
 8003650:	f040 820c 	bne.w	8003a6c <process_tuning_receive+0x4cc>
    uint16_t check_sum = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < (NUM_OF_TUNINGS + 1) * 2; i++) {
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e00a      	b.n	8003674 <process_tuning_receive+0xd4>
      check_sum += tuning_rx_buf[i];
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <process_tuning_receive+0x11c>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	8afb      	ldrh	r3, [r7, #22]
 800366a:	4413      	add	r3, r2
 800366c:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < (NUM_OF_TUNINGS + 1) * 2; i++) {
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b1d      	cmp	r3, #29
 8003678:	ddf1      	ble.n	800365e <process_tuning_receive+0xbe>
    tuning_crc &= 0x00ff;
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <process_tuning_receive+0x120>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	b29a      	uxth	r2, r3
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <process_tuning_receive+0x120>)
 8003684:	801a      	strh	r2, [r3, #0]
    tuning_crc |= ((uint16_t)data << 8);
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b21a      	sxth	r2, r3
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <process_tuning_receive+0x120>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21b      	sxth	r3, r3
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <process_tuning_receive+0x120>)
 800369a:	801a      	strh	r2, [r3, #0]
    if (0xffff - check_sum == tuning_crc) {
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036a2:	33ff      	adds	r3, #255	; 0xff
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <process_tuning_receive+0x120>)
 80036a6:	8812      	ldrh	r2, [r2, #0]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	f040 81ad 	bne.w	8003a08 <process_tuning_receive+0x468>
      for (int i = 0, j = 2; i < NUM_OF_TUNINGS; i++, j += 2) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	2302      	movs	r3, #2
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	e016      	b.n	80036e6 <process_tuning_receive+0x146>
 80036b8:	200005b8 	.word	0x200005b8
 80036bc:	20000554 	.word	0x20000554
 80036c0:	200005e4 	.word	0x200005e4
        tuning[i] = *(uint16_t *)(tuning_rx_buf + j) & 0xfff;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4ad2      	ldr	r2, [pc, #840]	; (8003a10 <process_tuning_receive+0x470>)
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	b299      	uxth	r1, r3
 80036d2:	4ad0      	ldr	r2, [pc, #832]	; (8003a14 <process_tuning_receive+0x474>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0, j = 2; i < NUM_OF_TUNINGS; i++, j += 2) {
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3302      	adds	r3, #2
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b0d      	cmp	r3, #13
 80036ea:	ddeb      	ble.n	80036c4 <process_tuning_receive+0x124>
      phi_error_P_gain = min_f(PHI_ERROR_P_GAIN_FS, (float)tuning[PHI_ERROR_P_IDX] / 2000.0 * PHI_ERROR_P_GAIN_FS);
 80036ec:	4bc9      	ldr	r3, [pc, #804]	; (8003a14 <process_tuning_receive+0x474>)
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	ee17 0a90 	vmov	r0, s15
 80036fc:	f7fc ff24 	bl	8000548 <__aeabi_f2d>
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	4bc4      	ldr	r3, [pc, #784]	; (8003a18 <process_tuning_receive+0x478>)
 8003706:	f7fd f8a1 	bl	800084c <__aeabi_ddiv>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	4bc1      	ldr	r3, [pc, #772]	; (8003a1c <process_tuning_receive+0x47c>)
 8003718:	f7fc ff6e 	bl	80005f8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f7fd fa60 	bl	8000be8 <__aeabi_d2f>
 8003728:	4603      	mov	r3, r0
 800372a:	ee00 3a90 	vmov	s1, r3
 800372e:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8003a20 <process_tuning_receive+0x480>
 8003732:	f7ff fb88 	bl	8002e46 <min_f>
 8003736:	eef0 7a40 	vmov.f32	s15, s0
 800373a:	4bba      	ldr	r3, [pc, #744]	; (8003a24 <process_tuning_receive+0x484>)
 800373c:	edc3 7a00 	vstr	s15, [r3]
      phi_dot_FF_gain = min_f(PHI_DOT_FF_GAIN_FS, (float)tuning[PHI_DOT_FF_IDX] / 2000.0 * PHI_DOT_FF_GAIN_FS);
 8003740:	4bb4      	ldr	r3, [pc, #720]	; (8003a14 <process_tuning_receive+0x474>)
 8003742:	885b      	ldrh	r3, [r3, #2]
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374c:	ee17 0a90 	vmov	r0, s15
 8003750:	f7fc fefa 	bl	8000548 <__aeabi_f2d>
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	4baf      	ldr	r3, [pc, #700]	; (8003a18 <process_tuning_receive+0x478>)
 800375a:	f7fd f877 	bl	800084c <__aeabi_ddiv>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	4baf      	ldr	r3, [pc, #700]	; (8003a28 <process_tuning_receive+0x488>)
 800376c:	f7fc ff44 	bl	80005f8 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f7fd fa36 	bl	8000be8 <__aeabi_d2f>
 800377c:	4603      	mov	r3, r0
 800377e:	ee00 3a90 	vmov	s1, r3
 8003782:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8003a2c <process_tuning_receive+0x48c>
 8003786:	f7ff fb5e 	bl	8002e46 <min_f>
 800378a:	eef0 7a40 	vmov.f32	s15, s0
 800378e:	4ba8      	ldr	r3, [pc, #672]	; (8003a30 <process_tuning_receive+0x490>)
 8003790:	edc3 7a00 	vstr	s15, [r3]
      phi_dot_error_P_gain = min_f(PHI_DOT_ERROR_P_GAIN_FS, (float)tuning[PHI_DOT_ERROR_P_IDX] / 2000.0 * PHI_DOT_ERROR_P_GAIN_FS);
 8003794:	4b9f      	ldr	r3, [pc, #636]	; (8003a14 <process_tuning_receive+0x474>)
 8003796:	889b      	ldrh	r3, [r3, #4]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a0:	ee17 0a90 	vmov	r0, s15
 80037a4:	f7fc fed0 	bl	8000548 <__aeabi_f2d>
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b9a      	ldr	r3, [pc, #616]	; (8003a18 <process_tuning_receive+0x478>)
 80037ae:	f7fd f84d 	bl	800084c <__aeabi_ddiv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b9d      	ldr	r3, [pc, #628]	; (8003a34 <process_tuning_receive+0x494>)
 80037c0:	f7fc ff1a 	bl	80005f8 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7fd fa0c 	bl	8000be8 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	ee00 3a90 	vmov	s1, r3
 80037d6:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003a38 <process_tuning_receive+0x498>
 80037da:	f7ff fb34 	bl	8002e46 <min_f>
 80037de:	eef0 7a40 	vmov.f32	s15, s0
 80037e2:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <process_tuning_receive+0x49c>)
 80037e4:	edc3 7a00 	vstr	s15, [r3]
      phi_dot_error_I_gain = min_f(PHI_DOT_ERROR_I_GAIN_FS, (float)tuning[PHI_DOT_ERROR_I_IDX] / 2000.0 * PHI_DOT_ERROR_I_GAIN_FS);
 80037e8:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <process_tuning_receive+0x474>)
 80037ea:	88db      	ldrh	r3, [r3, #6]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f4:	ee17 0a90 	vmov	r0, s15
 80037f8:	f7fc fea6 	bl	8000548 <__aeabi_f2d>
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <process_tuning_receive+0x478>)
 8003802:	f7fd f823 	bl	800084c <__aeabi_ddiv>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <process_tuning_receive+0x47c>)
 8003814:	f7fc fef0 	bl	80005f8 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f7fd f9e2 	bl	8000be8 <__aeabi_d2f>
 8003824:	4603      	mov	r3, r0
 8003826:	ee00 3a90 	vmov	s1, r3
 800382a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003a20 <process_tuning_receive+0x480>
 800382e:	f7ff fb0a 	bl	8002e46 <min_f>
 8003832:	eef0 7a40 	vmov.f32	s15, s0
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <process_tuning_receive+0x4a0>)
 8003838:	edc3 7a00 	vstr	s15, [r3]
      theta_error_P_gain = min_f(THETA_ERROR_P_GAIN_FS, (float)tuning[THETA_ERROR_P_IDX] / 2000.0 * THETA_ERROR_P_GAIN_FS);
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <process_tuning_receive+0x474>)
 800383e:	891b      	ldrh	r3, [r3, #8]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003848:	ee17 0a90 	vmov	r0, s15
 800384c:	f7fc fe7c 	bl	8000548 <__aeabi_f2d>
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <process_tuning_receive+0x478>)
 8003856:	f7fc fff9 	bl	800084c <__aeabi_ddiv>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <process_tuning_receive+0x47c>)
 8003868:	f7fc fec6 	bl	80005f8 <__aeabi_dmul>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f7fd f9b8 	bl	8000be8 <__aeabi_d2f>
 8003878:	4603      	mov	r3, r0
 800387a:	ee00 3a90 	vmov	s1, r3
 800387e:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8003a20 <process_tuning_receive+0x480>
 8003882:	f7ff fae0 	bl	8002e46 <min_f>
 8003886:	eef0 7a40 	vmov.f32	s15, s0
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <process_tuning_receive+0x4a4>)
 800388c:	edc3 7a00 	vstr	s15, [r3]
      theta_dot_FF_gain = min_f(THETA_DOT_FF_GAIN_FS, (float)tuning[THETA_DOT_FF_IDX] / 2000.0 * THETA_DOT_FF_GAIN_FS);
 8003890:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <process_tuning_receive+0x474>)
 8003892:	895b      	ldrh	r3, [r3, #10]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	ee17 0a90 	vmov	r0, s15
 80038a0:	f7fc fe52 	bl	8000548 <__aeabi_f2d>
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <process_tuning_receive+0x478>)
 80038aa:	f7fc ffcf 	bl	800084c <__aeabi_ddiv>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <process_tuning_receive+0x488>)
 80038bc:	f7fc fe9c 	bl	80005f8 <__aeabi_dmul>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fd f98e 	bl	8000be8 <__aeabi_d2f>
 80038cc:	4603      	mov	r3, r0
 80038ce:	ee00 3a90 	vmov	s1, r3
 80038d2:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003a2c <process_tuning_receive+0x48c>
 80038d6:	f7ff fab6 	bl	8002e46 <min_f>
 80038da:	eef0 7a40 	vmov.f32	s15, s0
 80038de:	4b5a      	ldr	r3, [pc, #360]	; (8003a48 <process_tuning_receive+0x4a8>)
 80038e0:	edc3 7a00 	vstr	s15, [r3]
      theta_dot_error_P_gain = min_f(THETA_DOT_ERROR_P_GAIN_FS, (float)tuning[THETA_DOT_ERROR_P_IDX] / 2000.0 * THETA_DOT_ERROR_P_GAIN_FS);
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <process_tuning_receive+0x474>)
 80038e6:	899b      	ldrh	r3, [r3, #12]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f0:	ee17 0a90 	vmov	r0, s15
 80038f4:	f7fc fe28 	bl	8000548 <__aeabi_f2d>
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <process_tuning_receive+0x478>)
 80038fe:	f7fc ffa5 	bl	800084c <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <process_tuning_receive+0x494>)
 8003910:	f7fc fe72 	bl	80005f8 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f964 	bl	8000be8 <__aeabi_d2f>
 8003920:	4603      	mov	r3, r0
 8003922:	ee00 3a90 	vmov	s1, r3
 8003926:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8003a38 <process_tuning_receive+0x498>
 800392a:	f7ff fa8c 	bl	8002e46 <min_f>
 800392e:	eef0 7a40 	vmov.f32	s15, s0
 8003932:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <process_tuning_receive+0x4ac>)
 8003934:	edc3 7a00 	vstr	s15, [r3]
      theta_dot_error_I_gain = min_f(THETA_DOT_ERROR_I_GAIN_FS, (float)tuning[THETA_DOT_ERROR_I_IDX] / 2000.0 * THETA_DOT_ERROR_I_GAIN_FS);
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <process_tuning_receive+0x474>)
 800393a:	89db      	ldrh	r3, [r3, #14]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003944:	ee17 0a90 	vmov	r0, s15
 8003948:	f7fc fdfe 	bl	8000548 <__aeabi_f2d>
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <process_tuning_receive+0x478>)
 8003952:	f7fc ff7b 	bl	800084c <__aeabi_ddiv>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <process_tuning_receive+0x47c>)
 8003964:	f7fc fe48 	bl	80005f8 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f7fd f93a 	bl	8000be8 <__aeabi_d2f>
 8003974:	4603      	mov	r3, r0
 8003976:	ee00 3a90 	vmov	s1, r3
 800397a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003a20 <process_tuning_receive+0x480>
 800397e:	f7ff fa62 	bl	8002e46 <min_f>
 8003982:	eef0 7a40 	vmov.f32	s15, s0
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <process_tuning_receive+0x4b0>)
 8003988:	edc3 7a00 	vstr	s15, [r3]
      psi_dot_error_P_gain = min_f(PSI_DOT_ERROR_P_GAIN_FS, (float)tuning[PSI_DOT_ERROR_P_IDX] / 2000.0 * PSI_DOT_ERROR_P_GAIN_FS);
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <process_tuning_receive+0x474>)
 800398e:	8a1b      	ldrh	r3, [r3, #16]
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003998:	ee17 0a90 	vmov	r0, s15
 800399c:	f7fc fdd4 	bl	8000548 <__aeabi_f2d>
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <process_tuning_receive+0x478>)
 80039a6:	f7fc ff51 	bl	800084c <__aeabi_ddiv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <process_tuning_receive+0x47c>)
 80039b8:	f7fc fe1e 	bl	80005f8 <__aeabi_dmul>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	f7fd f910 	bl	8000be8 <__aeabi_d2f>
 80039c8:	4603      	mov	r3, r0
 80039ca:	ee00 3a90 	vmov	s1, r3
 80039ce:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003a20 <process_tuning_receive+0x480>
 80039d2:	f7ff fa38 	bl	8002e46 <min_f>
 80039d6:	eef0 7a40 	vmov.f32	s15, s0
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <process_tuning_receive+0x4b4>)
 80039dc:	edc3 7a00 	vstr	s15, [r3]
      servo1_offset = tuning[SERVO1_OFFSET];
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <process_tuning_receive+0x474>)
 80039e2:	8a9b      	ldrh	r3, [r3, #20]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <process_tuning_receive+0x4b8>)
 80039e8:	601a      	str	r2, [r3, #0]
      servo2_offset = tuning[SERVO2_OFFSET];
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <process_tuning_receive+0x474>)
 80039ec:	8adb      	ldrh	r3, [r3, #22]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <process_tuning_receive+0x4bc>)
 80039f2:	601a      	str	r2, [r3, #0]
      servo3_offset = tuning[SERVO3_OFFSET];
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <process_tuning_receive+0x474>)
 80039f6:	8b1b      	ldrh	r3, [r3, #24]
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <process_tuning_receive+0x4c0>)
 80039fc:	601a      	str	r2, [r3, #0]
      servo4_offset = tuning[SERVO4_OFFSET];
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <process_tuning_receive+0x474>)
 8003a00:	8b5b      	ldrh	r3, [r3, #26]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <process_tuning_receive+0x4c4>)
 8003a06:	601a      	str	r2, [r3, #0]
    tuning_payload_cnt = 0;
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <process_tuning_receive+0x4c8>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	e031      	b.n	8003a74 <process_tuning_receive+0x4d4>
 8003a10:	20000554 	.word	0x20000554
 8003a14:	200005bc 	.word	0x200005bc
 8003a18:	409f4000 	.word	0x409f4000
 8003a1c:	40590000 	.word	0x40590000
 8003a20:	42c80000 	.word	0x42c80000
 8003a24:	20000000 	.word	0x20000000
 8003a28:	407f4000 	.word	0x407f4000
 8003a2c:	43fa0000 	.word	0x43fa0000
 8003a30:	20000008 	.word	0x20000008
 8003a34:	40690000 	.word	0x40690000
 8003a38:	43480000 	.word	0x43480000
 8003a3c:	20000234 	.word	0x20000234
 8003a40:	20000238 	.word	0x20000238
 8003a44:	20000004 	.word	0x20000004
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	2000023c 	.word	0x2000023c
 8003a50:	20000240 	.word	0x20000240
 8003a54:	20000010 	.word	0x20000010
 8003a58:	20000244 	.word	0x20000244
 8003a5c:	20000248 	.word	0x20000248
 8003a60:	2000024c 	.word	0x2000024c
 8003a64:	20000250 	.word	0x20000250
 8003a68:	200005b8 	.word	0x200005b8
    tuning_payload_cnt = 0;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <process_tuning_receive+0x4dc>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
}
 8003a72:	e7ff      	b.n	8003a74 <process_tuning_receive+0x4d4>
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200005b8 	.word	0x200005b8

08003a80 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	; 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	330c      	adds	r3, #12
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	61ba      	str	r2, [r7, #24]
 8003af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	613b      	str	r3, [r7, #16]
   return(result);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e7      	bne.n	8003ad4 <LL_USART_EnableIT_RXNE+0x8>
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b089      	sub	sp, #36	; 0x24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	330c      	adds	r3, #12
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	61ba      	str	r2, [r7, #24]
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e7      	bne.n	8003b1a <LL_USART_EnableIT_TXE+0x8>
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3724      	adds	r7, #36	; 0x24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	330c      	adds	r3, #12
 8003b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	61ba      	str	r2, [r7, #24]
 8003b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e7      	bne.n	8003b60 <LL_USART_DisableIT_TXE+0x8>
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b2db      	uxtb	r3, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	605a      	str	r2, [r3, #4]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <init_uarts>:
uint8_t debug_transmit_buf[1000];
int cur_debug_transmit_len;
int cur_debug_transmit_cnt;
uint8_t debug_transmit_lock;

void init_uarts () {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(ia6b_huart);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <init_uarts+0x1c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff73 	bl	8003acc <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(com_huart);
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <init_uarts+0x20>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff6e 	bl	8003acc <LL_USART_EnableIT_RXNE>
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000024 	.word	0x20000024
 8003bf8:	2000002c 	.word	0x2000002c

08003bfc <do_uart_transmit_it>:

void do_uart_transmit_it (USART_TypeDef *huart, uint8_t *buf, int len, uint8_t *transmit_buf, int *cur_transmit_len, int *cur_transmit_cnt, uint8_t *transmit_lock) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	if (!(*transmit_lock)) {
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d111      	bne.n	8003c36 <do_uart_transmit_it+0x3a>
		*transmit_lock = 1;
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
		memcpy(transmit_buf, buf, len);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	f004 fc71 	bl	8008506 <memcpy>
		*cur_transmit_len = len;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
		*cur_transmit_cnt = 0;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
		LL_USART_EnableIT_TXE(huart);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff ff6e 	bl	8003b12 <LL_USART_EnableIT_TXE>
	}
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <handle_uart_transmit_it>:

void handle_uart_transmit_it (USART_TypeDef *huart, uint8_t *transmit_buf, int *cur_transmit_len, int *cur_transmit_cnt, uint8_t *transmit_lock) {
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
	if (LL_USART_IsActiveFlag_TXE(huart)) {
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff ff2a 	bl	8003aa6 <LL_USART_IsActiveFlag_TXE>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <handle_uart_transmit_it+0x50>
		LL_USART_TransmitData8(huart, transmit_buf[*cur_transmit_cnt]);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ffa6 	bl	8003bb8 <LL_USART_TransmitData8>
		if (++(*cur_transmit_cnt) >= *cur_transmit_len) {
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	db05      	blt.n	8003c8e <handle_uart_transmit_it+0x50>
			LL_USART_DisableIT_TXE(huart);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f7ff ff68 	bl	8003b58 <LL_USART_DisableIT_TXE>
			*transmit_lock = 0;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <handle_hc12_transmit_it>:

void do_hc12_transmit_it (uint8_t *buf, int len) {
	do_uart_transmit_it(hc12_huart, buf, len, hc12_transmit_buf, &cur_hc12_transmit_len, &cur_hc12_transmit_cnt, &hc12_transmit_lock);
}

void handle_hc12_transmit_it () {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	handle_uart_transmit_it(hc12_huart, hc12_transmit_buf, &cur_hc12_transmit_len, &cur_hc12_transmit_cnt, &hc12_transmit_lock);
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <handle_hc12_transmit_it+0x20>)
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <handle_hc12_transmit_it+0x24>)
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <handle_hc12_transmit_it+0x28>)
 8003ca8:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <handle_hc12_transmit_it+0x2c>)
 8003caa:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <handle_hc12_transmit_it+0x30>)
 8003cac:	f7ff ffc7 	bl	8003c3e <handle_uart_transmit_it>
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000028 	.word	0x20000028
 8003cbc:	200009d8 	.word	0x200009d8
 8003cc0:	200009d4 	.word	0x200009d4
 8003cc4:	200009d0 	.word	0x200009d0
 8003cc8:	200005e8 	.word	0x200005e8

08003ccc <handle_hc12_receive_it>:

void handle_hc12_receive_it () {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_RXNE(hc12_huart)) {
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <handle_hc12_receive_it+0x34>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fed2 	bl	8003a80 <LL_USART_IsActiveFlag_RXNE>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <handle_hc12_receive_it+0x2c>
		uint8_t data = LL_USART_ReceiveData8(hc12_huart);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <handle_hc12_receive_it+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff59 	bl	8003b9e <LL_USART_ReceiveData8>
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
		process_tuning_receive(data);
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fc54 	bl	80035a0 <process_tuning_receive>
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000028 	.word	0x20000028

08003d04 <handle_ia6b_receive_it>:

void handle_ia6b_receive_it () {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_RXNE(ia6b_huart)) {
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <handle_ia6b_receive_it+0x34>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff feb6 	bl	8003a80 <LL_USART_IsActiveFlag_RXNE>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <handle_ia6b_receive_it+0x2c>
		uint8_t data = LL_USART_ReceiveData8(ia6b_huart);
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <handle_ia6b_receive_it+0x34>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff3d 	bl	8003b9e <LL_USART_ReceiveData8>
 8003d24:	4603      	mov	r3, r0
 8003d26:	71fb      	strb	r3, [r7, #7]
		process_control_receive(data);
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fac8 	bl	80012c0 <process_control_receive>
	}
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000024 	.word	0x20000024

08003d3c <do_debug_transmit_it>:
		uint8_t data = LL_USART_ReceiveData8(com_huart);
		do_hc12_transmit_it(&data, 1);
	}*/
}

void do_debug_transmit_it (uint8_t *buf, int len) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af04      	add	r7, sp, #16
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	do_uart_transmit_it(debug_huart, buf, len, debug_transmit_buf, &cur_debug_transmit_len, &cur_debug_transmit_cnt, &debug_transmit_lock);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <do_debug_transmit_it+0x2c>)
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <do_debug_transmit_it+0x30>)
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <do_debug_transmit_it+0x34>)
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <do_debug_transmit_it+0x38>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <do_debug_transmit_it+0x3c>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	f7ff ff4e 	bl	8003bfc <do_uart_transmit_it>
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000030 	.word	0x20000030
 8003d6c:	20000dcc 	.word	0x20000dcc
 8003d70:	20000dc8 	.word	0x20000dc8
 8003d74:	20000dc4 	.word	0x20000dc4
 8003d78:	200009dc 	.word	0x200009dc

08003d7c <handle_debug_transmit_it>:

void handle_debug_transmit_it () {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af02      	add	r7, sp, #8
	handle_uart_transmit_it(debug_huart, debug_transmit_buf, &cur_debug_transmit_len, &cur_debug_transmit_cnt, &debug_transmit_lock);
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <handle_debug_transmit_it+0x20>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <handle_debug_transmit_it+0x24>)
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <handle_debug_transmit_it+0x28>)
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <handle_debug_transmit_it+0x2c>)
 8003d8e:	4907      	ldr	r1, [pc, #28]	; (8003dac <handle_debug_transmit_it+0x30>)
 8003d90:	f7ff ff55 	bl	8003c3e <handle_uart_transmit_it>
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000030 	.word	0x20000030
 8003da0:	20000dcc 	.word	0x20000dcc
 8003da4:	20000dc8 	.word	0x20000dc8
 8003da8:	20000dc4 	.word	0x20000dc4
 8003dac:	200009dc 	.word	0x200009dc

08003db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003db4:	f7ff fb92 	bl	80034dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dba:	490d      	ldr	r1, [pc, #52]	; (8003df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dc0:	e002      	b.n	8003dc8 <LoopCopyDataInit>

08003dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dc6:	3304      	adds	r3, #4

08003dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dcc:	d3f9      	bcc.n	8003dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dd0:	4c0a      	ldr	r4, [pc, #40]	; (8003dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd4:	e001      	b.n	8003dda <LoopFillZerobss>

08003dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd8:	3204      	adds	r2, #4

08003dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ddc:	d3fb      	bcc.n	8003dd6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003dde:	f004 fb6b 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003de2:	f7fe fb19 	bl	8002418 <main>
  bx  lr    
 8003de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003df4:	0800e298 	.word	0x0800e298
  ldr r2, =_sbss
 8003df8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003dfc:	20000f20 	.word	0x20000f20

08003e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e00:	e7fe      	b.n	8003e00 <ADC_IRQHandler>
	...

08003e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_Init+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <HAL_Init+0x40>)
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_Init+0x40>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <HAL_Init+0x40>)
 8003e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_Init+0x40>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <HAL_Init+0x40>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	f000 f94f 	bl	80040d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e32:	200f      	movs	r0, #15
 8003e34:	f000 f808 	bl	8003e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e38:	f7ff f896 	bl	8002f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_InitTick+0x54>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_InitTick+0x58>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f967 	bl	800413a <HAL_SYSTICK_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00e      	b.n	8003e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b0f      	cmp	r3, #15
 8003e7a:	d80a      	bhi.n	8003e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	f000 f92f 	bl	80040e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e88:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <HAL_InitTick+0x5c>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000020 	.word	0x20000020
 8003ea0:	20000038 	.word	0x20000038
 8003ea4:	20000034 	.word	0x20000034

08003ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_IncTick+0x20>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_IncTick+0x24>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_IncTick+0x24>)
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000038 	.word	0x20000038
 8003ecc:	20000dd0 	.word	0x20000dd0

08003ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_GetTick+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000dd0 	.word	0x20000dd0

08003ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef0:	f7ff ffee 	bl	8003ed0 <HAL_GetTick>
 8003ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d005      	beq.n	8003f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_Delay+0x44>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f0e:	bf00      	nop
 8003f10:	f7ff ffde 	bl	8003ed0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d8f7      	bhi.n	8003f10 <HAL_Delay+0x28>
  {
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000038 	.word	0x20000038

08003f30 <__NVIC_SetPriorityGrouping>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <__NVIC_SetPriorityGrouping+0x44>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f62:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <__NVIC_SetPriorityGrouping+0x44>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	60d3      	str	r3, [r2, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <__NVIC_GetPriorityGrouping>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <__NVIC_GetPriorityGrouping+0x18>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	f003 0307 	and.w	r3, r3, #7
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_EnableIRQ>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	db0b      	blt.n	8003fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	4907      	ldr	r1, [pc, #28]	; (8003fcc <__NVIC_EnableIRQ+0x38>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000e100 	.word	0xe000e100

08003fd0 <__NVIC_SetPriority>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	db0a      	blt.n	8003ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	490c      	ldr	r1, [pc, #48]	; (800401c <__NVIC_SetPriority+0x4c>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	0112      	lsls	r2, r2, #4
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ff8:	e00a      	b.n	8004010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <__NVIC_SetPriority+0x50>)
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3b04      	subs	r3, #4
 8004008:	0112      	lsls	r2, r2, #4
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	440b      	add	r3, r1
 800400e:	761a      	strb	r2, [r3, #24]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000e100 	.word	0xe000e100
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <NVIC_EncodePriority>:
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	bf28      	it	cs
 8004042:	2304      	movcs	r3, #4
 8004044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3304      	adds	r3, #4
 800404a:	2b06      	cmp	r3, #6
 800404c:	d902      	bls.n	8004054 <NVIC_EncodePriority+0x30>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3b03      	subs	r3, #3
 8004052:	e000      	b.n	8004056 <NVIC_EncodePriority+0x32>
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004058:	f04f 32ff 	mov.w	r2, #4294967295
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	401a      	ands	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800406c:	f04f 31ff 	mov.w	r1, #4294967295
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	43d9      	mvns	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800407c:	4313      	orrs	r3, r2
}
 800407e:	4618      	mov	r0, r3
 8004080:	3724      	adds	r7, #36	; 0x24
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800409c:	d301      	bcc.n	80040a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800409e:	2301      	movs	r3, #1
 80040a0:	e00f      	b.n	80040c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <SysTick_Config+0x40>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040aa:	210f      	movs	r1, #15
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	f7ff ff8e 	bl	8003fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <SysTick_Config+0x40>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <SysTick_Config+0x40>)
 80040bc:	2207      	movs	r2, #7
 80040be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	e000e010 	.word	0xe000e010

080040d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff29 	bl	8003f30 <__NVIC_SetPriorityGrouping>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040f8:	f7ff ff3e 	bl	8003f78 <__NVIC_GetPriorityGrouping>
 80040fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff8e 	bl	8004024 <NVIC_EncodePriority>
 8004108:	4602      	mov	r2, r0
 800410a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff5d 	bl	8003fd0 <__NVIC_SetPriority>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff31 	bl	8003f94 <__NVIC_EnableIRQ>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ffa2 	bl	800408c <SysTick_Config>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e16b      	b.n	8004448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004170:	2201      	movs	r2, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	f040 815a 	bne.w	8004442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d005      	beq.n	80041a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d130      	bne.n	8004208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0201 	and.w	r2, r3, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b03      	cmp	r3, #3
 8004212:	d017      	beq.n	8004244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d123      	bne.n	8004298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	08da      	lsrs	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0203 	and.w	r2, r3, #3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80b4 	beq.w	8004442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b60      	ldr	r3, [pc, #384]	; (8004460 <HAL_GPIO_Init+0x30c>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4a5f      	ldr	r2, [pc, #380]	; (8004460 <HAL_GPIO_Init+0x30c>)
 80042e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ea:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_GPIO_Init+0x30c>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f6:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <HAL_GPIO_Init+0x310>)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a52      	ldr	r2, [pc, #328]	; (8004468 <HAL_GPIO_Init+0x314>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02b      	beq.n	800437a <HAL_GPIO_Init+0x226>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a51      	ldr	r2, [pc, #324]	; (800446c <HAL_GPIO_Init+0x318>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d025      	beq.n	8004376 <HAL_GPIO_Init+0x222>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a50      	ldr	r2, [pc, #320]	; (8004470 <HAL_GPIO_Init+0x31c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <HAL_GPIO_Init+0x21e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a4f      	ldr	r2, [pc, #316]	; (8004474 <HAL_GPIO_Init+0x320>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d019      	beq.n	800436e <HAL_GPIO_Init+0x21a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4e      	ldr	r2, [pc, #312]	; (8004478 <HAL_GPIO_Init+0x324>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0x216>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a4d      	ldr	r2, [pc, #308]	; (800447c <HAL_GPIO_Init+0x328>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_GPIO_Init+0x212>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4c      	ldr	r2, [pc, #304]	; (8004480 <HAL_GPIO_Init+0x32c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <HAL_GPIO_Init+0x20e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a4b      	ldr	r2, [pc, #300]	; (8004484 <HAL_GPIO_Init+0x330>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x20a>
 800435a:	2307      	movs	r3, #7
 800435c:	e00e      	b.n	800437c <HAL_GPIO_Init+0x228>
 800435e:	2308      	movs	r3, #8
 8004360:	e00c      	b.n	800437c <HAL_GPIO_Init+0x228>
 8004362:	2306      	movs	r3, #6
 8004364:	e00a      	b.n	800437c <HAL_GPIO_Init+0x228>
 8004366:	2305      	movs	r3, #5
 8004368:	e008      	b.n	800437c <HAL_GPIO_Init+0x228>
 800436a:	2304      	movs	r3, #4
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x228>
 800436e:	2303      	movs	r3, #3
 8004370:	e004      	b.n	800437c <HAL_GPIO_Init+0x228>
 8004372:	2302      	movs	r3, #2
 8004374:	e002      	b.n	800437c <HAL_GPIO_Init+0x228>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_GPIO_Init+0x228>
 800437a:	2300      	movs	r3, #0
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	f002 0203 	and.w	r2, r2, #3
 8004382:	0092      	lsls	r2, r2, #2
 8004384:	4093      	lsls	r3, r2
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438c:	4935      	ldr	r1, [pc, #212]	; (8004464 <HAL_GPIO_Init+0x310>)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	3302      	adds	r3, #2
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800439a:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_GPIO_Init+0x334>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043be:	4a32      	ldr	r2, [pc, #200]	; (8004488 <HAL_GPIO_Init+0x334>)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c4:	4b30      	ldr	r3, [pc, #192]	; (8004488 <HAL_GPIO_Init+0x334>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <HAL_GPIO_Init+0x334>)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ee:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_GPIO_Init+0x334>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_GPIO_Init+0x334>)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_GPIO_Init+0x334>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_GPIO_Init+0x334>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3301      	adds	r3, #1
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	f67f ae90 	bls.w	8004170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
 8004464:	40013800 	.word	0x40013800
 8004468:	40020000 	.word	0x40020000
 800446c:	40020400 	.word	0x40020400
 8004470:	40020800 	.word	0x40020800
 8004474:	40020c00 	.word	0x40020c00
 8004478:	40021000 	.word	0x40021000
 800447c:	40021400 	.word	0x40021400
 8004480:	40021800 	.word	0x40021800
 8004484:	40021c00 	.word	0x40021c00
 8004488:	40013c00 	.word	0x40013c00

0800448c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
 8004498:	4613      	mov	r3, r2
 800449a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800449c:	787b      	ldrb	r3, [r7, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e267      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d075      	beq.n	80045ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044de:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b85      	ldr	r3, [pc, #532]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d112      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b7e      	ldr	r3, [pc, #504]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05b      	beq.n	80045c8 <HAL_RCC_OscConfig+0x108>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d157      	bne.n	80045c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e242      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x74>
 8004526:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6f      	ldr	r2, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b6d      	ldr	r3, [pc, #436]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6c      	ldr	r2, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004558:	4b69      	ldr	r3, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a68      	ldr	r2, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a65      	ldr	r2, [pc, #404]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7ff fcaa 	bl	8003ed0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7ff fca6 	bl	8003ed0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e207      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xc0>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7ff fc96 	bl	8003ed0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7ff fc92 	bl	8003ed0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1f3      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0xe8>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d6:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b44      	ldr	r3, [pc, #272]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c7      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4937      	ldr	r1, [pc, #220]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_RCC_OscConfig+0x244>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7ff fc4b 	bl	8003ed0 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463e:	f7ff fc47 	bl	8003ed0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1a8      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b28      	ldr	r3, [pc, #160]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4925      	ldr	r1, [pc, #148]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_OscConfig+0x244>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7ff fc2a 	bl	8003ed0 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004680:	f7ff fc26 	bl	8003ed0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e187      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d036      	beq.n	8004718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_RCC_OscConfig+0x248>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7ff fc0a 	bl	8003ed0 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c0:	f7ff fc06 	bl	8003ed0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e167      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x200>
 80046de:	e01b      	b.n	8004718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_OscConfig+0x248>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7ff fbf3 	bl	8003ed0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	e00e      	b.n	800470c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ee:	f7ff fbef 	bl	8003ed0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d907      	bls.n	800470c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e150      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004700:	40023800 	.word	0x40023800
 8004704:	42470000 	.word	0x42470000
 8004708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ea      	bne.n	80046ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8097 	beq.w	8004854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b81      	ldr	r3, [pc, #516]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b7d      	ldr	r3, [pc, #500]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b7a      	ldr	r3, [pc, #488]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b77      	ldr	r3, [pc, #476]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b74      	ldr	r3, [pc, #464]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a73      	ldr	r2, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7ff fbaf 	bl	8003ed0 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7ff fbab 	bl	8003ed0 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e10c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x2ea>
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x30c>
 80047b2:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	4b5c      	ldr	r3, [pc, #368]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5b      	ldr	r2, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047cc:	4b58      	ldr	r3, [pc, #352]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a57      	ldr	r2, [pc, #348]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70
 80047d8:	4b55      	ldr	r3, [pc, #340]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a54      	ldr	r2, [pc, #336]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7ff fb70 	bl	8003ed0 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7ff fb6c 	bl	8003ed0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0cb      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	4b49      	ldr	r3, [pc, #292]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <HAL_RCC_OscConfig+0x334>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004818:	f7ff fb5a 	bl	8003ed0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7ff fb56 	bl	8003ed0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0b5      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	4a38      	ldr	r2, [pc, #224]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a1 	beq.w	80049a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485e:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b08      	cmp	r3, #8
 8004868:	d05c      	beq.n	8004924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d141      	bne.n	80048f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7ff fb2a 	bl	8003ed0 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7ff fb26 	bl	8003ed0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e087      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7ff faff 	bl	8003ed0 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d6:	f7ff fafb 	bl	8003ed0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e05c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x416>
 80048f4:	e054      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7ff fae8 	bl	8003ed0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7ff fae4 	bl	8003ed0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e045      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x444>
 8004922:	e03d      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e038      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x4ec>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d028      	beq.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d121      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d11a      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	4293      	cmp	r3, r2
 8004976:	d111      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	3b01      	subs	r3, #1
 8004986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cc      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d90c      	bls.n	80049ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d044      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e067      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4934      	ldr	r1, [pc, #208]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7ff fa16 	bl	8003ed0 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7ff fa12 	bl	8003ed0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20c      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490a      	ldr	r1, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff f976 	bl	8003e48 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800dc30 	.word	0x0800dc30
 8004b74:	20000020 	.word	0x20000020
 8004b78:	20000034 	.word	0x20000034

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b094      	sub	sp, #80	; 0x50
 8004b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
 8004b88:	2300      	movs	r3, #0
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b94:	4b79      	ldr	r3, [pc, #484]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d00d      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	f200 80e1 	bhi.w	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bae:	e0db      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bb4:	e0db      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb6:	4b73      	ldr	r3, [pc, #460]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bba:	e0d8      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd2:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	633b      	str	r3, [r7, #48]	; 0x30
 8004be6:	2300      	movs	r3, #0
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	0159      	lsls	r1, r3, #5
 8004bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c00:	0150      	lsls	r0, r2, #5
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4621      	mov	r1, r4
 8004c08:	1a51      	subs	r1, r2, r1
 8004c0a:	6139      	str	r1, [r7, #16]
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c20:	4659      	mov	r1, fp
 8004c22:	018b      	lsls	r3, r1, #6
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	018a      	lsls	r2, r1, #6
 8004c2e:	4651      	mov	r1, sl
 8004c30:	ebb2 0801 	subs.w	r8, r2, r1
 8004c34:	4659      	mov	r1, fp
 8004c36:	eb63 0901 	sbc.w	r9, r3, r1
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4e:	4690      	mov	r8, r2
 8004c50:	4699      	mov	r9, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	eb18 0303 	adds.w	r3, r8, r3
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	eb49 0303 	adc.w	r3, r9, r3
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	024b      	lsls	r3, r1, #9
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c78:	4621      	mov	r1, r4
 8004c7a:	024a      	lsls	r2, r1, #9
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c82:	2200      	movs	r2, #0
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8c:	f7fb fffc 	bl	8000c88 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	e058      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	2300      	movs	r3, #0
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	0159      	lsls	r1, r3, #5
 8004cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc6:	0150      	lsls	r0, r2, #5
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4641      	mov	r1, r8
 8004cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cec:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb45 0303 	adc.w	r3, r5, r3
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d22:	4629      	mov	r1, r5
 8004d24:	028b      	lsls	r3, r1, #10
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	028a      	lsls	r2, r1, #10
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d36:	2200      	movs	r2, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	61fa      	str	r2, [r7, #28]
 8004d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d40:	f7fb ffa2 	bl	8000c88 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	3301      	adds	r3, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3750      	adds	r7, #80	; 0x50
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e07b      	b.n	8004e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004daa:	d009      	beq.n	8004dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
 8004db2:	e005      	b.n	8004dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe f8ec 	bl	8002fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	ea42 0103 	orr.w	r1, r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0104 	and.w	r1, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0210 	and.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b088      	sub	sp, #32
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_SPI_Transmit+0x22>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e12d      	b.n	8005118 <HAL_SPI_Transmit+0x27e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec4:	f7ff f804 	bl	8003ed0 <HAL_GetTick>
 8004ec8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ede:	e116      	b.n	800510e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0x52>
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ef0:	e10d      	b.n	800510e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d10f      	bne.n	8004f5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d007      	beq.n	8004f78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d14f      	bne.n	8005022 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Transmit+0xf6>
 8004f8a:	8afb      	ldrh	r3, [r7, #22]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d142      	bne.n	8005016 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fb4:	e02f      	b.n	8005016 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d112      	bne.n	8004fea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fe8:	e015      	b.n	8005016 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fea:	f7fe ff71 	bl	8003ed0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_Transmit+0x168>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d102      	bne.n	8005008 <HAL_SPI_Transmit+0x16e>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005014:	e07b      	b.n	800510e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1ca      	bne.n	8004fb6 <HAL_SPI_Transmit+0x11c>
 8005020:	e050      	b.n	80050c4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Transmit+0x196>
 800502a:	8afb      	ldrh	r3, [r7, #22]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d144      	bne.n	80050ba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005056:	e030      	b.n	80050ba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d113      	bne.n	800508e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	86da      	strh	r2, [r3, #54]	; 0x36
 800508c:	e015      	b.n	80050ba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508e:	f7fe ff1f 	bl	8003ed0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d803      	bhi.n	80050a6 <HAL_SPI_Transmit+0x20c>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d102      	bne.n	80050ac <HAL_SPI_Transmit+0x212>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80050b8:	e029      	b.n	800510e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1c9      	bne.n	8005058 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fbed 	bl	80058a8 <SPI_EndRxTxTransaction>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e003      	b.n	800510e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005116:	7ffb      	ldrb	r3, [r7, #31]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005144:	e0fb      	b.n	800533e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d112      	bne.n	8005176 <HAL_SPI_Receive+0x56>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10e      	bne.n	8005176 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2204      	movs	r2, #4
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f8ef 	bl	8005350 <HAL_SPI_TransmitReceive>
 8005172:	4603      	mov	r3, r0
 8005174:	e0e8      	b.n	8005348 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_SPI_Receive+0x64>
 8005180:	2302      	movs	r3, #2
 8005182:	e0e1      	b.n	8005348 <HAL_SPI_Receive+0x228>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800518c:	f7fe fea0 	bl	8003ed0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_Receive+0x7e>
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051a2:	e0cc      	b.n	800533e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2204      	movs	r2, #4
 80051a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88fa      	ldrh	r2, [r7, #6]
 80051c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ea:	d10f      	bne.n	800520c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800520a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d007      	beq.n	800522a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005228:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d16a      	bne.n	8005308 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005232:	e032      	b.n	800529a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d115      	bne.n	800526e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f103 020c 	add.w	r2, r3, #12
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800526c:	e015      	b.n	800529a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800526e:	f7fe fe2f 	bl	8003ed0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d803      	bhi.n	8005286 <HAL_SPI_Receive+0x166>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d102      	bne.n	800528c <HAL_SPI_Receive+0x16c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005298:	e051      	b.n	800533e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1c7      	bne.n	8005234 <HAL_SPI_Receive+0x114>
 80052a4:	e035      	b.n	8005312 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d113      	bne.n	80052dc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	b292      	uxth	r2, r2
 80052c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052da:	e015      	b.n	8005308 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052dc:	f7fe fdf8 	bl	8003ed0 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d803      	bhi.n	80052f4 <HAL_SPI_Receive+0x1d4>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d102      	bne.n	80052fa <HAL_SPI_Receive+0x1da>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005306:	e01a      	b.n	800533e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1c9      	bne.n	80052a6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fa60 	bl	80057dc <SPI_EndRxTransaction>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
 8005334:	e003      	b.n	800533e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800535e:	2301      	movs	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x26>
 8005372:	2302      	movs	r3, #2
 8005374:	e198      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x358>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537e:	f7fe fda7 	bl	8003ed0 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800539c:	2b01      	cmp	r3, #1
 800539e:	d00f      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x70>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a6:	d107      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x68>
 80053b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d003      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053be:	e16d      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x82>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x82>
 80053cc:	887b      	ldrh	r3, [r7, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053d8:	e160      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d003      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2205      	movs	r2, #5
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	887a      	ldrh	r2, [r7, #2]
 8005404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	887a      	ldrh	r2, [r7, #2]
 8005416:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d007      	beq.n	8005442 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544a:	d17c      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_SPI_TransmitReceive+0x10a>
 8005454:	8b7b      	ldrh	r3, [r7, #26]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d16a      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547e:	e057      	b.n	8005530 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d11b      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x176>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d016      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x176>
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d113      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d119      	bne.n	8005508 <HAL_SPI_TransmitReceive+0x1b8>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	b292      	uxth	r2, r2
 80054ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005504:	2301      	movs	r3, #1
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005508:	f7fe fce2 	bl	8003ed0 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005514:	429a      	cmp	r2, r3
 8005516:	d80b      	bhi.n	8005530 <HAL_SPI_TransmitReceive+0x1e0>
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d007      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800552e:	e0b5      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1a2      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x130>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d19d      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x130>
 8005544:	e080      	b.n	8005648 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x204>
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d16f      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557a:	e05b      	b.n	8005634 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d11c      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x274>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d017      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x274>
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d114      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d119      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x2b6>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d014      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005602:	2301      	movs	r3, #1
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005606:	f7fe fc63 	bl	8003ed0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005612:	429a      	cmp	r2, r3
 8005614:	d803      	bhi.n	800561e <HAL_SPI_TransmitReceive+0x2ce>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d102      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x2d4>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005632:	e033      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d19e      	bne.n	800557c <HAL_SPI_TransmitReceive+0x22c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d199      	bne.n	800557c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f92b 	bl	80058a8 <SPI_EndRxTxTransaction>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d006      	beq.n	8005666 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005664:	e01a      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e003      	b.n	800569c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3730      	adds	r7, #48	; 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056be:	b2db      	uxtb	r3, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056dc:	f7fe fbf8 	bl	8003ed0 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056ec:	f7fe fbf0 	bl	8003ed0 <HAL_GetTick>
 80056f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056f2:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	015b      	lsls	r3, r3, #5
 80056f8:	0d1b      	lsrs	r3, r3, #20
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005702:	e054      	b.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d050      	beq.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800570c:	f7fe fbe0 	bl	8003ed0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	429a      	cmp	r2, r3
 800571a:	d902      	bls.n	8005722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d13d      	bne.n	800579e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800573a:	d111      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005744:	d004      	beq.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	d107      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005768:	d10f      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e017      	b.n	80057ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d19b      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000020 	.word	0x20000020

080057dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f0:	d111      	bne.n	8005816 <SPI_EndRxTransaction+0x3a>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fa:	d004      	beq.n	8005806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d107      	bne.n	8005816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581e:	d12a      	bne.n	8005876 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005828:	d012      	beq.n	8005850 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff ff49 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e026      	b.n	800589e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	2101      	movs	r1, #1
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff ff36 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01a      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e013      	b.n	800589e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	2101      	movs	r1, #1
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff23 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e000      	b.n	800589e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2201      	movs	r2, #1
 80058bc:	2102      	movs	r1, #2
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ff04 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e032      	b.n	8005940 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <SPI_EndRxTxTransaction+0xa0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1b      	ldr	r2, [pc, #108]	; (800594c <SPI_EndRxTxTransaction+0xa4>)
 80058e0:	fba2 2303 	umull	r2, r3, r2, r3
 80058e4:	0d5b      	lsrs	r3, r3, #21
 80058e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f8:	d112      	bne.n	8005920 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fee1 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d016      	beq.n	800593e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e00f      	b.n	8005940 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	3b01      	subs	r3, #1
 800592a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b80      	cmp	r3, #128	; 0x80
 8005938:	d0f2      	beq.n	8005920 <SPI_EndRxTxTransaction+0x78>
 800593a:	e000      	b.n	800593e <SPI_EndRxTxTransaction+0x96>
        break;
 800593c:	bf00      	nop
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000020 	.word	0x20000020
 800594c:	165e9f81 	.word	0x165e9f81

08005950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e041      	b.n	80059e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fd fbdc 	bl	8003134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 fc3a 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e04e      	b.n	8005aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d01d      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <HAL_TIM_Base_Start_IT+0xcc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x80>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIM_Base_Start_IT+0xdc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d111      	bne.n	8005a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d010      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0201 	orr.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	e007      	b.n	8005aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40010000 	.word	0x40010000
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40000c00 	.word	0x40000c00
 8005ac4:	40010400 	.word	0x40010400
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40001800 	.word	0x40001800

08005ad0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e041      	b.n	8005b66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fd faf4 	bl	80030e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fb7a 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e041      	b.n	8005c04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fd fa57 	bl	8003048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 fb2b 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x24>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e022      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d109      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x3e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e015      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d109      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x58>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	bf14      	ite	ne
 8005c5c:	2301      	movne	r3, #1
 8005c5e:	2300      	moveq	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e008      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07c      	b.n	8005d78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0x82>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8c:	e013      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x92>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	e00b      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cac:	e003      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fcfe 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <HAL_TIM_PWM_Start+0x174>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0xcc>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <HAL_TIM_PWM_Start+0x178>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Start+0xd0>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_TIM_PWM_Start+0xd2>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <HAL_TIM_PWM_Start+0x174>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <HAL_TIM_PWM_Start+0x17c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIM_PWM_Start+0x180>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_TIM_PWM_Start+0x184>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIM_PWM_Start+0x178>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_PWM_Start+0x188>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_TIM_PWM_Start+0x18c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d010      	beq.n	8005d76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d64:	e007      	b.n	8005d76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800
 8005d90:	40000c00 	.word	0x40000c00
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40001800 	.word	0x40001800

08005d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0202 	mvn.w	r2, #2
 8005dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9f0 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f9e2 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f9f3 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d020      	beq.n	8005e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01b      	beq.n	8005e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0204 	mvn.w	r2, #4
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9ca 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9bc 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9cd 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d020      	beq.n	8005e98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01b      	beq.n	8005e98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0208 	mvn.w	r2, #8
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f9a4 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f996 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9a7 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d020      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01b      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0210 	mvn.w	r2, #16
 8005eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f97e 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005ed0:	e005      	b.n	8005ede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f970 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f981 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0201 	mvn.w	r2, #1
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fd fb1a 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00c      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fcc8 	bl	80068bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f952 	bl	80061f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0220 	mvn.w	r2, #32
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc9a 	bl	80068a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e048      	b.n	800602c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d839      	bhi.n	800601c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	08006001 	.word	0x08006001
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800600f 	.word	0x0800600f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f9b8 	bl	8006360 <TIM_OC1_SetConfig>
      break;
 8005ff0:	e017      	b.n	8006022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fa21 	bl	8006440 <TIM_OC2_SetConfig>
      break;
 8005ffe:	e010      	b.n	8006022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fa90 	bl	800652c <TIM_OC3_SetConfig>
      break;
 800600c:	e009      	b.n	8006022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fafd 	bl	8006614 <TIM_OC4_SetConfig>
      break;
 800601a:	e002      	b.n	8006022 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800604e:	2302      	movs	r3, #2
 8006050:	e0ae      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	f200 809f 	bhi.w	80061a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	0800609d 	.word	0x0800609d
 800606c:	080061a1 	.word	0x080061a1
 8006070:	080061a1 	.word	0x080061a1
 8006074:	080061a1 	.word	0x080061a1
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080061a1 	.word	0x080061a1
 8006080:	080061a1 	.word	0x080061a1
 8006084:	080061a1 	.word	0x080061a1
 8006088:	0800611f 	.word	0x0800611f
 800608c:	080061a1 	.word	0x080061a1
 8006090:	080061a1 	.word	0x080061a1
 8006094:	080061a1 	.word	0x080061a1
 8006098:	0800615f 	.word	0x0800615f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f95c 	bl	8006360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0204 	bic.w	r2, r2, #4
 80060c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6999      	ldr	r1, [r3, #24]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	619a      	str	r2, [r3, #24]
      break;
 80060da:	e064      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f9ac 	bl	8006440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6999      	ldr	r1, [r3, #24]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	021a      	lsls	r2, r3, #8
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	619a      	str	r2, [r3, #24]
      break;
 800611c:	e043      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fa01 	bl	800652c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0208 	orr.w	r2, r2, #8
 8006138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0204 	bic.w	r2, r2, #4
 8006148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69d9      	ldr	r1, [r3, #28]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	61da      	str	r2, [r3, #28]
      break;
 800615c:	e023      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fa55 	bl	8006614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69d9      	ldr	r1, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	021a      	lsls	r2, r3, #8
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	61da      	str	r2, [r3, #28]
      break;
 800619e:	e002      	b.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	75fb      	strb	r3, [r7, #23]
      break;
 80061a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d00f      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a43      	ldr	r2, [pc, #268]	; (8006338 <TIM_Base_SetConfig+0x130>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a42      	ldr	r2, [pc, #264]	; (800633c <TIM_Base_SetConfig+0x134>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a41      	ldr	r2, [pc, #260]	; (8006340 <TIM_Base_SetConfig+0x138>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a40      	ldr	r2, [pc, #256]	; (8006344 <TIM_Base_SetConfig+0x13c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a35      	ldr	r2, [pc, #212]	; (8006334 <TIM_Base_SetConfig+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d02b      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006268:	d027      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a32      	ldr	r2, [pc, #200]	; (8006338 <TIM_Base_SetConfig+0x130>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d023      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a31      	ldr	r2, [pc, #196]	; (800633c <TIM_Base_SetConfig+0x134>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01f      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a30      	ldr	r2, [pc, #192]	; (8006340 <TIM_Base_SetConfig+0x138>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01b      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <TIM_Base_SetConfig+0x13c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d017      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <TIM_Base_SetConfig+0x140>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2d      	ldr	r2, [pc, #180]	; (800634c <TIM_Base_SetConfig+0x144>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00f      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <TIM_Base_SetConfig+0x148>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <TIM_Base_SetConfig+0x14c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <TIM_Base_SetConfig+0x150>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <TIM_Base_SetConfig+0x154>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <TIM_Base_SetConfig+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_Base_SetConfig+0xf8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a12      	ldr	r2, [pc, #72]	; (8006344 <TIM_Base_SetConfig+0x13c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d103      	bne.n	8006308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	d105      	bne.n	8006326 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]
  }
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40010000 	.word	0x40010000
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40010400 	.word	0x40010400
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800
 8006354:	40001800 	.word	0x40001800
 8006358:	40001c00 	.word	0x40001c00
 800635c:	40002000 	.word	0x40002000

08006360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0201 	bic.w	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 0302 	bic.w	r3, r3, #2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a20      	ldr	r2, [pc, #128]	; (8006438 <TIM_OC1_SetConfig+0xd8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC1_SetConfig+0x64>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <TIM_OC1_SetConfig+0xdc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10c      	bne.n	80063de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0308 	bic.w	r3, r3, #8
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <TIM_OC1_SetConfig+0xd8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_OC1_SetConfig+0x8e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <TIM_OC1_SetConfig+0xdc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d111      	bne.n	8006412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f023 0210 	bic.w	r2, r3, #16
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0320 	bic.w	r3, r3, #32
 800648a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a22      	ldr	r2, [pc, #136]	; (8006524 <TIM_OC2_SetConfig+0xe4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0x68>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <TIM_OC2_SetConfig+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10d      	bne.n	80064c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <TIM_OC2_SetConfig+0xe4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC2_SetConfig+0x94>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a16      	ldr	r2, [pc, #88]	; (8006528 <TIM_OC2_SetConfig+0xe8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d113      	bne.n	80064fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40010400 	.word	0x40010400

0800652c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a21      	ldr	r2, [pc, #132]	; (800660c <TIM_OC3_SetConfig+0xe0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC3_SetConfig+0x66>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a20      	ldr	r2, [pc, #128]	; (8006610 <TIM_OC3_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10d      	bne.n	80065ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <TIM_OC3_SetConfig+0xe0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC3_SetConfig+0x92>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <TIM_OC3_SetConfig+0xe4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d113      	bne.n	80065e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	031b      	lsls	r3, r3, #12
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <TIM_OC4_SetConfig+0xa4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC4_SetConfig+0x68>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a11      	ldr	r2, [pc, #68]	; (80066bc <TIM_OC4_SetConfig+0xa8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	019b      	lsls	r3, r3, #6
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40010400 	.word	0x40010400

080066c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2201      	movs	r2, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e05a      	b.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d022      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d01d      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d018      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00e      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10c      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40001800 	.word	0x40001800

08006804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800681c:	2302      	movs	r3, #2
 800681e:	e03d      	b.n	800689c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b08b      	sub	sp, #44	; 0x2c
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	fa93 f3a3 	rbit	r3, r3
 80068ea:	613b      	str	r3, [r7, #16]
  return result;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80068f6:	2320      	movs	r3, #32
 80068f8:	e003      	b.n	8006902 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	fab3 f383 	clz	r3, r3
 8006900:	b2db      	uxtb	r3, r3
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	2103      	movs	r1, #3
 8006906:	fa01 f303 	lsl.w	r3, r1, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	401a      	ands	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	fa93 f3a3 	rbit	r3, r3
 8006918:	61fb      	str	r3, [r7, #28]
  return result;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006924:	2320      	movs	r3, #32
 8006926:	e003      	b.n	8006930 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	fab3 f383 	clz	r3, r3
 800692e:	b2db      	uxtb	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	431a      	orrs	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	601a      	str	r2, [r3, #0]
}
 800693e:	bf00      	nop
 8006940:	372c      	adds	r7, #44	; 0x2c
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	431a      	orrs	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800697a:	b480      	push	{r7}
 800697c:	b08b      	sub	sp, #44	; 0x2c
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	fa93 f3a3 	rbit	r3, r3
 8006994:	613b      	str	r3, [r7, #16]
  return result;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80069a0:	2320      	movs	r3, #32
 80069a2:	e003      	b.n	80069ac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	fab3 f383 	clz	r3, r3
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	2103      	movs	r1, #3
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	fa93 f3a3 	rbit	r3, r3
 80069c2:	61fb      	str	r3, [r7, #28]
  return result;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80069ce:	2320      	movs	r3, #32
 80069d0:	e003      	b.n	80069da <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80069e8:	bf00      	nop
 80069ea:	372c      	adds	r7, #44	; 0x2c
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08b      	sub	sp, #44	; 0x2c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	613b      	str	r3, [r7, #16]
  return result;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006a1a:	2320      	movs	r3, #32
 8006a1c:	e003      	b.n	8006a26 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	fab3 f383 	clz	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	2103      	movs	r1, #3
 8006a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	401a      	ands	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	fa93 f3a3 	rbit	r3, r3
 8006a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006a48:	2320      	movs	r3, #32
 8006a4a:	e003      	b.n	8006a54 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	fab3 f383 	clz	r3, r3
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	60da      	str	r2, [r3, #12]
}
 8006a62:	bf00      	nop
 8006a64:	372c      	adds	r7, #44	; 0x2c
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b08b      	sub	sp, #44	; 0x2c
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	fa93 f3a3 	rbit	r3, r3
 8006a88:	613b      	str	r3, [r7, #16]
  return result;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006a94:	2320      	movs	r3, #32
 8006a96:	e003      	b.n	8006aa0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	fab3 f383 	clz	r3, r3
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	210f      	movs	r1, #15
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	401a      	ands	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006ac2:	2320      	movs	r3, #32
 8006ac4:	e003      	b.n	8006ace <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	fab3 f383 	clz	r3, r3
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006adc:	bf00      	nop
 8006ade:	372c      	adds	r7, #44	; 0x2c
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b08b      	sub	sp, #44	; 0x2c
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	fa93 f3a3 	rbit	r3, r3
 8006b04:	613b      	str	r3, [r7, #16]
  return result;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006b10:	2320      	movs	r3, #32
 8006b12:	e003      	b.n	8006b1c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	fab3 f383 	clz	r3, r3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	210f      	movs	r1, #15
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	fa93 f3a3 	rbit	r3, r3
 8006b34:	61fb      	str	r3, [r7, #28]
  return result;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006b40:	2320      	movs	r3, #32
 8006b42:	e003      	b.n	8006b4c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	fab3 f383 	clz	r3, r3
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006b5a:	bf00      	nop
 8006b5c:	372c      	adds	r7, #44	; 0x2c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b08a      	sub	sp, #40	; 0x28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	fa93 f3a3 	rbit	r3, r3
 8006b84:	617b      	str	r3, [r7, #20]
  return result;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <LL_GPIO_Init+0x2e>
    return 32U;
 8006b90:	2320      	movs	r3, #32
 8006b92:	e003      	b.n	8006b9c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	fab3 f383 	clz	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006b9e:	e057      	b.n	8006c50 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	4013      	ands	r3, r2
 8006bae:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d049      	beq.n	8006c4a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d003      	beq.n	8006bc6 <LL_GPIO_Init+0x60>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d10d      	bne.n	8006be2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6a39      	ldr	r1, [r7, #32]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff fed3 	bl	800697a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6a39      	ldr	r1, [r7, #32]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff feb4 	bl	800694a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	461a      	mov	r2, r3
 8006be8:	6a39      	ldr	r1, [r7, #32]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff ff02 	bl	80069f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d121      	bne.n	8006c3c <LL_GPIO_Init+0xd6>
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	fa93 f3a3 	rbit	r3, r3
 8006c02:	60bb      	str	r3, [r7, #8]
  return result;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <LL_GPIO_Init+0xac>
    return 32U;
 8006c0e:	2320      	movs	r3, #32
 8006c10:	e003      	b.n	8006c1a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	fab3 f383 	clz	r3, r3
 8006c18:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006c1a:	2b07      	cmp	r3, #7
 8006c1c:	d807      	bhi.n	8006c2e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6a39      	ldr	r1, [r7, #32]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff ff21 	bl	8006a6e <LL_GPIO_SetAFPin_0_7>
 8006c2c:	e006      	b.n	8006c3c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6a39      	ldr	r1, [r7, #32]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff ff56 	bl	8006ae8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a39      	ldr	r1, [r7, #32]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff fe43 	bl	80068d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a0      	bne.n	8006ba0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <LL_RCC_GetSysClkSource+0x18>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 030c 	and.w	r3, r3, #12
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800

08006c84 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <LL_RCC_GetAHBPrescaler+0x18>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40023800 	.word	0x40023800

08006ca0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40023800 	.word	0x40023800

08006cbc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <LL_RCC_PLL_GetMainSource+0x18>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800

08006cf4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <LL_RCC_PLL_GetN+0x18>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40023800 	.word	0x40023800

08006d10 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006d14:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <LL_RCC_PLL_GetP+0x18>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800

08006d2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d30:	4b04      	ldr	r3, [pc, #16]	; (8006d44 <LL_RCC_PLL_GetDivider+0x18>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800

08006d48 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006d50:	f000 f820 	bl	8006d94 <RCC_GetSystemClockFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f840 	bl	8006de4 <RCC_GetHCLKClockFreq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f84e 	bl	8006e10 <RCC_GetPCLK1ClockFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f85a 	bl	8006e38 <RCC_GetPCLK2ClockFreq>
 8006d84:	4602      	mov	r2, r0
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006d9e:	f7ff ff63 	bl	8006c68 <LL_RCC_GetSysClkSource>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d00c      	beq.n	8006dc2 <RCC_GetSystemClockFreq+0x2e>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d80f      	bhi.n	8006dcc <RCC_GetSystemClockFreq+0x38>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <RCC_GetSystemClockFreq+0x22>
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d003      	beq.n	8006dbc <RCC_GetSystemClockFreq+0x28>
 8006db4:	e00a      	b.n	8006dcc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <RCC_GetSystemClockFreq+0x48>)
 8006db8:	607b      	str	r3, [r7, #4]
      break;
 8006dba:	e00a      	b.n	8006dd2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006dbc:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <RCC_GetSystemClockFreq+0x4c>)
 8006dbe:	607b      	str	r3, [r7, #4]
      break;
 8006dc0:	e007      	b.n	8006dd2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006dc2:	2008      	movs	r0, #8
 8006dc4:	f000 f84c 	bl	8006e60 <RCC_PLL_GetFreqDomain_SYS>
 8006dc8:	6078      	str	r0, [r7, #4]
      break;
 8006dca:	e002      	b.n	8006dd2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <RCC_GetSystemClockFreq+0x48>)
 8006dce:	607b      	str	r3, [r7, #4]
      break;
 8006dd0:	bf00      	nop
  }

  return frequency;
 8006dd2:	687b      	ldr	r3, [r7, #4]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	00f42400 	.word	0x00f42400
 8006de0:	007a1200 	.word	0x007a1200

08006de4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006dec:	f7ff ff4a 	bl	8006c84 <LL_RCC_GetAHBPrescaler>
 8006df0:	4603      	mov	r3, r0
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <RCC_GetHCLKClockFreq+0x28>)
 8006dfa:	5cd3      	ldrb	r3, [r2, r3]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	40d3      	lsrs	r3, r2
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0800dc30 	.word	0x0800dc30

08006e10 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006e18:	f7ff ff42 	bl	8006ca0 <LL_RCC_GetAPB1Prescaler>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	0a9b      	lsrs	r3, r3, #10
 8006e20:	4a04      	ldr	r2, [pc, #16]	; (8006e34 <RCC_GetPCLK1ClockFreq+0x24>)
 8006e22:	5cd3      	ldrb	r3, [r2, r3]
 8006e24:	461a      	mov	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	40d3      	lsrs	r3, r2
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	0800dc40 	.word	0x0800dc40

08006e38 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006e40:	f7ff ff3c 	bl	8006cbc <LL_RCC_GetAPB2Prescaler>
 8006e44:	4603      	mov	r3, r0
 8006e46:	0b5b      	lsrs	r3, r3, #13
 8006e48:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <RCC_GetPCLK2ClockFreq+0x24>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	40d3      	lsrs	r3, r2
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	0800dc40 	.word	0x0800dc40

08006e60 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006e74:	f7ff ff30 	bl	8006cd8 <LL_RCC_PLL_GetMainSource>
 8006e78:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e86:	d003      	beq.n	8006e90 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006e88:	e005      	b.n	8006e96 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006e8c:	617b      	str	r3, [r7, #20]
      break;
 8006e8e:	e005      	b.n	8006e9c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006e90:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006e92:	617b      	str	r3, [r7, #20]
      break;
 8006e94:	e002      	b.n	8006e9c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006e98:	617b      	str	r3, [r7, #20]
      break;
 8006e9a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d113      	bne.n	8006eca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006ea2:	f7ff ff43 	bl	8006d2c <LL_RCC_PLL_GetDivider>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	fbb3 f4f2 	udiv	r4, r3, r2
 8006eae:	f7ff ff21 	bl	8006cf4 <LL_RCC_PLL_GetN>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	fb03 f404 	mul.w	r4, r3, r4
 8006eb8:	f7ff ff2a 	bl	8006d10 <LL_RCC_PLL_GetP>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ec8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006eca:	693b      	ldr	r3, [r7, #16]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd90      	pop	{r4, r7, pc}
 8006ed4:	00f42400 	.word	0x00f42400
 8006ed8:	007a1200 	.word	0x007a1200

08006edc <LL_USART_IsEnabled>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <LL_USART_SetStopBitsLength>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	611a      	str	r2, [r3, #16]
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <LL_USART_SetHWFlowCtrl>:
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	615a      	str	r2, [r3, #20]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <LL_USART_SetBaudRate>:
{
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b0c0      	sub	sp, #256	; 0x100
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f5c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8006f60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f70:	f040 810c 	bne.w	800718c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006f74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	1891      	adds	r1, r2, r2
 8006f8c:	6639      	str	r1, [r7, #96]	; 0x60
 8006f8e:	415b      	adcs	r3, r3
 8006f90:	667b      	str	r3, [r7, #100]	; 0x64
 8006f92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006f96:	4621      	mov	r1, r4
 8006f98:	eb12 0801 	adds.w	r8, r2, r1
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	eb43 0901 	adc.w	r9, r3, r1
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fb6:	4690      	mov	r8, r2
 8006fb8:	4699      	mov	r9, r3
 8006fba:	4623      	mov	r3, r4
 8006fbc:	eb18 0303 	adds.w	r3, r8, r3
 8006fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	eb49 0303 	adc.w	r3, r9, r3
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	469a      	mov	sl, r3
 8006fd6:	4693      	mov	fp, r2
 8006fd8:	eb1a 030a 	adds.w	r3, sl, sl
 8006fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fde:	eb4b 030b 	adc.w	r3, fp, fp
 8006fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fec:	f7f9 fe4c 	bl	8000c88 <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4b64      	ldr	r3, [pc, #400]	; (8007188 <LL_USART_SetBaudRate+0x238>)
 8006ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	b29c      	uxth	r4, r3
 8007002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800700c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007010:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	6539      	str	r1, [r7, #80]	; 0x50
 800701c:	415b      	adcs	r3, r3
 800701e:	657b      	str	r3, [r7, #84]	; 0x54
 8007020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007024:	4641      	mov	r1, r8
 8007026:	1851      	adds	r1, r2, r1
 8007028:	64b9      	str	r1, [r7, #72]	; 0x48
 800702a:	4649      	mov	r1, r9
 800702c:	414b      	adcs	r3, r1
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800703c:	4659      	mov	r1, fp
 800703e:	00cb      	lsls	r3, r1, #3
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007046:	4651      	mov	r1, sl
 8007048:	00ca      	lsls	r2, r1, #3
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	4603      	mov	r3, r0
 8007050:	4642      	mov	r2, r8
 8007052:	189b      	adds	r3, r3, r2
 8007054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007058:	464b      	mov	r3, r9
 800705a:	460a      	mov	r2, r1
 800705c:	eb42 0303 	adc.w	r3, r2, r3
 8007060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007064:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007068:	2200      	movs	r2, #0
 800706a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800706e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8007072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007076:	460b      	mov	r3, r1
 8007078:	18db      	adds	r3, r3, r3
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
 800707c:	4613      	mov	r3, r2
 800707e:	eb42 0303 	adc.w	r3, r2, r3
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
 8007084:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007088:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800708c:	f7f9 fdfc 	bl	8000c88 <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4611      	mov	r1, r2
 8007096:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <LL_USART_SetBaudRate+0x238>)
 8007098:	fba3 2301 	umull	r2, r3, r3, r1
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2264      	movs	r2, #100	; 0x64
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
 80070a4:	1acb      	subs	r3, r1, r3
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070ac:	4b36      	ldr	r3, [pc, #216]	; (8007188 <LL_USART_SetBaudRate+0x238>)
 80070ae:	fba3 2302 	umull	r2, r3, r3, r2
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4423      	add	r3, r4
 80070c2:	b29c      	uxth	r4, r3
 80070c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070d2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80070d6:	4642      	mov	r2, r8
 80070d8:	464b      	mov	r3, r9
 80070da:	1891      	adds	r1, r2, r2
 80070dc:	63b9      	str	r1, [r7, #56]	; 0x38
 80070de:	415b      	adcs	r3, r3
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070e6:	4641      	mov	r1, r8
 80070e8:	1851      	adds	r1, r2, r1
 80070ea:	6339      	str	r1, [r7, #48]	; 0x30
 80070ec:	4649      	mov	r1, r9
 80070ee:	414b      	adcs	r3, r1
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070fe:	4659      	mov	r1, fp
 8007100:	00cb      	lsls	r3, r1, #3
 8007102:	4651      	mov	r1, sl
 8007104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007108:	4651      	mov	r1, sl
 800710a:	00ca      	lsls	r2, r1, #3
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	4603      	mov	r3, r0
 8007112:	4642      	mov	r2, r8
 8007114:	189b      	adds	r3, r3, r2
 8007116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800711a:	464b      	mov	r3, r9
 800711c:	460a      	mov	r2, r1
 800711e:	eb42 0303 	adc.w	r3, r2, r3
 8007122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800712a:	2200      	movs	r2, #0
 800712c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007130:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007134:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007138:	460b      	mov	r3, r1
 800713a:	18db      	adds	r3, r3, r3
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
 800713e:	4613      	mov	r3, r2
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800714a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800714e:	f7f9 fd9b 	bl	8000c88 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <LL_USART_SetBaudRate+0x238>)
 8007158:	fba3 1302 	umull	r1, r3, r3, r2
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	2164      	movs	r1, #100	; 0x64
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	3332      	adds	r3, #50	; 0x32
 800716a:	4a07      	ldr	r2, [pc, #28]	; (8007188 <LL_USART_SetBaudRate+0x238>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	b29b      	uxth	r3, r3
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	b29b      	uxth	r3, r3
 800717a:	4423      	add	r3, r4
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007184:	609a      	str	r2, [r3, #8]
}
 8007186:	e108      	b.n	800739a <LL_USART_SetBaudRate+0x44a>
 8007188:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800718c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007190:	2200      	movs	r2, #0
 8007192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007196:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800719a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800719e:	4642      	mov	r2, r8
 80071a0:	464b      	mov	r3, r9
 80071a2:	1891      	adds	r1, r2, r2
 80071a4:	6239      	str	r1, [r7, #32]
 80071a6:	415b      	adcs	r3, r3
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ae:	4641      	mov	r1, r8
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	4649      	mov	r1, r9
 80071b4:	eb43 0501 	adc.w	r5, r3, r1
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	00eb      	lsls	r3, r5, #3
 80071c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071c6:	00e2      	lsls	r2, r4, #3
 80071c8:	4614      	mov	r4, r2
 80071ca:	461d      	mov	r5, r3
 80071cc:	4643      	mov	r3, r8
 80071ce:	18e3      	adds	r3, r4, r3
 80071d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071d4:	464b      	mov	r3, r9
 80071d6:	eb45 0303 	adc.w	r3, r5, r3
 80071da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80071f8:	4629      	mov	r1, r5
 80071fa:	008b      	lsls	r3, r1, #2
 80071fc:	4621      	mov	r1, r4
 80071fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007202:	4621      	mov	r1, r4
 8007204:	008a      	lsls	r2, r1, #2
 8007206:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800720a:	f7f9 fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4b65      	ldr	r3, [pc, #404]	; (80073a8 <LL_USART_SetBaudRate+0x458>)
 8007214:	fba3 2302 	umull	r2, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	b29b      	uxth	r3, r3
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	b29c      	uxth	r4, r3
 8007220:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800722a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800722e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8007232:	4642      	mov	r2, r8
 8007234:	464b      	mov	r3, r9
 8007236:	1891      	adds	r1, r2, r2
 8007238:	61b9      	str	r1, [r7, #24]
 800723a:	415b      	adcs	r3, r3
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007242:	4641      	mov	r1, r8
 8007244:	1851      	adds	r1, r2, r1
 8007246:	6139      	str	r1, [r7, #16]
 8007248:	4649      	mov	r1, r9
 800724a:	414b      	adcs	r3, r1
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800725a:	4659      	mov	r1, fp
 800725c:	00cb      	lsls	r3, r1, #3
 800725e:	4651      	mov	r1, sl
 8007260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007264:	4651      	mov	r1, sl
 8007266:	00ca      	lsls	r2, r1, #3
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	4603      	mov	r3, r0
 800726e:	4642      	mov	r2, r8
 8007270:	189b      	adds	r3, r3, r2
 8007272:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007276:	464b      	mov	r3, r9
 8007278:	460a      	mov	r2, r1
 800727a:	eb42 0303 	adc.w	r3, r2, r3
 800727e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007286:	2200      	movs	r2, #0
 8007288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800728c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800729c:	4649      	mov	r1, r9
 800729e:	008b      	lsls	r3, r1, #2
 80072a0:	4641      	mov	r1, r8
 80072a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a6:	4641      	mov	r1, r8
 80072a8:	008a      	lsls	r2, r1, #2
 80072aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80072ae:	f7f9 fceb 	bl	8000c88 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	4b3b      	ldr	r3, [pc, #236]	; (80073a8 <LL_USART_SetBaudRate+0x458>)
 80072ba:	fba3 2301 	umull	r2, r3, r3, r1
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2264      	movs	r2, #100	; 0x64
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	1acb      	subs	r3, r1, r3
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	3332      	adds	r3, #50	; 0x32
 80072cc:	4a36      	ldr	r2, [pc, #216]	; (80073a8 <LL_USART_SetBaudRate+0x458>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4423      	add	r3, r4
 80072de:	b29c      	uxth	r4, r3
 80072e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072e4:	2200      	movs	r2, #0
 80072e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80072e8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072ea:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072ee:	4642      	mov	r2, r8
 80072f0:	464b      	mov	r3, r9
 80072f2:	1891      	adds	r1, r2, r2
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	415b      	adcs	r3, r3
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fe:	4641      	mov	r1, r8
 8007300:	1851      	adds	r1, r2, r1
 8007302:	6039      	str	r1, [r7, #0]
 8007304:	4649      	mov	r1, r9
 8007306:	414b      	adcs	r3, r1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007316:	4659      	mov	r1, fp
 8007318:	00cb      	lsls	r3, r1, #3
 800731a:	4651      	mov	r1, sl
 800731c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007320:	4651      	mov	r1, sl
 8007322:	00ca      	lsls	r2, r1, #3
 8007324:	4610      	mov	r0, r2
 8007326:	4619      	mov	r1, r3
 8007328:	4603      	mov	r3, r0
 800732a:	4642      	mov	r2, r8
 800732c:	189b      	adds	r3, r3, r2
 800732e:	673b      	str	r3, [r7, #112]	; 0x70
 8007330:	464b      	mov	r3, r9
 8007332:	460a      	mov	r2, r1
 8007334:	eb42 0303 	adc.w	r3, r2, r3
 8007338:	677b      	str	r3, [r7, #116]	; 0x74
 800733a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800733e:	2200      	movs	r2, #0
 8007340:	66bb      	str	r3, [r7, #104]	; 0x68
 8007342:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8007350:	4649      	mov	r1, r9
 8007352:	008b      	lsls	r3, r1, #2
 8007354:	4641      	mov	r1, r8
 8007356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735a:	4641      	mov	r1, r8
 800735c:	008a      	lsls	r2, r1, #2
 800735e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007362:	f7f9 fc91 	bl	8000c88 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <LL_USART_SetBaudRate+0x458>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	3332      	adds	r3, #50	; 0x32
 800737e:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <LL_USART_SetBaudRate+0x458>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	b29b      	uxth	r3, r3
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	b29b      	uxth	r3, r3
 800738e:	4423      	add	r3, r4
 8007390:	b29b      	uxth	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007398:	609a      	str	r2, [r3, #8]
}
 800739a:	bf00      	nop
 800739c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a6:	bf00      	nop
 80073a8:	51eb851f 	.word	0x51eb851f

080073ac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fd8c 	bl	8006edc <LL_USART_IsEnabled>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d15e      	bne.n	8007488 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80073d2:	f023 030c 	bic.w	r3, r3, #12
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	6851      	ldr	r1, [r2, #4]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	68d2      	ldr	r2, [r2, #12]
 80073de:	4311      	orrs	r1, r2
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	6912      	ldr	r2, [r2, #16]
 80073e4:	4311      	orrs	r1, r2
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6992      	ldr	r2, [r2, #24]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fd83 	bl	8006f04 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fd90 	bl	8006f2a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fc9a 	bl	8006d48 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <LL_USART_Init+0xe8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d102      	bne.n	8007422 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e021      	b.n	8007466 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <LL_USART_Init+0xec>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d102      	bne.n	8007430 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e01a      	b.n	8007466 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1a      	ldr	r2, [pc, #104]	; (800749c <LL_USART_Init+0xf0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d102      	bne.n	800743e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	e013      	b.n	8007466 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <LL_USART_Init+0xf4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d102      	bne.n	800744c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	e00c      	b.n	8007466 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <LL_USART_Init+0xf8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d102      	bne.n	800745a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e005      	b.n	8007466 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a12      	ldr	r2, [pc, #72]	; (80074a8 <LL_USART_Init+0xfc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007474:	2300      	movs	r3, #0
 8007476:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007480:	69b9      	ldr	r1, [r7, #24]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fd64 	bl	8006f50 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007488:	7ffb      	ldrb	r3, [r7, #31]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40011000 	.word	0x40011000
 8007498:	40004400 	.word	0x40004400
 800749c:	40004800 	.word	0x40004800
 80074a0:	40011400 	.word	0x40011400
 80074a4:	40004c00 	.word	0x40004c00
 80074a8:	40005000 	.word	0x40005000

080074ac <__cvt>:
 80074ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	ec55 4b10 	vmov	r4, r5, d0
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	460e      	mov	r6, r1
 80074b8:	4619      	mov	r1, r3
 80074ba:	462b      	mov	r3, r5
 80074bc:	bfbb      	ittet	lt
 80074be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074c2:	461d      	movlt	r5, r3
 80074c4:	2300      	movge	r3, #0
 80074c6:	232d      	movlt	r3, #45	; 0x2d
 80074c8:	700b      	strb	r3, [r1, #0]
 80074ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074d0:	4691      	mov	r9, r2
 80074d2:	f023 0820 	bic.w	r8, r3, #32
 80074d6:	bfbc      	itt	lt
 80074d8:	4622      	movlt	r2, r4
 80074da:	4614      	movlt	r4, r2
 80074dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074e0:	d005      	beq.n	80074ee <__cvt+0x42>
 80074e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074e6:	d100      	bne.n	80074ea <__cvt+0x3e>
 80074e8:	3601      	adds	r6, #1
 80074ea:	2102      	movs	r1, #2
 80074ec:	e000      	b.n	80074f0 <__cvt+0x44>
 80074ee:	2103      	movs	r1, #3
 80074f0:	ab03      	add	r3, sp, #12
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	ab02      	add	r3, sp, #8
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	ec45 4b10 	vmov	d0, r4, r5
 80074fc:	4653      	mov	r3, sl
 80074fe:	4632      	mov	r2, r6
 8007500:	f001 f89e 	bl	8008640 <_dtoa_r>
 8007504:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007508:	4607      	mov	r7, r0
 800750a:	d102      	bne.n	8007512 <__cvt+0x66>
 800750c:	f019 0f01 	tst.w	r9, #1
 8007510:	d022      	beq.n	8007558 <__cvt+0xac>
 8007512:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007516:	eb07 0906 	add.w	r9, r7, r6
 800751a:	d110      	bne.n	800753e <__cvt+0x92>
 800751c:	783b      	ldrb	r3, [r7, #0]
 800751e:	2b30      	cmp	r3, #48	; 0x30
 8007520:	d10a      	bne.n	8007538 <__cvt+0x8c>
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800752e:	b918      	cbnz	r0, 8007538 <__cvt+0x8c>
 8007530:	f1c6 0601 	rsb	r6, r6, #1
 8007534:	f8ca 6000 	str.w	r6, [sl]
 8007538:	f8da 3000 	ldr.w	r3, [sl]
 800753c:	4499      	add	r9, r3
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800754a:	b108      	cbz	r0, 8007550 <__cvt+0xa4>
 800754c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007550:	2230      	movs	r2, #48	; 0x30
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	454b      	cmp	r3, r9
 8007556:	d307      	bcc.n	8007568 <__cvt+0xbc>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800755c:	1bdb      	subs	r3, r3, r7
 800755e:	4638      	mov	r0, r7
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	b004      	add	sp, #16
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	1c59      	adds	r1, r3, #1
 800756a:	9103      	str	r1, [sp, #12]
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e7f0      	b.n	8007552 <__cvt+0xa6>

08007570 <__exponent>:
 8007570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007572:	4603      	mov	r3, r0
 8007574:	2900      	cmp	r1, #0
 8007576:	bfb8      	it	lt
 8007578:	4249      	neglt	r1, r1
 800757a:	f803 2b02 	strb.w	r2, [r3], #2
 800757e:	bfb4      	ite	lt
 8007580:	222d      	movlt	r2, #45	; 0x2d
 8007582:	222b      	movge	r2, #43	; 0x2b
 8007584:	2909      	cmp	r1, #9
 8007586:	7042      	strb	r2, [r0, #1]
 8007588:	dd2a      	ble.n	80075e0 <__exponent+0x70>
 800758a:	f10d 0207 	add.w	r2, sp, #7
 800758e:	4617      	mov	r7, r2
 8007590:	260a      	movs	r6, #10
 8007592:	4694      	mov	ip, r2
 8007594:	fb91 f5f6 	sdiv	r5, r1, r6
 8007598:	fb06 1415 	mls	r4, r6, r5, r1
 800759c:	3430      	adds	r4, #48	; 0x30
 800759e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075a2:	460c      	mov	r4, r1
 80075a4:	2c63      	cmp	r4, #99	; 0x63
 80075a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80075aa:	4629      	mov	r1, r5
 80075ac:	dcf1      	bgt.n	8007592 <__exponent+0x22>
 80075ae:	3130      	adds	r1, #48	; 0x30
 80075b0:	f1ac 0402 	sub.w	r4, ip, #2
 80075b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075b8:	1c41      	adds	r1, r0, #1
 80075ba:	4622      	mov	r2, r4
 80075bc:	42ba      	cmp	r2, r7
 80075be:	d30a      	bcc.n	80075d6 <__exponent+0x66>
 80075c0:	f10d 0209 	add.w	r2, sp, #9
 80075c4:	eba2 020c 	sub.w	r2, r2, ip
 80075c8:	42bc      	cmp	r4, r7
 80075ca:	bf88      	it	hi
 80075cc:	2200      	movhi	r2, #0
 80075ce:	4413      	add	r3, r2
 80075d0:	1a18      	subs	r0, r3, r0
 80075d2:	b003      	add	sp, #12
 80075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075de:	e7ed      	b.n	80075bc <__exponent+0x4c>
 80075e0:	2330      	movs	r3, #48	; 0x30
 80075e2:	3130      	adds	r1, #48	; 0x30
 80075e4:	7083      	strb	r3, [r0, #2]
 80075e6:	70c1      	strb	r1, [r0, #3]
 80075e8:	1d03      	adds	r3, r0, #4
 80075ea:	e7f1      	b.n	80075d0 <__exponent+0x60>

080075ec <_printf_float>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	ed2d 8b02 	vpush	{d8}
 80075f4:	b08d      	sub	sp, #52	; 0x34
 80075f6:	460c      	mov	r4, r1
 80075f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075fc:	4616      	mov	r6, r2
 80075fe:	461f      	mov	r7, r3
 8007600:	4605      	mov	r5, r0
 8007602:	f000 ff09 	bl	8008418 <_localeconv_r>
 8007606:	f8d0 a000 	ldr.w	sl, [r0]
 800760a:	4650      	mov	r0, sl
 800760c:	f7f8 fe30 	bl	8000270 <strlen>
 8007610:	2300      	movs	r3, #0
 8007612:	930a      	str	r3, [sp, #40]	; 0x28
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	9305      	str	r3, [sp, #20]
 8007618:	f8d8 3000 	ldr.w	r3, [r8]
 800761c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007620:	3307      	adds	r3, #7
 8007622:	f023 0307 	bic.w	r3, r3, #7
 8007626:	f103 0208 	add.w	r2, r3, #8
 800762a:	f8c8 2000 	str.w	r2, [r8]
 800762e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	f8cd 8018 	str.w	r8, [sp, #24]
 800763c:	ee08 0a10 	vmov	s16, r0
 8007640:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007648:	4b9e      	ldr	r3, [pc, #632]	; (80078c4 <_printf_float+0x2d8>)
 800764a:	f04f 32ff 	mov.w	r2, #4294967295
 800764e:	f7f9 fa6d 	bl	8000b2c <__aeabi_dcmpun>
 8007652:	bb88      	cbnz	r0, 80076b8 <_printf_float+0xcc>
 8007654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007658:	4b9a      	ldr	r3, [pc, #616]	; (80078c4 <_printf_float+0x2d8>)
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	f7f9 fa47 	bl	8000af0 <__aeabi_dcmple>
 8007662:	bb48      	cbnz	r0, 80076b8 <_printf_float+0xcc>
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f9 fa36 	bl	8000adc <__aeabi_dcmplt>
 8007670:	b110      	cbz	r0, 8007678 <_printf_float+0x8c>
 8007672:	232d      	movs	r3, #45	; 0x2d
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007678:	4a93      	ldr	r2, [pc, #588]	; (80078c8 <_printf_float+0x2dc>)
 800767a:	4b94      	ldr	r3, [pc, #592]	; (80078cc <_printf_float+0x2e0>)
 800767c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007680:	bf94      	ite	ls
 8007682:	4690      	movls	r8, r2
 8007684:	4698      	movhi	r8, r3
 8007686:	2303      	movs	r3, #3
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	9b05      	ldr	r3, [sp, #20]
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	9700      	str	r7, [sp, #0]
 8007698:	4633      	mov	r3, r6
 800769a:	aa0b      	add	r2, sp, #44	; 0x2c
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f9da 	bl	8007a58 <_printf_common>
 80076a4:	3001      	adds	r0, #1
 80076a6:	f040 8090 	bne.w	80077ca <_printf_float+0x1de>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	b00d      	add	sp, #52	; 0x34
 80076b0:	ecbd 8b02 	vpop	{d8}
 80076b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b8:	4642      	mov	r2, r8
 80076ba:	464b      	mov	r3, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	4649      	mov	r1, r9
 80076c0:	f7f9 fa34 	bl	8000b2c <__aeabi_dcmpun>
 80076c4:	b140      	cbz	r0, 80076d8 <_printf_float+0xec>
 80076c6:	464b      	mov	r3, r9
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfbc      	itt	lt
 80076cc:	232d      	movlt	r3, #45	; 0x2d
 80076ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076d2:	4a7f      	ldr	r2, [pc, #508]	; (80078d0 <_printf_float+0x2e4>)
 80076d4:	4b7f      	ldr	r3, [pc, #508]	; (80078d4 <_printf_float+0x2e8>)
 80076d6:	e7d1      	b.n	800767c <_printf_float+0x90>
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076de:	9206      	str	r2, [sp, #24]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	d13f      	bne.n	8007764 <_printf_float+0x178>
 80076e4:	2306      	movs	r3, #6
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	6861      	ldr	r1, [r4, #4]
 80076ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076f0:	2300      	movs	r3, #0
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	ab0a      	add	r3, sp, #40	; 0x28
 80076f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076fa:	ab09      	add	r3, sp, #36	; 0x24
 80076fc:	ec49 8b10 	vmov	d0, r8, r9
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	6022      	str	r2, [r4, #0]
 8007704:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007708:	4628      	mov	r0, r5
 800770a:	f7ff fecf 	bl	80074ac <__cvt>
 800770e:	9b06      	ldr	r3, [sp, #24]
 8007710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007712:	2b47      	cmp	r3, #71	; 0x47
 8007714:	4680      	mov	r8, r0
 8007716:	d108      	bne.n	800772a <_printf_float+0x13e>
 8007718:	1cc8      	adds	r0, r1, #3
 800771a:	db02      	blt.n	8007722 <_printf_float+0x136>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	4299      	cmp	r1, r3
 8007720:	dd41      	ble.n	80077a6 <_printf_float+0x1ba>
 8007722:	f1ab 0302 	sub.w	r3, fp, #2
 8007726:	fa5f fb83 	uxtb.w	fp, r3
 800772a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800772e:	d820      	bhi.n	8007772 <_printf_float+0x186>
 8007730:	3901      	subs	r1, #1
 8007732:	465a      	mov	r2, fp
 8007734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007738:	9109      	str	r1, [sp, #36]	; 0x24
 800773a:	f7ff ff19 	bl	8007570 <__exponent>
 800773e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007740:	1813      	adds	r3, r2, r0
 8007742:	2a01      	cmp	r2, #1
 8007744:	4681      	mov	r9, r0
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	dc02      	bgt.n	8007750 <_printf_float+0x164>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	07d2      	lsls	r2, r2, #31
 800774e:	d501      	bpl.n	8007754 <_printf_float+0x168>
 8007750:	3301      	adds	r3, #1
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007758:	2b00      	cmp	r3, #0
 800775a:	d09c      	beq.n	8007696 <_printf_float+0xaa>
 800775c:	232d      	movs	r3, #45	; 0x2d
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007762:	e798      	b.n	8007696 <_printf_float+0xaa>
 8007764:	9a06      	ldr	r2, [sp, #24]
 8007766:	2a47      	cmp	r2, #71	; 0x47
 8007768:	d1be      	bne.n	80076e8 <_printf_float+0xfc>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1bc      	bne.n	80076e8 <_printf_float+0xfc>
 800776e:	2301      	movs	r3, #1
 8007770:	e7b9      	b.n	80076e6 <_printf_float+0xfa>
 8007772:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007776:	d118      	bne.n	80077aa <_printf_float+0x1be>
 8007778:	2900      	cmp	r1, #0
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	dd0b      	ble.n	8007796 <_printf_float+0x1aa>
 800777e:	6121      	str	r1, [r4, #16]
 8007780:	b913      	cbnz	r3, 8007788 <_printf_float+0x19c>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	07d0      	lsls	r0, r2, #31
 8007786:	d502      	bpl.n	800778e <_printf_float+0x1a2>
 8007788:	3301      	adds	r3, #1
 800778a:	440b      	add	r3, r1
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	e7de      	b.n	8007754 <_printf_float+0x168>
 8007796:	b913      	cbnz	r3, 800779e <_printf_float+0x1b2>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	07d2      	lsls	r2, r2, #31
 800779c:	d501      	bpl.n	80077a2 <_printf_float+0x1b6>
 800779e:	3302      	adds	r3, #2
 80077a0:	e7f4      	b.n	800778c <_printf_float+0x1a0>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e7f2      	b.n	800778c <_printf_float+0x1a0>
 80077a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ac:	4299      	cmp	r1, r3
 80077ae:	db05      	blt.n	80077bc <_printf_float+0x1d0>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	6121      	str	r1, [r4, #16]
 80077b4:	07d8      	lsls	r0, r3, #31
 80077b6:	d5ea      	bpl.n	800778e <_printf_float+0x1a2>
 80077b8:	1c4b      	adds	r3, r1, #1
 80077ba:	e7e7      	b.n	800778c <_printf_float+0x1a0>
 80077bc:	2900      	cmp	r1, #0
 80077be:	bfd4      	ite	le
 80077c0:	f1c1 0202 	rsble	r2, r1, #2
 80077c4:	2201      	movgt	r2, #1
 80077c6:	4413      	add	r3, r2
 80077c8:	e7e0      	b.n	800778c <_printf_float+0x1a0>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	055a      	lsls	r2, r3, #21
 80077ce:	d407      	bmi.n	80077e0 <_printf_float+0x1f4>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	4642      	mov	r2, r8
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	d12c      	bne.n	8007838 <_printf_float+0x24c>
 80077de:	e764      	b.n	80076aa <_printf_float+0xbe>
 80077e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077e4:	f240 80e0 	bls.w	80079a8 <_printf_float+0x3bc>
 80077e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	f7f9 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d034      	beq.n	8007862 <_printf_float+0x276>
 80077f8:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <_printf_float+0x2ec>)
 80077fa:	2301      	movs	r3, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f af51 	beq.w	80076aa <_printf_float+0xbe>
 8007808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800780c:	429a      	cmp	r2, r3
 800780e:	db02      	blt.n	8007816 <_printf_float+0x22a>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07d8      	lsls	r0, r3, #31
 8007814:	d510      	bpl.n	8007838 <_printf_float+0x24c>
 8007816:	ee18 3a10 	vmov	r3, s16
 800781a:	4652      	mov	r2, sl
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f af41 	beq.w	80076aa <_printf_float+0xbe>
 8007828:	f04f 0800 	mov.w	r8, #0
 800782c:	f104 091a 	add.w	r9, r4, #26
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	3b01      	subs	r3, #1
 8007834:	4543      	cmp	r3, r8
 8007836:	dc09      	bgt.n	800784c <_printf_float+0x260>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	f100 8107 	bmi.w	8007a4e <_printf_float+0x462>
 8007840:	68e0      	ldr	r0, [r4, #12]
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	4298      	cmp	r0, r3
 8007846:	bfb8      	it	lt
 8007848:	4618      	movlt	r0, r3
 800784a:	e730      	b.n	80076ae <_printf_float+0xc2>
 800784c:	2301      	movs	r3, #1
 800784e:	464a      	mov	r2, r9
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af27 	beq.w	80076aa <_printf_float+0xbe>
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	e7e6      	b.n	8007830 <_printf_float+0x244>
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc39      	bgt.n	80078dc <_printf_float+0x2f0>
 8007868:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <_printf_float+0x2ec>)
 800786a:	2301      	movs	r3, #1
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af19 	beq.w	80076aa <_printf_float+0xbe>
 8007878:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800787c:	4313      	orrs	r3, r2
 800787e:	d102      	bne.n	8007886 <_printf_float+0x29a>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	d5d8      	bpl.n	8007838 <_printf_float+0x24c>
 8007886:	ee18 3a10 	vmov	r3, s16
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af09 	beq.w	80076aa <_printf_float+0xbe>
 8007898:	f04f 0900 	mov.w	r9, #0
 800789c:	f104 0a1a 	add.w	sl, r4, #26
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	425b      	negs	r3, r3
 80078a4:	454b      	cmp	r3, r9
 80078a6:	dc01      	bgt.n	80078ac <_printf_float+0x2c0>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	e792      	b.n	80077d2 <_printf_float+0x1e6>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4652      	mov	r2, sl
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f aef7 	beq.w	80076aa <_printf_float+0xbe>
 80078bc:	f109 0901 	add.w	r9, r9, #1
 80078c0:	e7ee      	b.n	80078a0 <_printf_float+0x2b4>
 80078c2:	bf00      	nop
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	0800dc48 	.word	0x0800dc48
 80078cc:	0800dc4c 	.word	0x0800dc4c
 80078d0:	0800dc50 	.word	0x0800dc50
 80078d4:	0800dc54 	.word	0x0800dc54
 80078d8:	0800dc58 	.word	0x0800dc58
 80078dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bfa8      	it	ge
 80078e4:	461a      	movge	r2, r3
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	4691      	mov	r9, r2
 80078ea:	dc37      	bgt.n	800795c <_printf_float+0x370>
 80078ec:	f04f 0b00 	mov.w	fp, #0
 80078f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f4:	f104 021a 	add.w	r2, r4, #26
 80078f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	eba3 0309 	sub.w	r3, r3, r9
 8007900:	455b      	cmp	r3, fp
 8007902:	dc33      	bgt.n	800796c <_printf_float+0x380>
 8007904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007908:	429a      	cmp	r2, r3
 800790a:	db3b      	blt.n	8007984 <_printf_float+0x398>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d438      	bmi.n	8007984 <_printf_float+0x398>
 8007912:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007916:	eba2 0903 	sub.w	r9, r2, r3
 800791a:	9b05      	ldr	r3, [sp, #20]
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	4591      	cmp	r9, r2
 8007920:	bfa8      	it	ge
 8007922:	4691      	movge	r9, r2
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	dc35      	bgt.n	8007996 <_printf_float+0x3aa>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007932:	f104 0a1a 	add.w	sl, r4, #26
 8007936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	4543      	cmp	r3, r8
 8007942:	f77f af79 	ble.w	8007838 <_printf_float+0x24c>
 8007946:	2301      	movs	r3, #1
 8007948:	4652      	mov	r2, sl
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f aeaa 	beq.w	80076aa <_printf_float+0xbe>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	e7ec      	b.n	8007936 <_printf_float+0x34a>
 800795c:	4613      	mov	r3, r2
 800795e:	4631      	mov	r1, r6
 8007960:	4642      	mov	r2, r8
 8007962:	4628      	mov	r0, r5
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	d1c0      	bne.n	80078ec <_printf_float+0x300>
 800796a:	e69e      	b.n	80076aa <_printf_float+0xbe>
 800796c:	2301      	movs	r3, #1
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	9205      	str	r2, [sp, #20]
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f ae97 	beq.w	80076aa <_printf_float+0xbe>
 800797c:	9a05      	ldr	r2, [sp, #20]
 800797e:	f10b 0b01 	add.w	fp, fp, #1
 8007982:	e7b9      	b.n	80078f8 <_printf_float+0x30c>
 8007984:	ee18 3a10 	vmov	r3, s16
 8007988:	4652      	mov	r2, sl
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	d1be      	bne.n	8007912 <_printf_float+0x326>
 8007994:	e689      	b.n	80076aa <_printf_float+0xbe>
 8007996:	9a05      	ldr	r2, [sp, #20]
 8007998:	464b      	mov	r3, r9
 800799a:	4442      	add	r2, r8
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	d1c1      	bne.n	800792a <_printf_float+0x33e>
 80079a6:	e680      	b.n	80076aa <_printf_float+0xbe>
 80079a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079aa:	2a01      	cmp	r2, #1
 80079ac:	dc01      	bgt.n	80079b2 <_printf_float+0x3c6>
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d53a      	bpl.n	8007a28 <_printf_float+0x43c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae74 	beq.w	80076aa <_printf_float+0xbe>
 80079c2:	ee18 3a10 	vmov	r3, s16
 80079c6:	4652      	mov	r2, sl
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f ae6b 	beq.w	80076aa <_printf_float+0xbe>
 80079d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079e0:	f7f9 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e4:	b9d8      	cbnz	r0, 8007a1e <_printf_float+0x432>
 80079e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079ea:	f108 0201 	add.w	r2, r8, #1
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	d10e      	bne.n	8007a16 <_printf_float+0x42a>
 80079f8:	e657      	b.n	80076aa <_printf_float+0xbe>
 80079fa:	2301      	movs	r3, #1
 80079fc:	4652      	mov	r2, sl
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f ae50 	beq.w	80076aa <_printf_float+0xbe>
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4543      	cmp	r3, r8
 8007a14:	dcf1      	bgt.n	80079fa <_printf_float+0x40e>
 8007a16:	464b      	mov	r3, r9
 8007a18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a1c:	e6da      	b.n	80077d4 <_printf_float+0x1e8>
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	f104 0a1a 	add.w	sl, r4, #26
 8007a26:	e7f2      	b.n	8007a0e <_printf_float+0x422>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	e7df      	b.n	80079ee <_printf_float+0x402>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	464a      	mov	r2, r9
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f43f ae36 	beq.w	80076aa <_printf_float+0xbe>
 8007a3e:	f108 0801 	add.w	r8, r8, #1
 8007a42:	68e3      	ldr	r3, [r4, #12]
 8007a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a46:	1a5b      	subs	r3, r3, r1
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	dcf0      	bgt.n	8007a2e <_printf_float+0x442>
 8007a4c:	e6f8      	b.n	8007840 <_printf_float+0x254>
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	f104 0919 	add.w	r9, r4, #25
 8007a56:	e7f4      	b.n	8007a42 <_printf_float+0x456>

08007a58 <_printf_common>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	4699      	mov	r9, r3
 8007a60:	688a      	ldr	r2, [r1, #8]
 8007a62:	690b      	ldr	r3, [r1, #16]
 8007a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	bfb8      	it	lt
 8007a6c:	4613      	movlt	r3, r2
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a74:	4607      	mov	r7, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	b10a      	cbz	r2, 8007a7e <_printf_common+0x26>
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	0699      	lsls	r1, r3, #26
 8007a82:	bf42      	ittt	mi
 8007a84:	6833      	ldrmi	r3, [r6, #0]
 8007a86:	3302      	addmi	r3, #2
 8007a88:	6033      	strmi	r3, [r6, #0]
 8007a8a:	6825      	ldr	r5, [r4, #0]
 8007a8c:	f015 0506 	ands.w	r5, r5, #6
 8007a90:	d106      	bne.n	8007aa0 <_printf_common+0x48>
 8007a92:	f104 0a19 	add.w	sl, r4, #25
 8007a96:	68e3      	ldr	r3, [r4, #12]
 8007a98:	6832      	ldr	r2, [r6, #0]
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	dc26      	bgt.n	8007aee <_printf_common+0x96>
 8007aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa4:	1e13      	subs	r3, r2, #0
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	0692      	lsls	r2, r2, #26
 8007aae:	d42b      	bmi.n	8007b08 <_printf_common+0xb0>
 8007ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d01e      	beq.n	8007afc <_printf_common+0xa4>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	6922      	ldr	r2, [r4, #16]
 8007ac2:	f003 0306 	and.w	r3, r3, #6
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	bf02      	ittt	eq
 8007aca:	68e5      	ldreq	r5, [r4, #12]
 8007acc:	6833      	ldreq	r3, [r6, #0]
 8007ace:	1aed      	subeq	r5, r5, r3
 8007ad0:	68a3      	ldr	r3, [r4, #8]
 8007ad2:	bf0c      	ite	eq
 8007ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad8:	2500      	movne	r5, #0
 8007ada:	4293      	cmp	r3, r2
 8007adc:	bfc4      	itt	gt
 8007ade:	1a9b      	subgt	r3, r3, r2
 8007ae0:	18ed      	addgt	r5, r5, r3
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	341a      	adds	r4, #26
 8007ae6:	42b5      	cmp	r5, r6
 8007ae8:	d11a      	bne.n	8007b20 <_printf_common+0xc8>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e008      	b.n	8007b00 <_printf_common+0xa8>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4652      	mov	r2, sl
 8007af2:	4649      	mov	r1, r9
 8007af4:	4638      	mov	r0, r7
 8007af6:	47c0      	blx	r8
 8007af8:	3001      	adds	r0, #1
 8007afa:	d103      	bne.n	8007b04 <_printf_common+0xac>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	3501      	adds	r5, #1
 8007b06:	e7c6      	b.n	8007a96 <_printf_common+0x3e>
 8007b08:	18e1      	adds	r1, r4, r3
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	2030      	movs	r0, #48	; 0x30
 8007b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b12:	4422      	add	r2, r4
 8007b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	e7c7      	b.n	8007ab0 <_printf_common+0x58>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4622      	mov	r2, r4
 8007b24:	4649      	mov	r1, r9
 8007b26:	4638      	mov	r0, r7
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d0e6      	beq.n	8007afc <_printf_common+0xa4>
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7d9      	b.n	8007ae6 <_printf_common+0x8e>
	...

08007b34 <_printf_i>:
 8007b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	7e0f      	ldrb	r7, [r1, #24]
 8007b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b3c:	2f78      	cmp	r7, #120	; 0x78
 8007b3e:	4691      	mov	r9, r2
 8007b40:	4680      	mov	r8, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	469a      	mov	sl, r3
 8007b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b4a:	d807      	bhi.n	8007b5c <_printf_i+0x28>
 8007b4c:	2f62      	cmp	r7, #98	; 0x62
 8007b4e:	d80a      	bhi.n	8007b66 <_printf_i+0x32>
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	f000 80d4 	beq.w	8007cfe <_printf_i+0x1ca>
 8007b56:	2f58      	cmp	r7, #88	; 0x58
 8007b58:	f000 80c0 	beq.w	8007cdc <_printf_i+0x1a8>
 8007b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b64:	e03a      	b.n	8007bdc <_printf_i+0xa8>
 8007b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b6a:	2b15      	cmp	r3, #21
 8007b6c:	d8f6      	bhi.n	8007b5c <_printf_i+0x28>
 8007b6e:	a101      	add	r1, pc, #4	; (adr r1, 8007b74 <_printf_i+0x40>)
 8007b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007be1 	.word	0x08007be1
 8007b7c:	08007b5d 	.word	0x08007b5d
 8007b80:	08007b5d 	.word	0x08007b5d
 8007b84:	08007b5d 	.word	0x08007b5d
 8007b88:	08007b5d 	.word	0x08007b5d
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007b5d 	.word	0x08007b5d
 8007b94:	08007b5d 	.word	0x08007b5d
 8007b98:	08007b5d 	.word	0x08007b5d
 8007b9c:	08007b5d 	.word	0x08007b5d
 8007ba0:	08007ce5 	.word	0x08007ce5
 8007ba4:	08007c0d 	.word	0x08007c0d
 8007ba8:	08007c9f 	.word	0x08007c9f
 8007bac:	08007b5d 	.word	0x08007b5d
 8007bb0:	08007b5d 	.word	0x08007b5d
 8007bb4:	08007d07 	.word	0x08007d07
 8007bb8:	08007b5d 	.word	0x08007b5d
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007b5d 	.word	0x08007b5d
 8007bc4:	08007b5d 	.word	0x08007b5d
 8007bc8:	08007ca7 	.word	0x08007ca7
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	602a      	str	r2, [r5, #0]
 8007bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e09f      	b.n	8007d20 <_printf_i+0x1ec>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	0607      	lsls	r7, r0, #24
 8007be6:	f103 0104 	add.w	r1, r3, #4
 8007bea:	6029      	str	r1, [r5, #0]
 8007bec:	d501      	bpl.n	8007bf2 <_printf_i+0xbe>
 8007bee:	681e      	ldr	r6, [r3, #0]
 8007bf0:	e003      	b.n	8007bfa <_printf_i+0xc6>
 8007bf2:	0646      	lsls	r6, r0, #25
 8007bf4:	d5fb      	bpl.n	8007bee <_printf_i+0xba>
 8007bf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	da03      	bge.n	8007c06 <_printf_i+0xd2>
 8007bfe:	232d      	movs	r3, #45	; 0x2d
 8007c00:	4276      	negs	r6, r6
 8007c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c06:	485a      	ldr	r0, [pc, #360]	; (8007d70 <_printf_i+0x23c>)
 8007c08:	230a      	movs	r3, #10
 8007c0a:	e012      	b.n	8007c32 <_printf_i+0xfe>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	1d19      	adds	r1, r3, #4
 8007c12:	6029      	str	r1, [r5, #0]
 8007c14:	0605      	lsls	r5, r0, #24
 8007c16:	d501      	bpl.n	8007c1c <_printf_i+0xe8>
 8007c18:	681e      	ldr	r6, [r3, #0]
 8007c1a:	e002      	b.n	8007c22 <_printf_i+0xee>
 8007c1c:	0641      	lsls	r1, r0, #25
 8007c1e:	d5fb      	bpl.n	8007c18 <_printf_i+0xe4>
 8007c20:	881e      	ldrh	r6, [r3, #0]
 8007c22:	4853      	ldr	r0, [pc, #332]	; (8007d70 <_printf_i+0x23c>)
 8007c24:	2f6f      	cmp	r7, #111	; 0x6f
 8007c26:	bf0c      	ite	eq
 8007c28:	2308      	moveq	r3, #8
 8007c2a:	230a      	movne	r3, #10
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c32:	6865      	ldr	r5, [r4, #4]
 8007c34:	60a5      	str	r5, [r4, #8]
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	bfa2      	ittt	ge
 8007c3a:	6821      	ldrge	r1, [r4, #0]
 8007c3c:	f021 0104 	bicge.w	r1, r1, #4
 8007c40:	6021      	strge	r1, [r4, #0]
 8007c42:	b90e      	cbnz	r6, 8007c48 <_printf_i+0x114>
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	d04b      	beq.n	8007ce0 <_printf_i+0x1ac>
 8007c48:	4615      	mov	r5, r2
 8007c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c52:	5dc7      	ldrb	r7, [r0, r7]
 8007c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c58:	4637      	mov	r7, r6
 8007c5a:	42bb      	cmp	r3, r7
 8007c5c:	460e      	mov	r6, r1
 8007c5e:	d9f4      	bls.n	8007c4a <_printf_i+0x116>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d10b      	bne.n	8007c7c <_printf_i+0x148>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	07de      	lsls	r6, r3, #31
 8007c68:	d508      	bpl.n	8007c7c <_printf_i+0x148>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	bfde      	ittt	le
 8007c72:	2330      	movle	r3, #48	; 0x30
 8007c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c7c:	1b52      	subs	r2, r2, r5
 8007c7e:	6122      	str	r2, [r4, #16]
 8007c80:	f8cd a000 	str.w	sl, [sp]
 8007c84:	464b      	mov	r3, r9
 8007c86:	aa03      	add	r2, sp, #12
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7ff fee4 	bl	8007a58 <_printf_common>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d14a      	bne.n	8007d2a <_printf_i+0x1f6>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	b004      	add	sp, #16
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f043 0320 	orr.w	r3, r3, #32
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	4833      	ldr	r0, [pc, #204]	; (8007d74 <_printf_i+0x240>)
 8007ca8:	2778      	movs	r7, #120	; 0x78
 8007caa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	061f      	lsls	r7, r3, #24
 8007cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cb8:	d402      	bmi.n	8007cc0 <_printf_i+0x18c>
 8007cba:	065f      	lsls	r7, r3, #25
 8007cbc:	bf48      	it	mi
 8007cbe:	b2b6      	uxthmi	r6, r6
 8007cc0:	07df      	lsls	r7, r3, #31
 8007cc2:	bf48      	it	mi
 8007cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007cc8:	6029      	str	r1, [r5, #0]
 8007cca:	bf48      	it	mi
 8007ccc:	6023      	strmi	r3, [r4, #0]
 8007cce:	b91e      	cbnz	r6, 8007cd8 <_printf_i+0x1a4>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	f023 0320 	bic.w	r3, r3, #32
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	2310      	movs	r3, #16
 8007cda:	e7a7      	b.n	8007c2c <_printf_i+0xf8>
 8007cdc:	4824      	ldr	r0, [pc, #144]	; (8007d70 <_printf_i+0x23c>)
 8007cde:	e7e4      	b.n	8007caa <_printf_i+0x176>
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	e7bd      	b.n	8007c60 <_printf_i+0x12c>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	6826      	ldr	r6, [r4, #0]
 8007ce8:	6961      	ldr	r1, [r4, #20]
 8007cea:	1d18      	adds	r0, r3, #4
 8007cec:	6028      	str	r0, [r5, #0]
 8007cee:	0635      	lsls	r5, r6, #24
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0x1c4>
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0x1ca>
 8007cf8:	0670      	lsls	r0, r6, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0x1c0>
 8007cfc:	8019      	strh	r1, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	4615      	mov	r5, r2
 8007d04:	e7bc      	b.n	8007c80 <_printf_i+0x14c>
 8007d06:	682b      	ldr	r3, [r5, #0]
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	602a      	str	r2, [r5, #0]
 8007d0c:	681d      	ldr	r5, [r3, #0]
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	2100      	movs	r1, #0
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7f8 fa5c 	bl	80001d0 <memchr>
 8007d18:	b108      	cbz	r0, 8007d1e <_printf_i+0x1ea>
 8007d1a:	1b40      	subs	r0, r0, r5
 8007d1c:	6060      	str	r0, [r4, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	2300      	movs	r3, #0
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	e7aa      	b.n	8007c80 <_printf_i+0x14c>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d0ad      	beq.n	8007c94 <_printf_i+0x160>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	079b      	lsls	r3, r3, #30
 8007d3c:	d413      	bmi.n	8007d66 <_printf_i+0x232>
 8007d3e:	68e0      	ldr	r0, [r4, #12]
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	4298      	cmp	r0, r3
 8007d44:	bfb8      	it	lt
 8007d46:	4618      	movlt	r0, r3
 8007d48:	e7a6      	b.n	8007c98 <_printf_i+0x164>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	47d0      	blx	sl
 8007d54:	3001      	adds	r0, #1
 8007d56:	d09d      	beq.n	8007c94 <_printf_i+0x160>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	1a5b      	subs	r3, r3, r1
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dcf2      	bgt.n	8007d4a <_printf_i+0x216>
 8007d64:	e7eb      	b.n	8007d3e <_printf_i+0x20a>
 8007d66:	2500      	movs	r5, #0
 8007d68:	f104 0619 	add.w	r6, r4, #25
 8007d6c:	e7f5      	b.n	8007d5a <_printf_i+0x226>
 8007d6e:	bf00      	nop
 8007d70:	0800dc5a 	.word	0x0800dc5a
 8007d74:	0800dc6b 	.word	0x0800dc6b

08007d78 <_scanf_float>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	4617      	mov	r7, r2
 8007d80:	9303      	str	r3, [sp, #12]
 8007d82:	688b      	ldr	r3, [r1, #8]
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d8a:	bf83      	ittte	hi
 8007d8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d90:	195b      	addhi	r3, r3, r5
 8007d92:	9302      	strhi	r3, [sp, #8]
 8007d94:	2300      	movls	r3, #0
 8007d96:	bf86      	itte	hi
 8007d98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d9c:	608b      	strhi	r3, [r1, #8]
 8007d9e:	9302      	strls	r3, [sp, #8]
 8007da0:	680b      	ldr	r3, [r1, #0]
 8007da2:	468b      	mov	fp, r1
 8007da4:	2500      	movs	r5, #0
 8007da6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007daa:	f84b 3b1c 	str.w	r3, [fp], #28
 8007dae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007db2:	4680      	mov	r8, r0
 8007db4:	460c      	mov	r4, r1
 8007db6:	465e      	mov	r6, fp
 8007db8:	46aa      	mov	sl, r5
 8007dba:	46a9      	mov	r9, r5
 8007dbc:	9501      	str	r5, [sp, #4]
 8007dbe:	68a2      	ldr	r2, [r4, #8]
 8007dc0:	b152      	cbz	r2, 8007dd8 <_scanf_float+0x60>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8007dc8:	d864      	bhi.n	8007e94 <_scanf_float+0x11c>
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	d83c      	bhi.n	8007e48 <_scanf_float+0xd0>
 8007dce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007dd2:	b2c8      	uxtb	r0, r1
 8007dd4:	280e      	cmp	r0, #14
 8007dd6:	d93a      	bls.n	8007e4e <_scanf_float+0xd6>
 8007dd8:	f1b9 0f00 	cmp.w	r9, #0
 8007ddc:	d003      	beq.n	8007de6 <_scanf_float+0x6e>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dea:	f1ba 0f01 	cmp.w	sl, #1
 8007dee:	f200 8113 	bhi.w	8008018 <_scanf_float+0x2a0>
 8007df2:	455e      	cmp	r6, fp
 8007df4:	f200 8105 	bhi.w	8008002 <_scanf_float+0x28a>
 8007df8:	2501      	movs	r5, #1
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	b007      	add	sp, #28
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e06:	2a0d      	cmp	r2, #13
 8007e08:	d8e6      	bhi.n	8007dd8 <_scanf_float+0x60>
 8007e0a:	a101      	add	r1, pc, #4	; (adr r1, 8007e10 <_scanf_float+0x98>)
 8007e0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e10:	08007f4f 	.word	0x08007f4f
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007dd9 	.word	0x08007dd9
 8007e20:	08007faf 	.word	0x08007faf
 8007e24:	08007f87 	.word	0x08007f87
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f5d 	.word	0x08007f5d
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007dd9 	.word	0x08007dd9
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f15 	.word	0x08007f15
 8007e48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e4c:	e7db      	b.n	8007e06 <_scanf_float+0x8e>
 8007e4e:	290e      	cmp	r1, #14
 8007e50:	d8c2      	bhi.n	8007dd8 <_scanf_float+0x60>
 8007e52:	a001      	add	r0, pc, #4	; (adr r0, 8007e58 <_scanf_float+0xe0>)
 8007e54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e58:	08007f07 	.word	0x08007f07
 8007e5c:	08007dd9 	.word	0x08007dd9
 8007e60:	08007f07 	.word	0x08007f07
 8007e64:	08007f9b 	.word	0x08007f9b
 8007e68:	08007dd9 	.word	0x08007dd9
 8007e6c:	08007eb5 	.word	0x08007eb5
 8007e70:	08007ef1 	.word	0x08007ef1
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007ef1 	.word	0x08007ef1
 8007e84:	08007ef1 	.word	0x08007ef1
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	2b6e      	cmp	r3, #110	; 0x6e
 8007e96:	d809      	bhi.n	8007eac <_scanf_float+0x134>
 8007e98:	2b60      	cmp	r3, #96	; 0x60
 8007e9a:	d8b2      	bhi.n	8007e02 <_scanf_float+0x8a>
 8007e9c:	2b54      	cmp	r3, #84	; 0x54
 8007e9e:	d077      	beq.n	8007f90 <_scanf_float+0x218>
 8007ea0:	2b59      	cmp	r3, #89	; 0x59
 8007ea2:	d199      	bne.n	8007dd8 <_scanf_float+0x60>
 8007ea4:	2d07      	cmp	r5, #7
 8007ea6:	d197      	bne.n	8007dd8 <_scanf_float+0x60>
 8007ea8:	2508      	movs	r5, #8
 8007eaa:	e029      	b.n	8007f00 <_scanf_float+0x188>
 8007eac:	2b74      	cmp	r3, #116	; 0x74
 8007eae:	d06f      	beq.n	8007f90 <_scanf_float+0x218>
 8007eb0:	2b79      	cmp	r3, #121	; 0x79
 8007eb2:	e7f6      	b.n	8007ea2 <_scanf_float+0x12a>
 8007eb4:	6821      	ldr	r1, [r4, #0]
 8007eb6:	05c8      	lsls	r0, r1, #23
 8007eb8:	d51a      	bpl.n	8007ef0 <_scanf_float+0x178>
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ec0:	6021      	str	r1, [r4, #0]
 8007ec2:	f109 0901 	add.w	r9, r9, #1
 8007ec6:	b11b      	cbz	r3, 8007ed0 <_scanf_float+0x158>
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	3201      	adds	r2, #1
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	60a2      	str	r2, [r4, #8]
 8007ed0:	68a3      	ldr	r3, [r4, #8]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	60a3      	str	r3, [r4, #8]
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	f340 8084 	ble.w	8007ff0 <_scanf_float+0x278>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	e766      	b.n	8007dbe <_scanf_float+0x46>
 8007ef0:	eb1a 0f05 	cmn.w	sl, r5
 8007ef4:	f47f af70 	bne.w	8007dd8 <_scanf_float+0x60>
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	f806 3b01 	strb.w	r3, [r6], #1
 8007f04:	e7e4      	b.n	8007ed0 <_scanf_float+0x158>
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	0610      	lsls	r0, r2, #24
 8007f0a:	f57f af65 	bpl.w	8007dd8 <_scanf_float+0x60>
 8007f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f12:	e7f4      	b.n	8007efe <_scanf_float+0x186>
 8007f14:	f1ba 0f00 	cmp.w	sl, #0
 8007f18:	d10e      	bne.n	8007f38 <_scanf_float+0x1c0>
 8007f1a:	f1b9 0f00 	cmp.w	r9, #0
 8007f1e:	d10e      	bne.n	8007f3e <_scanf_float+0x1c6>
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f2a:	d108      	bne.n	8007f3e <_scanf_float+0x1c6>
 8007f2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	f04f 0a01 	mov.w	sl, #1
 8007f36:	e7e3      	b.n	8007f00 <_scanf_float+0x188>
 8007f38:	f1ba 0f02 	cmp.w	sl, #2
 8007f3c:	d055      	beq.n	8007fea <_scanf_float+0x272>
 8007f3e:	2d01      	cmp	r5, #1
 8007f40:	d002      	beq.n	8007f48 <_scanf_float+0x1d0>
 8007f42:	2d04      	cmp	r5, #4
 8007f44:	f47f af48 	bne.w	8007dd8 <_scanf_float+0x60>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	b2ed      	uxtb	r5, r5
 8007f4c:	e7d8      	b.n	8007f00 <_scanf_float+0x188>
 8007f4e:	f1ba 0f01 	cmp.w	sl, #1
 8007f52:	f47f af41 	bne.w	8007dd8 <_scanf_float+0x60>
 8007f56:	f04f 0a02 	mov.w	sl, #2
 8007f5a:	e7d1      	b.n	8007f00 <_scanf_float+0x188>
 8007f5c:	b97d      	cbnz	r5, 8007f7e <_scanf_float+0x206>
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	f47f af3c 	bne.w	8007dde <_scanf_float+0x66>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f70:	f47f af39 	bne.w	8007de6 <_scanf_float+0x6e>
 8007f74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f78:	6022      	str	r2, [r4, #0]
 8007f7a:	2501      	movs	r5, #1
 8007f7c:	e7c0      	b.n	8007f00 <_scanf_float+0x188>
 8007f7e:	2d03      	cmp	r5, #3
 8007f80:	d0e2      	beq.n	8007f48 <_scanf_float+0x1d0>
 8007f82:	2d05      	cmp	r5, #5
 8007f84:	e7de      	b.n	8007f44 <_scanf_float+0x1cc>
 8007f86:	2d02      	cmp	r5, #2
 8007f88:	f47f af26 	bne.w	8007dd8 <_scanf_float+0x60>
 8007f8c:	2503      	movs	r5, #3
 8007f8e:	e7b7      	b.n	8007f00 <_scanf_float+0x188>
 8007f90:	2d06      	cmp	r5, #6
 8007f92:	f47f af21 	bne.w	8007dd8 <_scanf_float+0x60>
 8007f96:	2507      	movs	r5, #7
 8007f98:	e7b2      	b.n	8007f00 <_scanf_float+0x188>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	0591      	lsls	r1, r2, #22
 8007f9e:	f57f af1b 	bpl.w	8007dd8 <_scanf_float+0x60>
 8007fa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fac:	e7a8      	b.n	8007f00 <_scanf_float+0x188>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007fb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007fb8:	d006      	beq.n	8007fc8 <_scanf_float+0x250>
 8007fba:	0550      	lsls	r0, r2, #21
 8007fbc:	f57f af0c 	bpl.w	8007dd8 <_scanf_float+0x60>
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	f43f af0f 	beq.w	8007de6 <_scanf_float+0x6e>
 8007fc8:	0591      	lsls	r1, r2, #22
 8007fca:	bf58      	it	pl
 8007fcc:	9901      	ldrpl	r1, [sp, #4]
 8007fce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fd2:	bf58      	it	pl
 8007fd4:	eba9 0101 	subpl.w	r1, r9, r1
 8007fd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007fdc:	bf58      	it	pl
 8007fde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fe2:	6022      	str	r2, [r4, #0]
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	e78a      	b.n	8007f00 <_scanf_float+0x188>
 8007fea:	f04f 0a03 	mov.w	sl, #3
 8007fee:	e787      	b.n	8007f00 <_scanf_float+0x188>
 8007ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ff4:	4639      	mov	r1, r7
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4798      	blx	r3
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f aedf 	beq.w	8007dbe <_scanf_float+0x46>
 8008000:	e6ea      	b.n	8007dd8 <_scanf_float+0x60>
 8008002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800800a:	463a      	mov	r2, r7
 800800c:	4640      	mov	r0, r8
 800800e:	4798      	blx	r3
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	3b01      	subs	r3, #1
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	e6ec      	b.n	8007df2 <_scanf_float+0x7a>
 8008018:	1e6b      	subs	r3, r5, #1
 800801a:	2b06      	cmp	r3, #6
 800801c:	d825      	bhi.n	800806a <_scanf_float+0x2f2>
 800801e:	2d02      	cmp	r5, #2
 8008020:	d836      	bhi.n	8008090 <_scanf_float+0x318>
 8008022:	455e      	cmp	r6, fp
 8008024:	f67f aee8 	bls.w	8007df8 <_scanf_float+0x80>
 8008028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800802c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008030:	463a      	mov	r2, r7
 8008032:	4640      	mov	r0, r8
 8008034:	4798      	blx	r3
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	3b01      	subs	r3, #1
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	e7f1      	b.n	8008022 <_scanf_float+0x2aa>
 800803e:	9802      	ldr	r0, [sp, #8]
 8008040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008044:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008048:	9002      	str	r0, [sp, #8]
 800804a:	463a      	mov	r2, r7
 800804c:	4640      	mov	r0, r8
 800804e:	4798      	blx	r3
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	3b01      	subs	r3, #1
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	f10a 3aff 	add.w	sl, sl, #4294967295
 800805a:	fa5f fa8a 	uxtb.w	sl, sl
 800805e:	f1ba 0f02 	cmp.w	sl, #2
 8008062:	d1ec      	bne.n	800803e <_scanf_float+0x2c6>
 8008064:	3d03      	subs	r5, #3
 8008066:	b2ed      	uxtb	r5, r5
 8008068:	1b76      	subs	r6, r6, r5
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	05da      	lsls	r2, r3, #23
 800806e:	d52f      	bpl.n	80080d0 <_scanf_float+0x358>
 8008070:	055b      	lsls	r3, r3, #21
 8008072:	d510      	bpl.n	8008096 <_scanf_float+0x31e>
 8008074:	455e      	cmp	r6, fp
 8008076:	f67f aebf 	bls.w	8007df8 <_scanf_float+0x80>
 800807a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800807e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008082:	463a      	mov	r2, r7
 8008084:	4640      	mov	r0, r8
 8008086:	4798      	blx	r3
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	3b01      	subs	r3, #1
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	e7f1      	b.n	8008074 <_scanf_float+0x2fc>
 8008090:	46aa      	mov	sl, r5
 8008092:	9602      	str	r6, [sp, #8]
 8008094:	e7df      	b.n	8008056 <_scanf_float+0x2de>
 8008096:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	2965      	cmp	r1, #101	; 0x65
 800809e:	f103 33ff 	add.w	r3, r3, #4294967295
 80080a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	d00c      	beq.n	80080c4 <_scanf_float+0x34c>
 80080aa:	2945      	cmp	r1, #69	; 0x45
 80080ac:	d00a      	beq.n	80080c4 <_scanf_float+0x34c>
 80080ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080b2:	463a      	mov	r2, r7
 80080b4:	4640      	mov	r0, r8
 80080b6:	4798      	blx	r3
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080be:	3b01      	subs	r3, #1
 80080c0:	1eb5      	subs	r5, r6, #2
 80080c2:	6123      	str	r3, [r4, #16]
 80080c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c8:	463a      	mov	r2, r7
 80080ca:	4640      	mov	r0, r8
 80080cc:	4798      	blx	r3
 80080ce:	462e      	mov	r6, r5
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	f015 0510 	ands.w	r5, r5, #16
 80080d6:	d158      	bne.n	800818a <_scanf_float+0x412>
 80080d8:	7035      	strb	r5, [r6, #0]
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e4:	d11c      	bne.n	8008120 <_scanf_float+0x3a8>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	454b      	cmp	r3, r9
 80080ea:	eba3 0209 	sub.w	r2, r3, r9
 80080ee:	d124      	bne.n	800813a <_scanf_float+0x3c2>
 80080f0:	2200      	movs	r2, #0
 80080f2:	4659      	mov	r1, fp
 80080f4:	4640      	mov	r0, r8
 80080f6:	f002 fc4f 	bl	800a998 <_strtod_r>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	6821      	ldr	r1, [r4, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f011 0f02 	tst.w	r1, #2
 8008104:	ec57 6b10 	vmov	r6, r7, d0
 8008108:	f103 0204 	add.w	r2, r3, #4
 800810c:	d020      	beq.n	8008150 <_scanf_float+0x3d8>
 800810e:	9903      	ldr	r1, [sp, #12]
 8008110:	600a      	str	r2, [r1, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	e9c3 6700 	strd	r6, r7, [r3]
 8008118:	68e3      	ldr	r3, [r4, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60e3      	str	r3, [r4, #12]
 800811e:	e66c      	b.n	8007dfa <_scanf_float+0x82>
 8008120:	9b04      	ldr	r3, [sp, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0e4      	beq.n	80080f0 <_scanf_float+0x378>
 8008126:	9905      	ldr	r1, [sp, #20]
 8008128:	230a      	movs	r3, #10
 800812a:	462a      	mov	r2, r5
 800812c:	3101      	adds	r1, #1
 800812e:	4640      	mov	r0, r8
 8008130:	f002 fcba 	bl	800aaa8 <_strtol_r>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	9e05      	ldr	r6, [sp, #20]
 8008138:	1ac2      	subs	r2, r0, r3
 800813a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800813e:	429e      	cmp	r6, r3
 8008140:	bf28      	it	cs
 8008142:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008146:	4912      	ldr	r1, [pc, #72]	; (8008190 <_scanf_float+0x418>)
 8008148:	4630      	mov	r0, r6
 800814a:	f000 f8f9 	bl	8008340 <siprintf>
 800814e:	e7cf      	b.n	80080f0 <_scanf_float+0x378>
 8008150:	f011 0f04 	tst.w	r1, #4
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	600a      	str	r2, [r1, #0]
 8008158:	d1db      	bne.n	8008112 <_scanf_float+0x39a>
 800815a:	f8d3 8000 	ldr.w	r8, [r3]
 800815e:	ee10 2a10 	vmov	r2, s0
 8008162:	ee10 0a10 	vmov	r0, s0
 8008166:	463b      	mov	r3, r7
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800816e:	b128      	cbz	r0, 800817c <_scanf_float+0x404>
 8008170:	4808      	ldr	r0, [pc, #32]	; (8008194 <_scanf_float+0x41c>)
 8008172:	f000 f9d7 	bl	8008524 <nanf>
 8008176:	ed88 0a00 	vstr	s0, [r8]
 800817a:	e7cd      	b.n	8008118 <_scanf_float+0x3a0>
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fd32 	bl	8000be8 <__aeabi_d2f>
 8008184:	f8c8 0000 	str.w	r0, [r8]
 8008188:	e7c6      	b.n	8008118 <_scanf_float+0x3a0>
 800818a:	2500      	movs	r5, #0
 800818c:	e635      	b.n	8007dfa <_scanf_float+0x82>
 800818e:	bf00      	nop
 8008190:	0800dc7c 	.word	0x0800dc7c
 8008194:	0800e00d 	.word	0x0800e00d

08008198 <std>:
 8008198:	2300      	movs	r3, #0
 800819a:	b510      	push	{r4, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	e9c0 3300 	strd	r3, r3, [r0]
 80081a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a6:	6083      	str	r3, [r0, #8]
 80081a8:	8181      	strh	r1, [r0, #12]
 80081aa:	6643      	str	r3, [r0, #100]	; 0x64
 80081ac:	81c2      	strh	r2, [r0, #14]
 80081ae:	6183      	str	r3, [r0, #24]
 80081b0:	4619      	mov	r1, r3
 80081b2:	2208      	movs	r2, #8
 80081b4:	305c      	adds	r0, #92	; 0x5c
 80081b6:	f000 f926 	bl	8008406 <memset>
 80081ba:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <std+0x58>)
 80081bc:	6263      	str	r3, [r4, #36]	; 0x24
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <std+0x5c>)
 80081c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <std+0x60>)
 80081c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081c6:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <std+0x64>)
 80081c8:	6323      	str	r3, [r4, #48]	; 0x30
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <std+0x68>)
 80081cc:	6224      	str	r4, [r4, #32]
 80081ce:	429c      	cmp	r4, r3
 80081d0:	d006      	beq.n	80081e0 <std+0x48>
 80081d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081d6:	4294      	cmp	r4, r2
 80081d8:	d002      	beq.n	80081e0 <std+0x48>
 80081da:	33d0      	adds	r3, #208	; 0xd0
 80081dc:	429c      	cmp	r4, r3
 80081de:	d105      	bne.n	80081ec <std+0x54>
 80081e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f000 b98a 	b.w	8008500 <__retarget_lock_init_recursive>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	08008381 	.word	0x08008381
 80081f4:	080083a3 	.word	0x080083a3
 80081f8:	080083db 	.word	0x080083db
 80081fc:	080083ff 	.word	0x080083ff
 8008200:	20000dd4 	.word	0x20000dd4

08008204 <stdio_exit_handler>:
 8008204:	4a02      	ldr	r2, [pc, #8]	; (8008210 <stdio_exit_handler+0xc>)
 8008206:	4903      	ldr	r1, [pc, #12]	; (8008214 <stdio_exit_handler+0x10>)
 8008208:	4803      	ldr	r0, [pc, #12]	; (8008218 <stdio_exit_handler+0x14>)
 800820a:	f000 b869 	b.w	80082e0 <_fwalk_sglue>
 800820e:	bf00      	nop
 8008210:	2000003c 	.word	0x2000003c
 8008214:	0800b0f1 	.word	0x0800b0f1
 8008218:	20000048 	.word	0x20000048

0800821c <cleanup_stdio>:
 800821c:	6841      	ldr	r1, [r0, #4]
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <cleanup_stdio+0x34>)
 8008220:	4299      	cmp	r1, r3
 8008222:	b510      	push	{r4, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	d001      	beq.n	800822c <cleanup_stdio+0x10>
 8008228:	f002 ff62 	bl	800b0f0 <_fflush_r>
 800822c:	68a1      	ldr	r1, [r4, #8]
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <cleanup_stdio+0x38>)
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <cleanup_stdio+0x1e>
 8008234:	4620      	mov	r0, r4
 8008236:	f002 ff5b 	bl	800b0f0 <_fflush_r>
 800823a:	68e1      	ldr	r1, [r4, #12]
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <cleanup_stdio+0x3c>)
 800823e:	4299      	cmp	r1, r3
 8008240:	d004      	beq.n	800824c <cleanup_stdio+0x30>
 8008242:	4620      	mov	r0, r4
 8008244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008248:	f002 bf52 	b.w	800b0f0 <_fflush_r>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	bf00      	nop
 8008250:	20000dd4 	.word	0x20000dd4
 8008254:	20000e3c 	.word	0x20000e3c
 8008258:	20000ea4 	.word	0x20000ea4

0800825c <global_stdio_init.part.0>:
 800825c:	b510      	push	{r4, lr}
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <global_stdio_init.part.0+0x30>)
 8008260:	4c0b      	ldr	r4, [pc, #44]	; (8008290 <global_stdio_init.part.0+0x34>)
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <global_stdio_init.part.0+0x38>)
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	4620      	mov	r0, r4
 8008268:	2200      	movs	r2, #0
 800826a:	2104      	movs	r1, #4
 800826c:	f7ff ff94 	bl	8008198 <std>
 8008270:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008274:	2201      	movs	r2, #1
 8008276:	2109      	movs	r1, #9
 8008278:	f7ff ff8e 	bl	8008198 <std>
 800827c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008280:	2202      	movs	r2, #2
 8008282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008286:	2112      	movs	r1, #18
 8008288:	f7ff bf86 	b.w	8008198 <std>
 800828c:	20000f0c 	.word	0x20000f0c
 8008290:	20000dd4 	.word	0x20000dd4
 8008294:	08008205 	.word	0x08008205

08008298 <__sfp_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sfp_lock_acquire+0x8>)
 800829a:	f000 b932 	b.w	8008502 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	20000f15 	.word	0x20000f15

080082a4 <__sfp_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_release+0x8>)
 80082a6:	f000 b92d 	b.w	8008504 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	20000f15 	.word	0x20000f15

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sfp_lock_acquire>
 80082b8:	6a23      	ldr	r3, [r4, #32]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sfp_lock_release>
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <__sinit+0x28>)
 80082c6:	6223      	str	r3, [r4, #32]
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__sinit+0x2c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f5      	bne.n	80082bc <__sinit+0xc>
 80082d0:	f7ff ffc4 	bl	800825c <global_stdio_init.part.0>
 80082d4:	e7f2      	b.n	80082bc <__sinit+0xc>
 80082d6:	bf00      	nop
 80082d8:	0800821d 	.word	0x0800821d
 80082dc:	20000f0c 	.word	0x20000f0c

080082e0 <_fwalk_sglue>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4607      	mov	r7, r0
 80082e6:	4688      	mov	r8, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	2600      	movs	r6, #0
 80082ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f0:	f1b9 0901 	subs.w	r9, r9, #1
 80082f4:	d505      	bpl.n	8008302 <_fwalk_sglue+0x22>
 80082f6:	6824      	ldr	r4, [r4, #0]
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	d1f7      	bne.n	80082ec <_fwalk_sglue+0xc>
 80082fc:	4630      	mov	r0, r6
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d907      	bls.n	8008318 <_fwalk_sglue+0x38>
 8008308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830c:	3301      	adds	r3, #1
 800830e:	d003      	beq.n	8008318 <_fwalk_sglue+0x38>
 8008310:	4629      	mov	r1, r5
 8008312:	4638      	mov	r0, r7
 8008314:	47c0      	blx	r8
 8008316:	4306      	orrs	r6, r0
 8008318:	3568      	adds	r5, #104	; 0x68
 800831a:	e7e9      	b.n	80082f0 <_fwalk_sglue+0x10>

0800831c <iprintf>:
 800831c:	b40f      	push	{r0, r1, r2, r3}
 800831e:	b507      	push	{r0, r1, r2, lr}
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <iprintf+0x20>)
 8008322:	ab04      	add	r3, sp, #16
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	6881      	ldr	r1, [r0, #8]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f002 fd3f 	bl	800adb0 <_vfiprintf_r>
 8008332:	b003      	add	sp, #12
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
 8008338:	b004      	add	sp, #16
 800833a:	4770      	bx	lr
 800833c:	20000094 	.word	0x20000094

08008340 <siprintf>:
 8008340:	b40e      	push	{r1, r2, r3}
 8008342:	b500      	push	{lr}
 8008344:	b09c      	sub	sp, #112	; 0x70
 8008346:	ab1d      	add	r3, sp, #116	; 0x74
 8008348:	9002      	str	r0, [sp, #8]
 800834a:	9006      	str	r0, [sp, #24]
 800834c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008350:	4809      	ldr	r0, [pc, #36]	; (8008378 <siprintf+0x38>)
 8008352:	9107      	str	r1, [sp, #28]
 8008354:	9104      	str	r1, [sp, #16]
 8008356:	4909      	ldr	r1, [pc, #36]	; (800837c <siprintf+0x3c>)
 8008358:	f853 2b04 	ldr.w	r2, [r3], #4
 800835c:	9105      	str	r1, [sp, #20]
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	a902      	add	r1, sp, #8
 8008364:	f002 fbfc 	bl	800ab60 <_svfiprintf_r>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	b01c      	add	sp, #112	; 0x70
 8008370:	f85d eb04 	ldr.w	lr, [sp], #4
 8008374:	b003      	add	sp, #12
 8008376:	4770      	bx	lr
 8008378:	20000094 	.word	0x20000094
 800837c:	ffff0208 	.word	0xffff0208

08008380 <__sread>:
 8008380:	b510      	push	{r4, lr}
 8008382:	460c      	mov	r4, r1
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	f000 f86c 	bl	8008464 <_read_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	bfab      	itete	ge
 8008390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008392:	89a3      	ldrhlt	r3, [r4, #12]
 8008394:	181b      	addge	r3, r3, r0
 8008396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800839a:	bfac      	ite	ge
 800839c:	6563      	strge	r3, [r4, #84]	; 0x54
 800839e:	81a3      	strhlt	r3, [r4, #12]
 80083a0:	bd10      	pop	{r4, pc}

080083a2 <__swrite>:
 80083a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	461f      	mov	r7, r3
 80083a8:	898b      	ldrh	r3, [r1, #12]
 80083aa:	05db      	lsls	r3, r3, #23
 80083ac:	4605      	mov	r5, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	4616      	mov	r6, r2
 80083b2:	d505      	bpl.n	80083c0 <__swrite+0x1e>
 80083b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b8:	2302      	movs	r3, #2
 80083ba:	2200      	movs	r2, #0
 80083bc:	f000 f840 	bl	8008440 <_lseek_r>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	4632      	mov	r2, r6
 80083ce:	463b      	mov	r3, r7
 80083d0:	4628      	mov	r0, r5
 80083d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d6:	f000 b857 	b.w	8008488 <_write_r>

080083da <__sseek>:
 80083da:	b510      	push	{r4, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 f82d 	bl	8008440 <_lseek_r>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	bf15      	itete	ne
 80083ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083f6:	81a3      	strheq	r3, [r4, #12]
 80083f8:	bf18      	it	ne
 80083fa:	81a3      	strhne	r3, [r4, #12]
 80083fc:	bd10      	pop	{r4, pc}

080083fe <__sclose>:
 80083fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008402:	f000 b80d 	b.w	8008420 <_close_r>

08008406 <memset>:
 8008406:	4402      	add	r2, r0
 8008408:	4603      	mov	r3, r0
 800840a:	4293      	cmp	r3, r2
 800840c:	d100      	bne.n	8008410 <memset+0xa>
 800840e:	4770      	bx	lr
 8008410:	f803 1b01 	strb.w	r1, [r3], #1
 8008414:	e7f9      	b.n	800840a <memset+0x4>
	...

08008418 <_localeconv_r>:
 8008418:	4800      	ldr	r0, [pc, #0]	; (800841c <_localeconv_r+0x4>)
 800841a:	4770      	bx	lr
 800841c:	20000188 	.word	0x20000188

08008420 <_close_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	; (800843c <_close_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7fa ffeb 	bl	8003406 <_close>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_close_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_close_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20000f10 	.word	0x20000f10

08008440 <_lseek_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	; (8008460 <_lseek_r+0x20>)
 8008444:	4604      	mov	r4, r0
 8008446:	4608      	mov	r0, r1
 8008448:	4611      	mov	r1, r2
 800844a:	2200      	movs	r2, #0
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7fb f800 	bl	8003454 <_lseek>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_lseek_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_lseek_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20000f10 	.word	0x20000f10

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_read_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7fa ffaa 	bl	80033cc <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000f10 	.word	0x20000f10

08008488 <_write_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	; (80084a8 <_write_r+0x20>)
 800848c:	4604      	mov	r4, r0
 800848e:	4608      	mov	r0, r1
 8008490:	4611      	mov	r1, r2
 8008492:	2200      	movs	r2, #0
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7f9 f884 	bl	80015a4 <_write>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_write_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_write_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000f10 	.word	0x20000f10

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000094 	.word	0x20000094

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4d0d      	ldr	r5, [pc, #52]	; (80084f0 <__libc_init_array+0x38>)
 80084bc:	4c0d      	ldr	r4, [pc, #52]	; (80084f4 <__libc_init_array+0x3c>)
 80084be:	1b64      	subs	r4, r4, r5
 80084c0:	10a4      	asrs	r4, r4, #2
 80084c2:	2600      	movs	r6, #0
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	4d0b      	ldr	r5, [pc, #44]	; (80084f8 <__libc_init_array+0x40>)
 80084ca:	4c0c      	ldr	r4, [pc, #48]	; (80084fc <__libc_init_array+0x44>)
 80084cc:	f005 fba0 	bl	800dc10 <_init>
 80084d0:	1b64      	subs	r4, r4, r5
 80084d2:	10a4      	asrs	r4, r4, #2
 80084d4:	2600      	movs	r6, #0
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800e290 	.word	0x0800e290
 80084f4:	0800e290 	.word	0x0800e290
 80084f8:	0800e290 	.word	0x0800e290
 80084fc:	0800e294 	.word	0x0800e294

08008500 <__retarget_lock_init_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_acquire_recursive>:
 8008502:	4770      	bx	lr

08008504 <__retarget_lock_release_recursive>:
 8008504:	4770      	bx	lr

08008506 <memcpy>:
 8008506:	440a      	add	r2, r1
 8008508:	4291      	cmp	r1, r2
 800850a:	f100 33ff 	add.w	r3, r0, #4294967295
 800850e:	d100      	bne.n	8008512 <memcpy+0xc>
 8008510:	4770      	bx	lr
 8008512:	b510      	push	{r4, lr}
 8008514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800851c:	4291      	cmp	r1, r2
 800851e:	d1f9      	bne.n	8008514 <memcpy+0xe>
 8008520:	bd10      	pop	{r4, pc}
	...

08008524 <nanf>:
 8008524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800852c <nanf+0x8>
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	7fc00000 	.word	0x7fc00000

08008530 <quorem>:
 8008530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	6903      	ldr	r3, [r0, #16]
 8008536:	690c      	ldr	r4, [r1, #16]
 8008538:	42a3      	cmp	r3, r4
 800853a:	4607      	mov	r7, r0
 800853c:	db7e      	blt.n	800863c <quorem+0x10c>
 800853e:	3c01      	subs	r4, #1
 8008540:	f101 0814 	add.w	r8, r1, #20
 8008544:	f100 0514 	add.w	r5, r0, #20
 8008548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008556:	3301      	adds	r3, #1
 8008558:	429a      	cmp	r2, r3
 800855a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800855e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008562:	fbb2 f6f3 	udiv	r6, r2, r3
 8008566:	d331      	bcc.n	80085cc <quorem+0x9c>
 8008568:	f04f 0e00 	mov.w	lr, #0
 800856c:	4640      	mov	r0, r8
 800856e:	46ac      	mov	ip, r5
 8008570:	46f2      	mov	sl, lr
 8008572:	f850 2b04 	ldr.w	r2, [r0], #4
 8008576:	b293      	uxth	r3, r2
 8008578:	fb06 e303 	mla	r3, r6, r3, lr
 800857c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008580:	0c1a      	lsrs	r2, r3, #16
 8008582:	b29b      	uxth	r3, r3
 8008584:	ebaa 0303 	sub.w	r3, sl, r3
 8008588:	f8dc a000 	ldr.w	sl, [ip]
 800858c:	fa13 f38a 	uxtah	r3, r3, sl
 8008590:	fb06 220e 	mla	r2, r6, lr, r2
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800859c:	b292      	uxth	r2, r2
 800859e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80085aa:	4581      	cmp	r9, r0
 80085ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085b0:	f84c 3b04 	str.w	r3, [ip], #4
 80085b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085b8:	d2db      	bcs.n	8008572 <quorem+0x42>
 80085ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80085be:	b92b      	cbnz	r3, 80085cc <quorem+0x9c>
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	3b04      	subs	r3, #4
 80085c4:	429d      	cmp	r5, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	d32c      	bcc.n	8008624 <quorem+0xf4>
 80085ca:	613c      	str	r4, [r7, #16]
 80085cc:	4638      	mov	r0, r7
 80085ce:	f001 f9ef 	bl	80099b0 <__mcmp>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	db22      	blt.n	800861c <quorem+0xec>
 80085d6:	3601      	adds	r6, #1
 80085d8:	4629      	mov	r1, r5
 80085da:	2000      	movs	r0, #0
 80085dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80085e0:	f8d1 c000 	ldr.w	ip, [r1]
 80085e4:	b293      	uxth	r3, r2
 80085e6:	1ac3      	subs	r3, r0, r3
 80085e8:	0c12      	lsrs	r2, r2, #16
 80085ea:	fa13 f38c 	uxtah	r3, r3, ip
 80085ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80085f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085fc:	45c1      	cmp	r9, r8
 80085fe:	f841 3b04 	str.w	r3, [r1], #4
 8008602:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008606:	d2e9      	bcs.n	80085dc <quorem+0xac>
 8008608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800860c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008610:	b922      	cbnz	r2, 800861c <quorem+0xec>
 8008612:	3b04      	subs	r3, #4
 8008614:	429d      	cmp	r5, r3
 8008616:	461a      	mov	r2, r3
 8008618:	d30a      	bcc.n	8008630 <quorem+0x100>
 800861a:	613c      	str	r4, [r7, #16]
 800861c:	4630      	mov	r0, r6
 800861e:	b003      	add	sp, #12
 8008620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	3b04      	subs	r3, #4
 8008628:	2a00      	cmp	r2, #0
 800862a:	d1ce      	bne.n	80085ca <quorem+0x9a>
 800862c:	3c01      	subs	r4, #1
 800862e:	e7c9      	b.n	80085c4 <quorem+0x94>
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	3b04      	subs	r3, #4
 8008634:	2a00      	cmp	r2, #0
 8008636:	d1f0      	bne.n	800861a <quorem+0xea>
 8008638:	3c01      	subs	r4, #1
 800863a:	e7eb      	b.n	8008614 <quorem+0xe4>
 800863c:	2000      	movs	r0, #0
 800863e:	e7ee      	b.n	800861e <quorem+0xee>

08008640 <_dtoa_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ed2d 8b04 	vpush	{d8-d9}
 8008648:	69c5      	ldr	r5, [r0, #28]
 800864a:	b093      	sub	sp, #76	; 0x4c
 800864c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008650:	ec57 6b10 	vmov	r6, r7, d0
 8008654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008658:	9107      	str	r1, [sp, #28]
 800865a:	4604      	mov	r4, r0
 800865c:	920a      	str	r2, [sp, #40]	; 0x28
 800865e:	930d      	str	r3, [sp, #52]	; 0x34
 8008660:	b975      	cbnz	r5, 8008680 <_dtoa_r+0x40>
 8008662:	2010      	movs	r0, #16
 8008664:	f000 fe2a 	bl	80092bc <malloc>
 8008668:	4602      	mov	r2, r0
 800866a:	61e0      	str	r0, [r4, #28]
 800866c:	b920      	cbnz	r0, 8008678 <_dtoa_r+0x38>
 800866e:	4bae      	ldr	r3, [pc, #696]	; (8008928 <_dtoa_r+0x2e8>)
 8008670:	21ef      	movs	r1, #239	; 0xef
 8008672:	48ae      	ldr	r0, [pc, #696]	; (800892c <_dtoa_r+0x2ec>)
 8008674:	f002 fe40 	bl	800b2f8 <__assert_func>
 8008678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800867c:	6005      	str	r5, [r0, #0]
 800867e:	60c5      	str	r5, [r0, #12]
 8008680:	69e3      	ldr	r3, [r4, #28]
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	b151      	cbz	r1, 800869c <_dtoa_r+0x5c>
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	604a      	str	r2, [r1, #4]
 800868a:	2301      	movs	r3, #1
 800868c:	4093      	lsls	r3, r2
 800868e:	608b      	str	r3, [r1, #8]
 8008690:	4620      	mov	r0, r4
 8008692:	f000 ff07 	bl	80094a4 <_Bfree>
 8008696:	69e3      	ldr	r3, [r4, #28]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	1e3b      	subs	r3, r7, #0
 800869e:	bfbb      	ittet	lt
 80086a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086a4:	9303      	strlt	r3, [sp, #12]
 80086a6:	2300      	movge	r3, #0
 80086a8:	2201      	movlt	r2, #1
 80086aa:	bfac      	ite	ge
 80086ac:	f8c8 3000 	strge.w	r3, [r8]
 80086b0:	f8c8 2000 	strlt.w	r2, [r8]
 80086b4:	4b9e      	ldr	r3, [pc, #632]	; (8008930 <_dtoa_r+0x2f0>)
 80086b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086ba:	ea33 0308 	bics.w	r3, r3, r8
 80086be:	d11b      	bne.n	80086f8 <_dtoa_r+0xb8>
 80086c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80086cc:	4333      	orrs	r3, r6
 80086ce:	f000 8593 	beq.w	80091f8 <_dtoa_r+0xbb8>
 80086d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086d4:	b963      	cbnz	r3, 80086f0 <_dtoa_r+0xb0>
 80086d6:	4b97      	ldr	r3, [pc, #604]	; (8008934 <_dtoa_r+0x2f4>)
 80086d8:	e027      	b.n	800872a <_dtoa_r+0xea>
 80086da:	4b97      	ldr	r3, [pc, #604]	; (8008938 <_dtoa_r+0x2f8>)
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	9800      	ldr	r0, [sp, #0]
 80086e6:	b013      	add	sp, #76	; 0x4c
 80086e8:	ecbd 8b04 	vpop	{d8-d9}
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f0:	4b90      	ldr	r3, [pc, #576]	; (8008934 <_dtoa_r+0x2f4>)
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	3303      	adds	r3, #3
 80086f6:	e7f3      	b.n	80086e0 <_dtoa_r+0xa0>
 80086f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	ec51 0b17 	vmov	r0, r1, d7
 8008702:	eeb0 8a47 	vmov.f32	s16, s14
 8008706:	eef0 8a67 	vmov.f32	s17, s15
 800870a:	2300      	movs	r3, #0
 800870c:	f7f8 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008710:	4681      	mov	r9, r0
 8008712:	b160      	cbz	r0, 800872e <_dtoa_r+0xee>
 8008714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008716:	2301      	movs	r3, #1
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8568 	beq.w	80091f2 <_dtoa_r+0xbb2>
 8008722:	4b86      	ldr	r3, [pc, #536]	; (800893c <_dtoa_r+0x2fc>)
 8008724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	3b01      	subs	r3, #1
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	e7da      	b.n	80086e4 <_dtoa_r+0xa4>
 800872e:	aa10      	add	r2, sp, #64	; 0x40
 8008730:	a911      	add	r1, sp, #68	; 0x44
 8008732:	4620      	mov	r0, r4
 8008734:	eeb0 0a48 	vmov.f32	s0, s16
 8008738:	eef0 0a68 	vmov.f32	s1, s17
 800873c:	f001 fa4e 	bl	8009bdc <__d2b>
 8008740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008744:	4682      	mov	sl, r0
 8008746:	2d00      	cmp	r5, #0
 8008748:	d07f      	beq.n	800884a <_dtoa_r+0x20a>
 800874a:	ee18 3a90 	vmov	r3, s17
 800874e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008756:	ec51 0b18 	vmov	r0, r1, d8
 800875a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800875e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008766:	4619      	mov	r1, r3
 8008768:	2200      	movs	r2, #0
 800876a:	4b75      	ldr	r3, [pc, #468]	; (8008940 <_dtoa_r+0x300>)
 800876c:	f7f7 fd8c 	bl	8000288 <__aeabi_dsub>
 8008770:	a367      	add	r3, pc, #412	; (adr r3, 8008910 <_dtoa_r+0x2d0>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 ff3f 	bl	80005f8 <__aeabi_dmul>
 800877a:	a367      	add	r3, pc, #412	; (adr r3, 8008918 <_dtoa_r+0x2d8>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fd84 	bl	800028c <__adddf3>
 8008784:	4606      	mov	r6, r0
 8008786:	4628      	mov	r0, r5
 8008788:	460f      	mov	r7, r1
 800878a:	f7f7 fecb 	bl	8000524 <__aeabi_i2d>
 800878e:	a364      	add	r3, pc, #400	; (adr r3, 8008920 <_dtoa_r+0x2e0>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4630      	mov	r0, r6
 800879e:	4639      	mov	r1, r7
 80087a0:	f7f7 fd74 	bl	800028c <__adddf3>
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	f7f8 f9d6 	bl	8000b58 <__aeabi_d2iz>
 80087ac:	2200      	movs	r2, #0
 80087ae:	4683      	mov	fp, r0
 80087b0:	2300      	movs	r3, #0
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f8 f991 	bl	8000adc <__aeabi_dcmplt>
 80087ba:	b148      	cbz	r0, 80087d0 <_dtoa_r+0x190>
 80087bc:	4658      	mov	r0, fp
 80087be:	f7f7 feb1 	bl	8000524 <__aeabi_i2d>
 80087c2:	4632      	mov	r2, r6
 80087c4:	463b      	mov	r3, r7
 80087c6:	f7f8 f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ca:	b908      	cbnz	r0, 80087d0 <_dtoa_r+0x190>
 80087cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087d0:	f1bb 0f16 	cmp.w	fp, #22
 80087d4:	d857      	bhi.n	8008886 <_dtoa_r+0x246>
 80087d6:	4b5b      	ldr	r3, [pc, #364]	; (8008944 <_dtoa_r+0x304>)
 80087d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	ec51 0b18 	vmov	r0, r1, d8
 80087e4:	f7f8 f97a 	bl	8000adc <__aeabi_dcmplt>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d04e      	beq.n	800888a <_dtoa_r+0x24a>
 80087ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087f0:	2300      	movs	r3, #0
 80087f2:	930c      	str	r3, [sp, #48]	; 0x30
 80087f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	1e5a      	subs	r2, r3, #1
 80087fa:	bf45      	ittet	mi
 80087fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8008800:	9305      	strmi	r3, [sp, #20]
 8008802:	2300      	movpl	r3, #0
 8008804:	2300      	movmi	r3, #0
 8008806:	9206      	str	r2, [sp, #24]
 8008808:	bf54      	ite	pl
 800880a:	9305      	strpl	r3, [sp, #20]
 800880c:	9306      	strmi	r3, [sp, #24]
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	db3c      	blt.n	800888e <_dtoa_r+0x24e>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800881a:	445b      	add	r3, fp
 800881c:	9306      	str	r3, [sp, #24]
 800881e:	2300      	movs	r3, #0
 8008820:	9308      	str	r3, [sp, #32]
 8008822:	9b07      	ldr	r3, [sp, #28]
 8008824:	2b09      	cmp	r3, #9
 8008826:	d868      	bhi.n	80088fa <_dtoa_r+0x2ba>
 8008828:	2b05      	cmp	r3, #5
 800882a:	bfc4      	itt	gt
 800882c:	3b04      	subgt	r3, #4
 800882e:	9307      	strgt	r3, [sp, #28]
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	f1a3 0302 	sub.w	r3, r3, #2
 8008836:	bfcc      	ite	gt
 8008838:	2500      	movgt	r5, #0
 800883a:	2501      	movle	r5, #1
 800883c:	2b03      	cmp	r3, #3
 800883e:	f200 8085 	bhi.w	800894c <_dtoa_r+0x30c>
 8008842:	e8df f003 	tbb	[pc, r3]
 8008846:	3b2e      	.short	0x3b2e
 8008848:	5839      	.short	0x5839
 800884a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800884e:	441d      	add	r5, r3
 8008850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008854:	2b20      	cmp	r3, #32
 8008856:	bfc1      	itttt	gt
 8008858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800885c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008868:	bfd6      	itet	le
 800886a:	f1c3 0320 	rsble	r3, r3, #32
 800886e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008872:	fa06 f003 	lslle.w	r0, r6, r3
 8008876:	f7f7 fe45 	bl	8000504 <__aeabi_ui2d>
 800887a:	2201      	movs	r2, #1
 800887c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008880:	3d01      	subs	r5, #1
 8008882:	920e      	str	r2, [sp, #56]	; 0x38
 8008884:	e76f      	b.n	8008766 <_dtoa_r+0x126>
 8008886:	2301      	movs	r3, #1
 8008888:	e7b3      	b.n	80087f2 <_dtoa_r+0x1b2>
 800888a:	900c      	str	r0, [sp, #48]	; 0x30
 800888c:	e7b2      	b.n	80087f4 <_dtoa_r+0x1b4>
 800888e:	9b05      	ldr	r3, [sp, #20]
 8008890:	eba3 030b 	sub.w	r3, r3, fp
 8008894:	9305      	str	r3, [sp, #20]
 8008896:	f1cb 0300 	rsb	r3, fp, #0
 800889a:	9308      	str	r3, [sp, #32]
 800889c:	2300      	movs	r3, #0
 800889e:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a0:	e7bf      	b.n	8008822 <_dtoa_r+0x1e2>
 80088a2:	2300      	movs	r3, #0
 80088a4:	9309      	str	r3, [sp, #36]	; 0x24
 80088a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dc52      	bgt.n	8008952 <_dtoa_r+0x312>
 80088ac:	2301      	movs	r3, #1
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	461a      	mov	r2, r3
 80088b4:	920a      	str	r2, [sp, #40]	; 0x28
 80088b6:	e00b      	b.n	80088d0 <_dtoa_r+0x290>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e7f3      	b.n	80088a4 <_dtoa_r+0x264>
 80088bc:	2300      	movs	r3, #0
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c2:	445b      	add	r3, fp
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	3301      	adds	r3, #1
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	bfb8      	it	lt
 80088ce:	2301      	movlt	r3, #1
 80088d0:	69e0      	ldr	r0, [r4, #28]
 80088d2:	2100      	movs	r1, #0
 80088d4:	2204      	movs	r2, #4
 80088d6:	f102 0614 	add.w	r6, r2, #20
 80088da:	429e      	cmp	r6, r3
 80088dc:	d93d      	bls.n	800895a <_dtoa_r+0x31a>
 80088de:	6041      	str	r1, [r0, #4]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fd9f 	bl	8009424 <_Balloc>
 80088e6:	9000      	str	r0, [sp, #0]
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d139      	bne.n	8008960 <_dtoa_r+0x320>
 80088ec:	4b16      	ldr	r3, [pc, #88]	; (8008948 <_dtoa_r+0x308>)
 80088ee:	4602      	mov	r2, r0
 80088f0:	f240 11af 	movw	r1, #431	; 0x1af
 80088f4:	e6bd      	b.n	8008672 <_dtoa_r+0x32>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7e1      	b.n	80088be <_dtoa_r+0x27e>
 80088fa:	2501      	movs	r5, #1
 80088fc:	2300      	movs	r3, #0
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	9509      	str	r5, [sp, #36]	; 0x24
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	2200      	movs	r2, #0
 800890c:	2312      	movs	r3, #18
 800890e:	e7d1      	b.n	80088b4 <_dtoa_r+0x274>
 8008910:	636f4361 	.word	0x636f4361
 8008914:	3fd287a7 	.word	0x3fd287a7
 8008918:	8b60c8b3 	.word	0x8b60c8b3
 800891c:	3fc68a28 	.word	0x3fc68a28
 8008920:	509f79fb 	.word	0x509f79fb
 8008924:	3fd34413 	.word	0x3fd34413
 8008928:	0800dc8e 	.word	0x0800dc8e
 800892c:	0800dca5 	.word	0x0800dca5
 8008930:	7ff00000 	.word	0x7ff00000
 8008934:	0800dc8a 	.word	0x0800dc8a
 8008938:	0800dc81 	.word	0x0800dc81
 800893c:	0800dc59 	.word	0x0800dc59
 8008940:	3ff80000 	.word	0x3ff80000
 8008944:	0800dd90 	.word	0x0800dd90
 8008948:	0800dcfd 	.word	0x0800dcfd
 800894c:	2301      	movs	r3, #1
 800894e:	9309      	str	r3, [sp, #36]	; 0x24
 8008950:	e7d7      	b.n	8008902 <_dtoa_r+0x2c2>
 8008952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	e7ba      	b.n	80088d0 <_dtoa_r+0x290>
 800895a:	3101      	adds	r1, #1
 800895c:	0052      	lsls	r2, r2, #1
 800895e:	e7ba      	b.n	80088d6 <_dtoa_r+0x296>
 8008960:	69e3      	ldr	r3, [r4, #28]
 8008962:	9a00      	ldr	r2, [sp, #0]
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	2b0e      	cmp	r3, #14
 800896a:	f200 80a8 	bhi.w	8008abe <_dtoa_r+0x47e>
 800896e:	2d00      	cmp	r5, #0
 8008970:	f000 80a5 	beq.w	8008abe <_dtoa_r+0x47e>
 8008974:	f1bb 0f00 	cmp.w	fp, #0
 8008978:	dd38      	ble.n	80089ec <_dtoa_r+0x3ac>
 800897a:	4bc0      	ldr	r3, [pc, #768]	; (8008c7c <_dtoa_r+0x63c>)
 800897c:	f00b 020f 	and.w	r2, fp, #15
 8008980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800898c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008990:	d019      	beq.n	80089c6 <_dtoa_r+0x386>
 8008992:	4bbb      	ldr	r3, [pc, #748]	; (8008c80 <_dtoa_r+0x640>)
 8008994:	ec51 0b18 	vmov	r0, r1, d8
 8008998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800899c:	f7f7 ff56 	bl	800084c <__aeabi_ddiv>
 80089a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a4:	f008 080f 	and.w	r8, r8, #15
 80089a8:	2503      	movs	r5, #3
 80089aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c80 <_dtoa_r+0x640>
 80089ae:	f1b8 0f00 	cmp.w	r8, #0
 80089b2:	d10a      	bne.n	80089ca <_dtoa_r+0x38a>
 80089b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b8:	4632      	mov	r2, r6
 80089ba:	463b      	mov	r3, r7
 80089bc:	f7f7 ff46 	bl	800084c <__aeabi_ddiv>
 80089c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c4:	e02b      	b.n	8008a1e <_dtoa_r+0x3de>
 80089c6:	2502      	movs	r5, #2
 80089c8:	e7ef      	b.n	80089aa <_dtoa_r+0x36a>
 80089ca:	f018 0f01 	tst.w	r8, #1
 80089ce:	d008      	beq.n	80089e2 <_dtoa_r+0x3a2>
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089d8:	f7f7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80089dc:	3501      	adds	r5, #1
 80089de:	4606      	mov	r6, r0
 80089e0:	460f      	mov	r7, r1
 80089e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089e6:	f109 0908 	add.w	r9, r9, #8
 80089ea:	e7e0      	b.n	80089ae <_dtoa_r+0x36e>
 80089ec:	f000 809f 	beq.w	8008b2e <_dtoa_r+0x4ee>
 80089f0:	f1cb 0600 	rsb	r6, fp, #0
 80089f4:	4ba1      	ldr	r3, [pc, #644]	; (8008c7c <_dtoa_r+0x63c>)
 80089f6:	4fa2      	ldr	r7, [pc, #648]	; (8008c80 <_dtoa_r+0x640>)
 80089f8:	f006 020f 	and.w	r2, r6, #15
 80089fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	ec51 0b18 	vmov	r0, r1, d8
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a10:	1136      	asrs	r6, r6, #4
 8008a12:	2300      	movs	r3, #0
 8008a14:	2502      	movs	r5, #2
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	d17e      	bne.n	8008b18 <_dtoa_r+0x4d8>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1d0      	bne.n	80089c0 <_dtoa_r+0x380>
 8008a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8084 	beq.w	8008b32 <_dtoa_r+0x4f2>
 8008a2a:	4b96      	ldr	r3, [pc, #600]	; (8008c84 <_dtoa_r+0x644>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f8 f853 	bl	8000adc <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d07b      	beq.n	8008b32 <_dtoa_r+0x4f2>
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d078      	beq.n	8008b32 <_dtoa_r+0x4f2>
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd39      	ble.n	8008aba <_dtoa_r+0x47a>
 8008a46:	4b90      	ldr	r3, [pc, #576]	; (8008c88 <_dtoa_r+0x648>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a56:	9e01      	ldr	r6, [sp, #4]
 8008a58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a62:	4628      	mov	r0, r5
 8008a64:	f7f7 fd5e 	bl	8000524 <__aeabi_i2d>
 8008a68:	4642      	mov	r2, r8
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	4b86      	ldr	r3, [pc, #536]	; (8008c8c <_dtoa_r+0x64c>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	f7f7 fc0a 	bl	800028c <__adddf3>
 8008a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	d158      	bne.n	8008b38 <_dtoa_r+0x4f8>
 8008a86:	4b82      	ldr	r3, [pc, #520]	; (8008c90 <_dtoa_r+0x650>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a96:	4680      	mov	r8, r0
 8008a98:	4689      	mov	r9, r1
 8008a9a:	f7f8 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f040 8296 	bne.w	8008fd0 <_dtoa_r+0x990>
 8008aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aae:	4649      	mov	r1, r9
 8008ab0:	f7f8 f814 	bl	8000adc <__aeabi_dcmplt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f040 8289 	bne.w	8008fcc <_dtoa_r+0x98c>
 8008aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f2c0 814e 	blt.w	8008d62 <_dtoa_r+0x722>
 8008ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8008aca:	f300 814a 	bgt.w	8008d62 <_dtoa_r+0x722>
 8008ace:	4b6b      	ldr	r3, [pc, #428]	; (8008c7c <_dtoa_r+0x63c>)
 8008ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f280 80dc 	bge.w	8008c98 <_dtoa_r+0x658>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f300 80d8 	bgt.w	8008c98 <_dtoa_r+0x658>
 8008ae8:	f040 826f 	bne.w	8008fca <_dtoa_r+0x98a>
 8008aec:	4b68      	ldr	r3, [pc, #416]	; (8008c90 <_dtoa_r+0x650>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008afc:	f7f8 f802 	bl	8000b04 <__aeabi_dcmpge>
 8008b00:	9e04      	ldr	r6, [sp, #16]
 8008b02:	4637      	mov	r7, r6
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 8245 	bne.w	8008f94 <_dtoa_r+0x954>
 8008b0a:	9d00      	ldr	r5, [sp, #0]
 8008b0c:	2331      	movs	r3, #49	; 0x31
 8008b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8008b12:	f10b 0b01 	add.w	fp, fp, #1
 8008b16:	e241      	b.n	8008f9c <_dtoa_r+0x95c>
 8008b18:	07f2      	lsls	r2, r6, #31
 8008b1a:	d505      	bpl.n	8008b28 <_dtoa_r+0x4e8>
 8008b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b20:	f7f7 fd6a 	bl	80005f8 <__aeabi_dmul>
 8008b24:	3501      	adds	r5, #1
 8008b26:	2301      	movs	r3, #1
 8008b28:	1076      	asrs	r6, r6, #1
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	e773      	b.n	8008a16 <_dtoa_r+0x3d6>
 8008b2e:	2502      	movs	r5, #2
 8008b30:	e775      	b.n	8008a1e <_dtoa_r+0x3de>
 8008b32:	9e04      	ldr	r6, [sp, #16]
 8008b34:	465f      	mov	r7, fp
 8008b36:	e792      	b.n	8008a5e <_dtoa_r+0x41e>
 8008b38:	9900      	ldr	r1, [sp, #0]
 8008b3a:	4b50      	ldr	r3, [pc, #320]	; (8008c7c <_dtoa_r+0x63c>)
 8008b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b40:	4431      	add	r1, r6
 8008b42:	9102      	str	r1, [sp, #8]
 8008b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b46:	eeb0 9a47 	vmov.f32	s18, s14
 8008b4a:	eef0 9a67 	vmov.f32	s19, s15
 8008b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b56:	2900      	cmp	r1, #0
 8008b58:	d044      	beq.n	8008be4 <_dtoa_r+0x5a4>
 8008b5a:	494e      	ldr	r1, [pc, #312]	; (8008c94 <_dtoa_r+0x654>)
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7f7 fe75 	bl	800084c <__aeabi_ddiv>
 8008b62:	ec53 2b19 	vmov	r2, r3, d9
 8008b66:	f7f7 fb8f 	bl	8000288 <__aeabi_dsub>
 8008b6a:	9d00      	ldr	r5, [sp, #0]
 8008b6c:	ec41 0b19 	vmov	d9, r0, r1
 8008b70:	4649      	mov	r1, r9
 8008b72:	4640      	mov	r0, r8
 8008b74:	f7f7 fff0 	bl	8000b58 <__aeabi_d2iz>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	f7f7 fcd3 	bl	8000524 <__aeabi_i2d>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fb7f 	bl	8000288 <__aeabi_dsub>
 8008b8a:	3630      	adds	r6, #48	; 0x30
 8008b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b90:	ec53 2b19 	vmov	r2, r3, d9
 8008b94:	4680      	mov	r8, r0
 8008b96:	4689      	mov	r9, r1
 8008b98:	f7f7 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d164      	bne.n	8008c6a <_dtoa_r+0x62a>
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	4937      	ldr	r1, [pc, #220]	; (8008c84 <_dtoa_r+0x644>)
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f7f7 fb6e 	bl	8000288 <__aeabi_dsub>
 8008bac:	ec53 2b19 	vmov	r2, r3, d9
 8008bb0:	f7f7 ff94 	bl	8000adc <__aeabi_dcmplt>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f040 80b6 	bne.w	8008d26 <_dtoa_r+0x6e6>
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	429d      	cmp	r5, r3
 8008bbe:	f43f af7c 	beq.w	8008aba <_dtoa_r+0x47a>
 8008bc2:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <_dtoa_r+0x648>)
 8008bc4:	ec51 0b19 	vmov	r0, r1, d9
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	4b2e      	ldr	r3, [pc, #184]	; (8008c88 <_dtoa_r+0x648>)
 8008bd0:	ec41 0b19 	vmov	d9, r0, r1
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	4680      	mov	r8, r0
 8008be0:	4689      	mov	r9, r1
 8008be2:	e7c5      	b.n	8008b70 <_dtoa_r+0x530>
 8008be4:	ec51 0b17 	vmov	r0, r1, d7
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	9d00      	ldr	r5, [sp, #0]
 8008bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf2:	ec41 0b19 	vmov	d9, r0, r1
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	f7f7 ffad 	bl	8000b58 <__aeabi_d2iz>
 8008bfe:	4606      	mov	r6, r0
 8008c00:	f7f7 fc90 	bl	8000524 <__aeabi_i2d>
 8008c04:	3630      	adds	r6, #48	; 0x30
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	f7f7 fb3b 	bl	8000288 <__aeabi_dsub>
 8008c12:	f805 6b01 	strb.w	r6, [r5], #1
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	d124      	bne.n	8008c6e <_dtoa_r+0x62e>
 8008c24:	4b1b      	ldr	r3, [pc, #108]	; (8008c94 <_dtoa_r+0x654>)
 8008c26:	ec51 0b19 	vmov	r0, r1, d9
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d173      	bne.n	8008d26 <_dtoa_r+0x6e6>
 8008c3e:	ec53 2b19 	vmov	r2, r3, d9
 8008c42:	4914      	ldr	r1, [pc, #80]	; (8008c94 <_dtoa_r+0x654>)
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7f7 fb1f 	bl	8000288 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	f7f7 ff43 	bl	8000adc <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f43f af2f 	beq.w	8008aba <_dtoa_r+0x47a>
 8008c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c5e:	1e6b      	subs	r3, r5, #1
 8008c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c66:	2b30      	cmp	r3, #48	; 0x30
 8008c68:	d0f8      	beq.n	8008c5c <_dtoa_r+0x61c>
 8008c6a:	46bb      	mov	fp, r7
 8008c6c:	e04a      	b.n	8008d04 <_dtoa_r+0x6c4>
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <_dtoa_r+0x648>)
 8008c70:	f7f7 fcc2 	bl	80005f8 <__aeabi_dmul>
 8008c74:	4680      	mov	r8, r0
 8008c76:	4689      	mov	r9, r1
 8008c78:	e7bd      	b.n	8008bf6 <_dtoa_r+0x5b6>
 8008c7a:	bf00      	nop
 8008c7c:	0800dd90 	.word	0x0800dd90
 8008c80:	0800dd68 	.word	0x0800dd68
 8008c84:	3ff00000 	.word	0x3ff00000
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	401c0000 	.word	0x401c0000
 8008c90:	40140000 	.word	0x40140000
 8008c94:	3fe00000 	.word	0x3fe00000
 8008c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c9c:	9d00      	ldr	r5, [sp, #0]
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 fdd1 	bl	800084c <__aeabi_ddiv>
 8008caa:	f7f7 ff55 	bl	8000b58 <__aeabi_d2iz>
 8008cae:	9001      	str	r0, [sp, #4]
 8008cb0:	f7f7 fc38 	bl	8000524 <__aeabi_i2d>
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f7f7 fc9e 	bl	80005f8 <__aeabi_dmul>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fae0 	bl	8000288 <__aeabi_dsub>
 8008cc8:	9e01      	ldr	r6, [sp, #4]
 8008cca:	9f04      	ldr	r7, [sp, #16]
 8008ccc:	3630      	adds	r6, #48	; 0x30
 8008cce:	f805 6b01 	strb.w	r6, [r5], #1
 8008cd2:	9e00      	ldr	r6, [sp, #0]
 8008cd4:	1bae      	subs	r6, r5, r6
 8008cd6:	42b7      	cmp	r7, r6
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	d134      	bne.n	8008d48 <_dtoa_r+0x708>
 8008cde:	f7f7 fad5 	bl	800028c <__adddf3>
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	f7f7 ff15 	bl	8000b18 <__aeabi_dcmpgt>
 8008cee:	b9c8      	cbnz	r0, 8008d24 <_dtoa_r+0x6e4>
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cfc:	b110      	cbz	r0, 8008d04 <_dtoa_r+0x6c4>
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	07db      	lsls	r3, r3, #31
 8008d02:	d40f      	bmi.n	8008d24 <_dtoa_r+0x6e4>
 8008d04:	4651      	mov	r1, sl
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fbcc 	bl	80094a4 <_Bfree>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d10:	702b      	strb	r3, [r5, #0]
 8008d12:	f10b 0301 	add.w	r3, fp, #1
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f43f ace2 	beq.w	80086e4 <_dtoa_r+0xa4>
 8008d20:	601d      	str	r5, [r3, #0]
 8008d22:	e4df      	b.n	80086e4 <_dtoa_r+0xa4>
 8008d24:	465f      	mov	r7, fp
 8008d26:	462b      	mov	r3, r5
 8008d28:	461d      	mov	r5, r3
 8008d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d2e:	2a39      	cmp	r2, #57	; 0x39
 8008d30:	d106      	bne.n	8008d40 <_dtoa_r+0x700>
 8008d32:	9a00      	ldr	r2, [sp, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d1f7      	bne.n	8008d28 <_dtoa_r+0x6e8>
 8008d38:	9900      	ldr	r1, [sp, #0]
 8008d3a:	2230      	movs	r2, #48	; 0x30
 8008d3c:	3701      	adds	r7, #1
 8008d3e:	700a      	strb	r2, [r1, #0]
 8008d40:	781a      	ldrb	r2, [r3, #0]
 8008d42:	3201      	adds	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e790      	b.n	8008c6a <_dtoa_r+0x62a>
 8008d48:	4ba3      	ldr	r3, [pc, #652]	; (8008fd8 <_dtoa_r+0x998>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f7f7 fc54 	bl	80005f8 <__aeabi_dmul>
 8008d50:	2200      	movs	r2, #0
 8008d52:	2300      	movs	r3, #0
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	f7f7 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d09e      	beq.n	8008c9e <_dtoa_r+0x65e>
 8008d60:	e7d0      	b.n	8008d04 <_dtoa_r+0x6c4>
 8008d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d64:	2a00      	cmp	r2, #0
 8008d66:	f000 80ca 	beq.w	8008efe <_dtoa_r+0x8be>
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	2a01      	cmp	r2, #1
 8008d6e:	f300 80ad 	bgt.w	8008ecc <_dtoa_r+0x88c>
 8008d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	f000 80a5 	beq.w	8008ec4 <_dtoa_r+0x884>
 8008d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d7e:	9e08      	ldr	r6, [sp, #32]
 8008d80:	9d05      	ldr	r5, [sp, #20]
 8008d82:	9a05      	ldr	r2, [sp, #20]
 8008d84:	441a      	add	r2, r3
 8008d86:	9205      	str	r2, [sp, #20]
 8008d88:	9a06      	ldr	r2, [sp, #24]
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	441a      	add	r2, r3
 8008d8e:	4620      	mov	r0, r4
 8008d90:	9206      	str	r2, [sp, #24]
 8008d92:	f000 fc87 	bl	80096a4 <__i2b>
 8008d96:	4607      	mov	r7, r0
 8008d98:	b165      	cbz	r5, 8008db4 <_dtoa_r+0x774>
 8008d9a:	9b06      	ldr	r3, [sp, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dd09      	ble.n	8008db4 <_dtoa_r+0x774>
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	9a05      	ldr	r2, [sp, #20]
 8008da4:	bfa8      	it	ge
 8008da6:	462b      	movge	r3, r5
 8008da8:	1ad2      	subs	r2, r2, r3
 8008daa:	9205      	str	r2, [sp, #20]
 8008dac:	9a06      	ldr	r2, [sp, #24]
 8008dae:	1aed      	subs	r5, r5, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	9306      	str	r3, [sp, #24]
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	b1f3      	cbz	r3, 8008df6 <_dtoa_r+0x7b6>
 8008db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 80a3 	beq.w	8008f06 <_dtoa_r+0x8c6>
 8008dc0:	2e00      	cmp	r6, #0
 8008dc2:	dd10      	ble.n	8008de6 <_dtoa_r+0x7a6>
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fd2b 	bl	8009824 <__pow5mult>
 8008dce:	4652      	mov	r2, sl
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fc7b 	bl	80096d0 <__multiply>
 8008dda:	4651      	mov	r1, sl
 8008ddc:	4680      	mov	r8, r0
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 fb60 	bl	80094a4 <_Bfree>
 8008de4:	46c2      	mov	sl, r8
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	1b9a      	subs	r2, r3, r6
 8008dea:	d004      	beq.n	8008df6 <_dtoa_r+0x7b6>
 8008dec:	4651      	mov	r1, sl
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fd18 	bl	8009824 <__pow5mult>
 8008df4:	4682      	mov	sl, r0
 8008df6:	2101      	movs	r1, #1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fc53 	bl	80096a4 <__i2b>
 8008dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	4606      	mov	r6, r0
 8008e04:	f340 8081 	ble.w	8008f0a <_dtoa_r+0x8ca>
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fd09 	bl	8009824 <__pow5mult>
 8008e12:	9b07      	ldr	r3, [sp, #28]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	4606      	mov	r6, r0
 8008e18:	dd7a      	ble.n	8008f10 <_dtoa_r+0x8d0>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	6933      	ldr	r3, [r6, #16]
 8008e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e24:	6918      	ldr	r0, [r3, #16]
 8008e26:	f000 fbef 	bl	8009608 <__hi0bits>
 8008e2a:	f1c0 0020 	rsb	r0, r0, #32
 8008e2e:	9b06      	ldr	r3, [sp, #24]
 8008e30:	4418      	add	r0, r3
 8008e32:	f010 001f 	ands.w	r0, r0, #31
 8008e36:	f000 8094 	beq.w	8008f62 <_dtoa_r+0x922>
 8008e3a:	f1c0 0320 	rsb	r3, r0, #32
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	f340 8085 	ble.w	8008f4e <_dtoa_r+0x90e>
 8008e44:	9b05      	ldr	r3, [sp, #20]
 8008e46:	f1c0 001c 	rsb	r0, r0, #28
 8008e4a:	4403      	add	r3, r0
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	9b06      	ldr	r3, [sp, #24]
 8008e50:	4403      	add	r3, r0
 8008e52:	4405      	add	r5, r0
 8008e54:	9306      	str	r3, [sp, #24]
 8008e56:	9b05      	ldr	r3, [sp, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dd05      	ble.n	8008e68 <_dtoa_r+0x828>
 8008e5c:	4651      	mov	r1, sl
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 fd39 	bl	80098d8 <__lshift>
 8008e66:	4682      	mov	sl, r0
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dd05      	ble.n	8008e7a <_dtoa_r+0x83a>
 8008e6e:	4631      	mov	r1, r6
 8008e70:	461a      	mov	r2, r3
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fd30 	bl	80098d8 <__lshift>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d072      	beq.n	8008f66 <_dtoa_r+0x926>
 8008e80:	4631      	mov	r1, r6
 8008e82:	4650      	mov	r0, sl
 8008e84:	f000 fd94 	bl	80099b0 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	da6c      	bge.n	8008f66 <_dtoa_r+0x926>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4651      	mov	r1, sl
 8008e90:	220a      	movs	r2, #10
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fb28 	bl	80094e8 <__multadd>
 8008e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e9e:	4682      	mov	sl, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 81b0 	beq.w	8009206 <_dtoa_r+0xbc6>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	220a      	movs	r2, #10
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 fb1b 	bl	80094e8 <__multadd>
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f300 8096 	bgt.w	8008fe8 <_dtoa_r+0x9a8>
 8008ebc:	9b07      	ldr	r3, [sp, #28]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dc59      	bgt.n	8008f76 <_dtoa_r+0x936>
 8008ec2:	e091      	b.n	8008fe8 <_dtoa_r+0x9a8>
 8008ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008eca:	e758      	b.n	8008d7e <_dtoa_r+0x73e>
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	1e5e      	subs	r6, r3, #1
 8008ed0:	9b08      	ldr	r3, [sp, #32]
 8008ed2:	42b3      	cmp	r3, r6
 8008ed4:	bfbf      	itttt	lt
 8008ed6:	9b08      	ldrlt	r3, [sp, #32]
 8008ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008eda:	9608      	strlt	r6, [sp, #32]
 8008edc:	1af3      	sublt	r3, r6, r3
 8008ede:	bfb4      	ite	lt
 8008ee0:	18d2      	addlt	r2, r2, r3
 8008ee2:	1b9e      	subge	r6, r3, r6
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	bfbc      	itt	lt
 8008ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008eea:	2600      	movlt	r6, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfb7      	itett	lt
 8008ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ef8:	1a9d      	sublt	r5, r3, r2
 8008efa:	2300      	movlt	r3, #0
 8008efc:	e741      	b.n	8008d82 <_dtoa_r+0x742>
 8008efe:	9e08      	ldr	r6, [sp, #32]
 8008f00:	9d05      	ldr	r5, [sp, #20]
 8008f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f04:	e748      	b.n	8008d98 <_dtoa_r+0x758>
 8008f06:	9a08      	ldr	r2, [sp, #32]
 8008f08:	e770      	b.n	8008dec <_dtoa_r+0x7ac>
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	dc19      	bgt.n	8008f44 <_dtoa_r+0x904>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	b9bb      	cbnz	r3, 8008f44 <_dtoa_r+0x904>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f1a:	b99b      	cbnz	r3, 8008f44 <_dtoa_r+0x904>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f22:	0d1b      	lsrs	r3, r3, #20
 8008f24:	051b      	lsls	r3, r3, #20
 8008f26:	b183      	cbz	r3, 8008f4a <_dtoa_r+0x90a>
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	9b06      	ldr	r3, [sp, #24]
 8008f30:	3301      	adds	r3, #1
 8008f32:	9306      	str	r3, [sp, #24]
 8008f34:	f04f 0801 	mov.w	r8, #1
 8008f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f47f af6f 	bne.w	8008e1e <_dtoa_r+0x7de>
 8008f40:	2001      	movs	r0, #1
 8008f42:	e774      	b.n	8008e2e <_dtoa_r+0x7ee>
 8008f44:	f04f 0800 	mov.w	r8, #0
 8008f48:	e7f6      	b.n	8008f38 <_dtoa_r+0x8f8>
 8008f4a:	4698      	mov	r8, r3
 8008f4c:	e7f4      	b.n	8008f38 <_dtoa_r+0x8f8>
 8008f4e:	d082      	beq.n	8008e56 <_dtoa_r+0x816>
 8008f50:	9a05      	ldr	r2, [sp, #20]
 8008f52:	331c      	adds	r3, #28
 8008f54:	441a      	add	r2, r3
 8008f56:	9205      	str	r2, [sp, #20]
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	441a      	add	r2, r3
 8008f5c:	441d      	add	r5, r3
 8008f5e:	9206      	str	r2, [sp, #24]
 8008f60:	e779      	b.n	8008e56 <_dtoa_r+0x816>
 8008f62:	4603      	mov	r3, r0
 8008f64:	e7f4      	b.n	8008f50 <_dtoa_r+0x910>
 8008f66:	9b04      	ldr	r3, [sp, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc37      	bgt.n	8008fdc <_dtoa_r+0x99c>
 8008f6c:	9b07      	ldr	r3, [sp, #28]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	dd34      	ble.n	8008fdc <_dtoa_r+0x99c>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	b963      	cbnz	r3, 8008f94 <_dtoa_r+0x954>
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	2205      	movs	r2, #5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 fab2 	bl	80094e8 <__multadd>
 8008f84:	4601      	mov	r1, r0
 8008f86:	4606      	mov	r6, r0
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f000 fd11 	bl	80099b0 <__mcmp>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f73f adbb 	bgt.w	8008b0a <_dtoa_r+0x4ca>
 8008f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f96:	9d00      	ldr	r5, [sp, #0]
 8008f98:	ea6f 0b03 	mvn.w	fp, r3
 8008f9c:	f04f 0800 	mov.w	r8, #0
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fa7e 	bl	80094a4 <_Bfree>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	f43f aeab 	beq.w	8008d04 <_dtoa_r+0x6c4>
 8008fae:	f1b8 0f00 	cmp.w	r8, #0
 8008fb2:	d005      	beq.n	8008fc0 <_dtoa_r+0x980>
 8008fb4:	45b8      	cmp	r8, r7
 8008fb6:	d003      	beq.n	8008fc0 <_dtoa_r+0x980>
 8008fb8:	4641      	mov	r1, r8
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 fa72 	bl	80094a4 <_Bfree>
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fa6e 	bl	80094a4 <_Bfree>
 8008fc8:	e69c      	b.n	8008d04 <_dtoa_r+0x6c4>
 8008fca:	2600      	movs	r6, #0
 8008fcc:	4637      	mov	r7, r6
 8008fce:	e7e1      	b.n	8008f94 <_dtoa_r+0x954>
 8008fd0:	46bb      	mov	fp, r7
 8008fd2:	4637      	mov	r7, r6
 8008fd4:	e599      	b.n	8008b0a <_dtoa_r+0x4ca>
 8008fd6:	bf00      	nop
 8008fd8:	40240000 	.word	0x40240000
 8008fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80c8 	beq.w	8009174 <_dtoa_r+0xb34>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	2d00      	cmp	r5, #0
 8008fea:	dd05      	ble.n	8008ff8 <_dtoa_r+0x9b8>
 8008fec:	4639      	mov	r1, r7
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fc71 	bl	80098d8 <__lshift>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	f1b8 0f00 	cmp.w	r8, #0
 8008ffc:	d05b      	beq.n	80090b6 <_dtoa_r+0xa76>
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fa0f 	bl	8009424 <_Balloc>
 8009006:	4605      	mov	r5, r0
 8009008:	b928      	cbnz	r0, 8009016 <_dtoa_r+0x9d6>
 800900a:	4b83      	ldr	r3, [pc, #524]	; (8009218 <_dtoa_r+0xbd8>)
 800900c:	4602      	mov	r2, r0
 800900e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009012:	f7ff bb2e 	b.w	8008672 <_dtoa_r+0x32>
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	3202      	adds	r2, #2
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	f107 010c 	add.w	r1, r7, #12
 8009020:	300c      	adds	r0, #12
 8009022:	f7ff fa70 	bl	8008506 <memcpy>
 8009026:	2201      	movs	r2, #1
 8009028:	4629      	mov	r1, r5
 800902a:	4620      	mov	r0, r4
 800902c:	f000 fc54 	bl	80098d8 <__lshift>
 8009030:	9b00      	ldr	r3, [sp, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800903a:	4413      	add	r3, r2
 800903c:	9308      	str	r3, [sp, #32]
 800903e:	9b02      	ldr	r3, [sp, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	46b8      	mov	r8, r7
 8009046:	9306      	str	r3, [sp, #24]
 8009048:	4607      	mov	r7, r0
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	4631      	mov	r1, r6
 800904e:	3b01      	subs	r3, #1
 8009050:	4650      	mov	r0, sl
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	f7ff fa6c 	bl	8008530 <quorem>
 8009058:	4641      	mov	r1, r8
 800905a:	9002      	str	r0, [sp, #8]
 800905c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009060:	4650      	mov	r0, sl
 8009062:	f000 fca5 	bl	80099b0 <__mcmp>
 8009066:	463a      	mov	r2, r7
 8009068:	9005      	str	r0, [sp, #20]
 800906a:	4631      	mov	r1, r6
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fcbb 	bl	80099e8 <__mdiff>
 8009072:	68c2      	ldr	r2, [r0, #12]
 8009074:	4605      	mov	r5, r0
 8009076:	bb02      	cbnz	r2, 80090ba <_dtoa_r+0xa7a>
 8009078:	4601      	mov	r1, r0
 800907a:	4650      	mov	r0, sl
 800907c:	f000 fc98 	bl	80099b0 <__mcmp>
 8009080:	4602      	mov	r2, r0
 8009082:	4629      	mov	r1, r5
 8009084:	4620      	mov	r0, r4
 8009086:	9209      	str	r2, [sp, #36]	; 0x24
 8009088:	f000 fa0c 	bl	80094a4 <_Bfree>
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009090:	9d04      	ldr	r5, [sp, #16]
 8009092:	ea43 0102 	orr.w	r1, r3, r2
 8009096:	9b06      	ldr	r3, [sp, #24]
 8009098:	4319      	orrs	r1, r3
 800909a:	d110      	bne.n	80090be <_dtoa_r+0xa7e>
 800909c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090a0:	d029      	beq.n	80090f6 <_dtoa_r+0xab6>
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd02      	ble.n	80090ae <_dtoa_r+0xa6e>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	f883 9000 	strb.w	r9, [r3]
 80090b4:	e774      	b.n	8008fa0 <_dtoa_r+0x960>
 80090b6:	4638      	mov	r0, r7
 80090b8:	e7ba      	b.n	8009030 <_dtoa_r+0x9f0>
 80090ba:	2201      	movs	r2, #1
 80090bc:	e7e1      	b.n	8009082 <_dtoa_r+0xa42>
 80090be:	9b05      	ldr	r3, [sp, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	db04      	blt.n	80090ce <_dtoa_r+0xa8e>
 80090c4:	9907      	ldr	r1, [sp, #28]
 80090c6:	430b      	orrs	r3, r1
 80090c8:	9906      	ldr	r1, [sp, #24]
 80090ca:	430b      	orrs	r3, r1
 80090cc:	d120      	bne.n	8009110 <_dtoa_r+0xad0>
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	dded      	ble.n	80090ae <_dtoa_r+0xa6e>
 80090d2:	4651      	mov	r1, sl
 80090d4:	2201      	movs	r2, #1
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fbfe 	bl	80098d8 <__lshift>
 80090dc:	4631      	mov	r1, r6
 80090de:	4682      	mov	sl, r0
 80090e0:	f000 fc66 	bl	80099b0 <__mcmp>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	dc03      	bgt.n	80090f0 <_dtoa_r+0xab0>
 80090e8:	d1e1      	bne.n	80090ae <_dtoa_r+0xa6e>
 80090ea:	f019 0f01 	tst.w	r9, #1
 80090ee:	d0de      	beq.n	80090ae <_dtoa_r+0xa6e>
 80090f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090f4:	d1d8      	bne.n	80090a8 <_dtoa_r+0xa68>
 80090f6:	9a01      	ldr	r2, [sp, #4]
 80090f8:	2339      	movs	r3, #57	; 0x39
 80090fa:	7013      	strb	r3, [r2, #0]
 80090fc:	462b      	mov	r3, r5
 80090fe:	461d      	mov	r5, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009106:	2a39      	cmp	r2, #57	; 0x39
 8009108:	d06c      	beq.n	80091e4 <_dtoa_r+0xba4>
 800910a:	3201      	adds	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e747      	b.n	8008fa0 <_dtoa_r+0x960>
 8009110:	2a00      	cmp	r2, #0
 8009112:	dd07      	ble.n	8009124 <_dtoa_r+0xae4>
 8009114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009118:	d0ed      	beq.n	80090f6 <_dtoa_r+0xab6>
 800911a:	9a01      	ldr	r2, [sp, #4]
 800911c:	f109 0301 	add.w	r3, r9, #1
 8009120:	7013      	strb	r3, [r2, #0]
 8009122:	e73d      	b.n	8008fa0 <_dtoa_r+0x960>
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	9a08      	ldr	r2, [sp, #32]
 8009128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800912c:	4293      	cmp	r3, r2
 800912e:	d043      	beq.n	80091b8 <_dtoa_r+0xb78>
 8009130:	4651      	mov	r1, sl
 8009132:	2300      	movs	r3, #0
 8009134:	220a      	movs	r2, #10
 8009136:	4620      	mov	r0, r4
 8009138:	f000 f9d6 	bl	80094e8 <__multadd>
 800913c:	45b8      	cmp	r8, r7
 800913e:	4682      	mov	sl, r0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	f04f 020a 	mov.w	r2, #10
 8009148:	4641      	mov	r1, r8
 800914a:	4620      	mov	r0, r4
 800914c:	d107      	bne.n	800915e <_dtoa_r+0xb1e>
 800914e:	f000 f9cb 	bl	80094e8 <__multadd>
 8009152:	4680      	mov	r8, r0
 8009154:	4607      	mov	r7, r0
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	3301      	adds	r3, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	e775      	b.n	800904a <_dtoa_r+0xa0a>
 800915e:	f000 f9c3 	bl	80094e8 <__multadd>
 8009162:	4639      	mov	r1, r7
 8009164:	4680      	mov	r8, r0
 8009166:	2300      	movs	r3, #0
 8009168:	220a      	movs	r2, #10
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f9bc 	bl	80094e8 <__multadd>
 8009170:	4607      	mov	r7, r0
 8009172:	e7f0      	b.n	8009156 <_dtoa_r+0xb16>
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	9d00      	ldr	r5, [sp, #0]
 800917a:	4631      	mov	r1, r6
 800917c:	4650      	mov	r0, sl
 800917e:	f7ff f9d7 	bl	8008530 <quorem>
 8009182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	f805 9b01 	strb.w	r9, [r5], #1
 800918c:	1aea      	subs	r2, r5, r3
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	4293      	cmp	r3, r2
 8009192:	dd07      	ble.n	80091a4 <_dtoa_r+0xb64>
 8009194:	4651      	mov	r1, sl
 8009196:	2300      	movs	r3, #0
 8009198:	220a      	movs	r2, #10
 800919a:	4620      	mov	r0, r4
 800919c:	f000 f9a4 	bl	80094e8 <__multadd>
 80091a0:	4682      	mov	sl, r0
 80091a2:	e7ea      	b.n	800917a <_dtoa_r+0xb3a>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfc8      	it	gt
 80091aa:	461d      	movgt	r5, r3
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	bfd8      	it	le
 80091b0:	2501      	movle	r5, #1
 80091b2:	441d      	add	r5, r3
 80091b4:	f04f 0800 	mov.w	r8, #0
 80091b8:	4651      	mov	r1, sl
 80091ba:	2201      	movs	r2, #1
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fb8b 	bl	80098d8 <__lshift>
 80091c2:	4631      	mov	r1, r6
 80091c4:	4682      	mov	sl, r0
 80091c6:	f000 fbf3 	bl	80099b0 <__mcmp>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	dc96      	bgt.n	80090fc <_dtoa_r+0xabc>
 80091ce:	d102      	bne.n	80091d6 <_dtoa_r+0xb96>
 80091d0:	f019 0f01 	tst.w	r9, #1
 80091d4:	d192      	bne.n	80090fc <_dtoa_r+0xabc>
 80091d6:	462b      	mov	r3, r5
 80091d8:	461d      	mov	r5, r3
 80091da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091de:	2a30      	cmp	r2, #48	; 0x30
 80091e0:	d0fa      	beq.n	80091d8 <_dtoa_r+0xb98>
 80091e2:	e6dd      	b.n	8008fa0 <_dtoa_r+0x960>
 80091e4:	9a00      	ldr	r2, [sp, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d189      	bne.n	80090fe <_dtoa_r+0xabe>
 80091ea:	f10b 0b01 	add.w	fp, fp, #1
 80091ee:	2331      	movs	r3, #49	; 0x31
 80091f0:	e796      	b.n	8009120 <_dtoa_r+0xae0>
 80091f2:	4b0a      	ldr	r3, [pc, #40]	; (800921c <_dtoa_r+0xbdc>)
 80091f4:	f7ff ba99 	b.w	800872a <_dtoa_r+0xea>
 80091f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f47f aa6d 	bne.w	80086da <_dtoa_r+0x9a>
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <_dtoa_r+0xbe0>)
 8009202:	f7ff ba92 	b.w	800872a <_dtoa_r+0xea>
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dcb5      	bgt.n	8009178 <_dtoa_r+0xb38>
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	2b02      	cmp	r3, #2
 8009210:	f73f aeb1 	bgt.w	8008f76 <_dtoa_r+0x936>
 8009214:	e7b0      	b.n	8009178 <_dtoa_r+0xb38>
 8009216:	bf00      	nop
 8009218:	0800dcfd 	.word	0x0800dcfd
 800921c:	0800dc58 	.word	0x0800dc58
 8009220:	0800dc81 	.word	0x0800dc81

08009224 <_free_r>:
 8009224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009226:	2900      	cmp	r1, #0
 8009228:	d044      	beq.n	80092b4 <_free_r+0x90>
 800922a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922e:	9001      	str	r0, [sp, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f1a1 0404 	sub.w	r4, r1, #4
 8009236:	bfb8      	it	lt
 8009238:	18e4      	addlt	r4, r4, r3
 800923a:	f000 f8e7 	bl	800940c <__malloc_lock>
 800923e:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <_free_r+0x94>)
 8009240:	9801      	ldr	r0, [sp, #4]
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	b933      	cbnz	r3, 8009254 <_free_r+0x30>
 8009246:	6063      	str	r3, [r4, #4]
 8009248:	6014      	str	r4, [r2, #0]
 800924a:	b003      	add	sp, #12
 800924c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009250:	f000 b8e2 	b.w	8009418 <__malloc_unlock>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d908      	bls.n	800926a <_free_r+0x46>
 8009258:	6825      	ldr	r5, [r4, #0]
 800925a:	1961      	adds	r1, r4, r5
 800925c:	428b      	cmp	r3, r1
 800925e:	bf01      	itttt	eq
 8009260:	6819      	ldreq	r1, [r3, #0]
 8009262:	685b      	ldreq	r3, [r3, #4]
 8009264:	1949      	addeq	r1, r1, r5
 8009266:	6021      	streq	r1, [r4, #0]
 8009268:	e7ed      	b.n	8009246 <_free_r+0x22>
 800926a:	461a      	mov	r2, r3
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	b10b      	cbz	r3, 8009274 <_free_r+0x50>
 8009270:	42a3      	cmp	r3, r4
 8009272:	d9fa      	bls.n	800926a <_free_r+0x46>
 8009274:	6811      	ldr	r1, [r2, #0]
 8009276:	1855      	adds	r5, r2, r1
 8009278:	42a5      	cmp	r5, r4
 800927a:	d10b      	bne.n	8009294 <_free_r+0x70>
 800927c:	6824      	ldr	r4, [r4, #0]
 800927e:	4421      	add	r1, r4
 8009280:	1854      	adds	r4, r2, r1
 8009282:	42a3      	cmp	r3, r4
 8009284:	6011      	str	r1, [r2, #0]
 8009286:	d1e0      	bne.n	800924a <_free_r+0x26>
 8009288:	681c      	ldr	r4, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	6053      	str	r3, [r2, #4]
 800928e:	440c      	add	r4, r1
 8009290:	6014      	str	r4, [r2, #0]
 8009292:	e7da      	b.n	800924a <_free_r+0x26>
 8009294:	d902      	bls.n	800929c <_free_r+0x78>
 8009296:	230c      	movs	r3, #12
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	e7d6      	b.n	800924a <_free_r+0x26>
 800929c:	6825      	ldr	r5, [r4, #0]
 800929e:	1961      	adds	r1, r4, r5
 80092a0:	428b      	cmp	r3, r1
 80092a2:	bf04      	itt	eq
 80092a4:	6819      	ldreq	r1, [r3, #0]
 80092a6:	685b      	ldreq	r3, [r3, #4]
 80092a8:	6063      	str	r3, [r4, #4]
 80092aa:	bf04      	itt	eq
 80092ac:	1949      	addeq	r1, r1, r5
 80092ae:	6021      	streq	r1, [r4, #0]
 80092b0:	6054      	str	r4, [r2, #4]
 80092b2:	e7ca      	b.n	800924a <_free_r+0x26>
 80092b4:	b003      	add	sp, #12
 80092b6:	bd30      	pop	{r4, r5, pc}
 80092b8:	20000f18 	.word	0x20000f18

080092bc <malloc>:
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <malloc+0xc>)
 80092be:	4601      	mov	r1, r0
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	f000 b823 	b.w	800930c <_malloc_r>
 80092c6:	bf00      	nop
 80092c8:	20000094 	.word	0x20000094

080092cc <sbrk_aligned>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4e0e      	ldr	r6, [pc, #56]	; (8009308 <sbrk_aligned+0x3c>)
 80092d0:	460c      	mov	r4, r1
 80092d2:	6831      	ldr	r1, [r6, #0]
 80092d4:	4605      	mov	r5, r0
 80092d6:	b911      	cbnz	r1, 80092de <sbrk_aligned+0x12>
 80092d8:	f001 fff4 	bl	800b2c4 <_sbrk_r>
 80092dc:	6030      	str	r0, [r6, #0]
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f001 ffef 	bl	800b2c4 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d00a      	beq.n	8009300 <sbrk_aligned+0x34>
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d007      	beq.n	8009304 <sbrk_aligned+0x38>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f001 ffe4 	bl	800b2c4 <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d101      	bne.n	8009304 <sbrk_aligned+0x38>
 8009300:	f04f 34ff 	mov.w	r4, #4294967295
 8009304:	4620      	mov	r0, r4
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	20000f1c 	.word	0x20000f1c

0800930c <_malloc_r>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	1ccd      	adds	r5, r1, #3
 8009312:	f025 0503 	bic.w	r5, r5, #3
 8009316:	3508      	adds	r5, #8
 8009318:	2d0c      	cmp	r5, #12
 800931a:	bf38      	it	cc
 800931c:	250c      	movcc	r5, #12
 800931e:	2d00      	cmp	r5, #0
 8009320:	4607      	mov	r7, r0
 8009322:	db01      	blt.n	8009328 <_malloc_r+0x1c>
 8009324:	42a9      	cmp	r1, r5
 8009326:	d905      	bls.n	8009334 <_malloc_r+0x28>
 8009328:	230c      	movs	r3, #12
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	2600      	movs	r6, #0
 800932e:	4630      	mov	r0, r6
 8009330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009408 <_malloc_r+0xfc>
 8009338:	f000 f868 	bl	800940c <__malloc_lock>
 800933c:	f8d8 3000 	ldr.w	r3, [r8]
 8009340:	461c      	mov	r4, r3
 8009342:	bb5c      	cbnz	r4, 800939c <_malloc_r+0x90>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	f7ff ffc0 	bl	80092cc <sbrk_aligned>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	4604      	mov	r4, r0
 8009350:	d155      	bne.n	80093fe <_malloc_r+0xf2>
 8009352:	f8d8 4000 	ldr.w	r4, [r8]
 8009356:	4626      	mov	r6, r4
 8009358:	2e00      	cmp	r6, #0
 800935a:	d145      	bne.n	80093e8 <_malloc_r+0xdc>
 800935c:	2c00      	cmp	r4, #0
 800935e:	d048      	beq.n	80093f2 <_malloc_r+0xe6>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	4631      	mov	r1, r6
 8009364:	4638      	mov	r0, r7
 8009366:	eb04 0903 	add.w	r9, r4, r3
 800936a:	f001 ffab 	bl	800b2c4 <_sbrk_r>
 800936e:	4581      	cmp	r9, r0
 8009370:	d13f      	bne.n	80093f2 <_malloc_r+0xe6>
 8009372:	6821      	ldr	r1, [r4, #0]
 8009374:	1a6d      	subs	r5, r5, r1
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ffa7 	bl	80092cc <sbrk_aligned>
 800937e:	3001      	adds	r0, #1
 8009380:	d037      	beq.n	80093f2 <_malloc_r+0xe6>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	442b      	add	r3, r5
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	f8d8 3000 	ldr.w	r3, [r8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d038      	beq.n	8009402 <_malloc_r+0xf6>
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	42a2      	cmp	r2, r4
 8009394:	d12b      	bne.n	80093ee <_malloc_r+0xe2>
 8009396:	2200      	movs	r2, #0
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	e00f      	b.n	80093bc <_malloc_r+0xb0>
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	1b52      	subs	r2, r2, r5
 80093a0:	d41f      	bmi.n	80093e2 <_malloc_r+0xd6>
 80093a2:	2a0b      	cmp	r2, #11
 80093a4:	d917      	bls.n	80093d6 <_malloc_r+0xca>
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	6025      	str	r5, [r4, #0]
 80093ac:	bf18      	it	ne
 80093ae:	6059      	strne	r1, [r3, #4]
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	bf08      	it	eq
 80093b4:	f8c8 1000 	streq.w	r1, [r8]
 80093b8:	5162      	str	r2, [r4, r5]
 80093ba:	604b      	str	r3, [r1, #4]
 80093bc:	4638      	mov	r0, r7
 80093be:	f104 060b 	add.w	r6, r4, #11
 80093c2:	f000 f829 	bl	8009418 <__malloc_unlock>
 80093c6:	f026 0607 	bic.w	r6, r6, #7
 80093ca:	1d23      	adds	r3, r4, #4
 80093cc:	1af2      	subs	r2, r6, r3
 80093ce:	d0ae      	beq.n	800932e <_malloc_r+0x22>
 80093d0:	1b9b      	subs	r3, r3, r6
 80093d2:	50a3      	str	r3, [r4, r2]
 80093d4:	e7ab      	b.n	800932e <_malloc_r+0x22>
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	6862      	ldr	r2, [r4, #4]
 80093da:	d1dd      	bne.n	8009398 <_malloc_r+0x8c>
 80093dc:	f8c8 2000 	str.w	r2, [r8]
 80093e0:	e7ec      	b.n	80093bc <_malloc_r+0xb0>
 80093e2:	4623      	mov	r3, r4
 80093e4:	6864      	ldr	r4, [r4, #4]
 80093e6:	e7ac      	b.n	8009342 <_malloc_r+0x36>
 80093e8:	4634      	mov	r4, r6
 80093ea:	6876      	ldr	r6, [r6, #4]
 80093ec:	e7b4      	b.n	8009358 <_malloc_r+0x4c>
 80093ee:	4613      	mov	r3, r2
 80093f0:	e7cc      	b.n	800938c <_malloc_r+0x80>
 80093f2:	230c      	movs	r3, #12
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4638      	mov	r0, r7
 80093f8:	f000 f80e 	bl	8009418 <__malloc_unlock>
 80093fc:	e797      	b.n	800932e <_malloc_r+0x22>
 80093fe:	6025      	str	r5, [r4, #0]
 8009400:	e7dc      	b.n	80093bc <_malloc_r+0xb0>
 8009402:	605b      	str	r3, [r3, #4]
 8009404:	deff      	udf	#255	; 0xff
 8009406:	bf00      	nop
 8009408:	20000f18 	.word	0x20000f18

0800940c <__malloc_lock>:
 800940c:	4801      	ldr	r0, [pc, #4]	; (8009414 <__malloc_lock+0x8>)
 800940e:	f7ff b878 	b.w	8008502 <__retarget_lock_acquire_recursive>
 8009412:	bf00      	nop
 8009414:	20000f14 	.word	0x20000f14

08009418 <__malloc_unlock>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__malloc_unlock+0x8>)
 800941a:	f7ff b873 	b.w	8008504 <__retarget_lock_release_recursive>
 800941e:	bf00      	nop
 8009420:	20000f14 	.word	0x20000f14

08009424 <_Balloc>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	69c6      	ldr	r6, [r0, #28]
 8009428:	4604      	mov	r4, r0
 800942a:	460d      	mov	r5, r1
 800942c:	b976      	cbnz	r6, 800944c <_Balloc+0x28>
 800942e:	2010      	movs	r0, #16
 8009430:	f7ff ff44 	bl	80092bc <malloc>
 8009434:	4602      	mov	r2, r0
 8009436:	61e0      	str	r0, [r4, #28]
 8009438:	b920      	cbnz	r0, 8009444 <_Balloc+0x20>
 800943a:	4b18      	ldr	r3, [pc, #96]	; (800949c <_Balloc+0x78>)
 800943c:	4818      	ldr	r0, [pc, #96]	; (80094a0 <_Balloc+0x7c>)
 800943e:	216b      	movs	r1, #107	; 0x6b
 8009440:	f001 ff5a 	bl	800b2f8 <__assert_func>
 8009444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009448:	6006      	str	r6, [r0, #0]
 800944a:	60c6      	str	r6, [r0, #12]
 800944c:	69e6      	ldr	r6, [r4, #28]
 800944e:	68f3      	ldr	r3, [r6, #12]
 8009450:	b183      	cbz	r3, 8009474 <_Balloc+0x50>
 8009452:	69e3      	ldr	r3, [r4, #28]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800945a:	b9b8      	cbnz	r0, 800948c <_Balloc+0x68>
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f605 	lsl.w	r6, r1, r5
 8009462:	1d72      	adds	r2, r6, #5
 8009464:	0092      	lsls	r2, r2, #2
 8009466:	4620      	mov	r0, r4
 8009468:	f001 ff64 	bl	800b334 <_calloc_r>
 800946c:	b160      	cbz	r0, 8009488 <_Balloc+0x64>
 800946e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009472:	e00e      	b.n	8009492 <_Balloc+0x6e>
 8009474:	2221      	movs	r2, #33	; 0x21
 8009476:	2104      	movs	r1, #4
 8009478:	4620      	mov	r0, r4
 800947a:	f001 ff5b 	bl	800b334 <_calloc_r>
 800947e:	69e3      	ldr	r3, [r4, #28]
 8009480:	60f0      	str	r0, [r6, #12]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e4      	bne.n	8009452 <_Balloc+0x2e>
 8009488:	2000      	movs	r0, #0
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	6802      	ldr	r2, [r0, #0]
 800948e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009492:	2300      	movs	r3, #0
 8009494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009498:	e7f7      	b.n	800948a <_Balloc+0x66>
 800949a:	bf00      	nop
 800949c:	0800dc8e 	.word	0x0800dc8e
 80094a0:	0800dd0e 	.word	0x0800dd0e

080094a4 <_Bfree>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	69c6      	ldr	r6, [r0, #28]
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	b976      	cbnz	r6, 80094cc <_Bfree+0x28>
 80094ae:	2010      	movs	r0, #16
 80094b0:	f7ff ff04 	bl	80092bc <malloc>
 80094b4:	4602      	mov	r2, r0
 80094b6:	61e8      	str	r0, [r5, #28]
 80094b8:	b920      	cbnz	r0, 80094c4 <_Bfree+0x20>
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <_Bfree+0x3c>)
 80094bc:	4809      	ldr	r0, [pc, #36]	; (80094e4 <_Bfree+0x40>)
 80094be:	218f      	movs	r1, #143	; 0x8f
 80094c0:	f001 ff1a 	bl	800b2f8 <__assert_func>
 80094c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094c8:	6006      	str	r6, [r0, #0]
 80094ca:	60c6      	str	r6, [r0, #12]
 80094cc:	b13c      	cbz	r4, 80094de <_Bfree+0x3a>
 80094ce:	69eb      	ldr	r3, [r5, #28]
 80094d0:	6862      	ldr	r2, [r4, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094d8:	6021      	str	r1, [r4, #0]
 80094da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	0800dc8e 	.word	0x0800dc8e
 80094e4:	0800dd0e 	.word	0x0800dd0e

080094e8 <__multadd>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	690d      	ldr	r5, [r1, #16]
 80094ee:	4607      	mov	r7, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	461e      	mov	r6, r3
 80094f4:	f101 0c14 	add.w	ip, r1, #20
 80094f8:	2000      	movs	r0, #0
 80094fa:	f8dc 3000 	ldr.w	r3, [ip]
 80094fe:	b299      	uxth	r1, r3
 8009500:	fb02 6101 	mla	r1, r2, r1, r6
 8009504:	0c1e      	lsrs	r6, r3, #16
 8009506:	0c0b      	lsrs	r3, r1, #16
 8009508:	fb02 3306 	mla	r3, r2, r6, r3
 800950c:	b289      	uxth	r1, r1
 800950e:	3001      	adds	r0, #1
 8009510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009514:	4285      	cmp	r5, r0
 8009516:	f84c 1b04 	str.w	r1, [ip], #4
 800951a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800951e:	dcec      	bgt.n	80094fa <__multadd+0x12>
 8009520:	b30e      	cbz	r6, 8009566 <__multadd+0x7e>
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	42ab      	cmp	r3, r5
 8009526:	dc19      	bgt.n	800955c <__multadd+0x74>
 8009528:	6861      	ldr	r1, [r4, #4]
 800952a:	4638      	mov	r0, r7
 800952c:	3101      	adds	r1, #1
 800952e:	f7ff ff79 	bl	8009424 <_Balloc>
 8009532:	4680      	mov	r8, r0
 8009534:	b928      	cbnz	r0, 8009542 <__multadd+0x5a>
 8009536:	4602      	mov	r2, r0
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <__multadd+0x84>)
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <__multadd+0x88>)
 800953c:	21ba      	movs	r1, #186	; 0xba
 800953e:	f001 fedb 	bl	800b2f8 <__assert_func>
 8009542:	6922      	ldr	r2, [r4, #16]
 8009544:	3202      	adds	r2, #2
 8009546:	f104 010c 	add.w	r1, r4, #12
 800954a:	0092      	lsls	r2, r2, #2
 800954c:	300c      	adds	r0, #12
 800954e:	f7fe ffda 	bl	8008506 <memcpy>
 8009552:	4621      	mov	r1, r4
 8009554:	4638      	mov	r0, r7
 8009556:	f7ff ffa5 	bl	80094a4 <_Bfree>
 800955a:	4644      	mov	r4, r8
 800955c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009560:	3501      	adds	r5, #1
 8009562:	615e      	str	r6, [r3, #20]
 8009564:	6125      	str	r5, [r4, #16]
 8009566:	4620      	mov	r0, r4
 8009568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956c:	0800dcfd 	.word	0x0800dcfd
 8009570:	0800dd0e 	.word	0x0800dd0e

08009574 <__s2b>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	460c      	mov	r4, r1
 800957a:	4615      	mov	r5, r2
 800957c:	461f      	mov	r7, r3
 800957e:	2209      	movs	r2, #9
 8009580:	3308      	adds	r3, #8
 8009582:	4606      	mov	r6, r0
 8009584:	fb93 f3f2 	sdiv	r3, r3, r2
 8009588:	2100      	movs	r1, #0
 800958a:	2201      	movs	r2, #1
 800958c:	429a      	cmp	r2, r3
 800958e:	db09      	blt.n	80095a4 <__s2b+0x30>
 8009590:	4630      	mov	r0, r6
 8009592:	f7ff ff47 	bl	8009424 <_Balloc>
 8009596:	b940      	cbnz	r0, 80095aa <__s2b+0x36>
 8009598:	4602      	mov	r2, r0
 800959a:	4b19      	ldr	r3, [pc, #100]	; (8009600 <__s2b+0x8c>)
 800959c:	4819      	ldr	r0, [pc, #100]	; (8009604 <__s2b+0x90>)
 800959e:	21d3      	movs	r1, #211	; 0xd3
 80095a0:	f001 feaa 	bl	800b2f8 <__assert_func>
 80095a4:	0052      	lsls	r2, r2, #1
 80095a6:	3101      	adds	r1, #1
 80095a8:	e7f0      	b.n	800958c <__s2b+0x18>
 80095aa:	9b08      	ldr	r3, [sp, #32]
 80095ac:	6143      	str	r3, [r0, #20]
 80095ae:	2d09      	cmp	r5, #9
 80095b0:	f04f 0301 	mov.w	r3, #1
 80095b4:	6103      	str	r3, [r0, #16]
 80095b6:	dd16      	ble.n	80095e6 <__s2b+0x72>
 80095b8:	f104 0909 	add.w	r9, r4, #9
 80095bc:	46c8      	mov	r8, r9
 80095be:	442c      	add	r4, r5
 80095c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095c4:	4601      	mov	r1, r0
 80095c6:	3b30      	subs	r3, #48	; 0x30
 80095c8:	220a      	movs	r2, #10
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ff8c 	bl	80094e8 <__multadd>
 80095d0:	45a0      	cmp	r8, r4
 80095d2:	d1f5      	bne.n	80095c0 <__s2b+0x4c>
 80095d4:	f1a5 0408 	sub.w	r4, r5, #8
 80095d8:	444c      	add	r4, r9
 80095da:	1b2d      	subs	r5, r5, r4
 80095dc:	1963      	adds	r3, r4, r5
 80095de:	42bb      	cmp	r3, r7
 80095e0:	db04      	blt.n	80095ec <__s2b+0x78>
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	340a      	adds	r4, #10
 80095e8:	2509      	movs	r5, #9
 80095ea:	e7f6      	b.n	80095da <__s2b+0x66>
 80095ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095f0:	4601      	mov	r1, r0
 80095f2:	3b30      	subs	r3, #48	; 0x30
 80095f4:	220a      	movs	r2, #10
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7ff ff76 	bl	80094e8 <__multadd>
 80095fc:	e7ee      	b.n	80095dc <__s2b+0x68>
 80095fe:	bf00      	nop
 8009600:	0800dcfd 	.word	0x0800dcfd
 8009604:	0800dd0e 	.word	0x0800dd0e

08009608 <__hi0bits>:
 8009608:	0c03      	lsrs	r3, r0, #16
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	b9d3      	cbnz	r3, 8009644 <__hi0bits+0x3c>
 800960e:	0400      	lsls	r0, r0, #16
 8009610:	2310      	movs	r3, #16
 8009612:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009616:	bf04      	itt	eq
 8009618:	0200      	lsleq	r0, r0, #8
 800961a:	3308      	addeq	r3, #8
 800961c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009620:	bf04      	itt	eq
 8009622:	0100      	lsleq	r0, r0, #4
 8009624:	3304      	addeq	r3, #4
 8009626:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800962a:	bf04      	itt	eq
 800962c:	0080      	lsleq	r0, r0, #2
 800962e:	3302      	addeq	r3, #2
 8009630:	2800      	cmp	r0, #0
 8009632:	db05      	blt.n	8009640 <__hi0bits+0x38>
 8009634:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009638:	f103 0301 	add.w	r3, r3, #1
 800963c:	bf08      	it	eq
 800963e:	2320      	moveq	r3, #32
 8009640:	4618      	mov	r0, r3
 8009642:	4770      	bx	lr
 8009644:	2300      	movs	r3, #0
 8009646:	e7e4      	b.n	8009612 <__hi0bits+0xa>

08009648 <__lo0bits>:
 8009648:	6803      	ldr	r3, [r0, #0]
 800964a:	f013 0207 	ands.w	r2, r3, #7
 800964e:	d00c      	beq.n	800966a <__lo0bits+0x22>
 8009650:	07d9      	lsls	r1, r3, #31
 8009652:	d422      	bmi.n	800969a <__lo0bits+0x52>
 8009654:	079a      	lsls	r2, r3, #30
 8009656:	bf49      	itett	mi
 8009658:	085b      	lsrmi	r3, r3, #1
 800965a:	089b      	lsrpl	r3, r3, #2
 800965c:	6003      	strmi	r3, [r0, #0]
 800965e:	2201      	movmi	r2, #1
 8009660:	bf5c      	itt	pl
 8009662:	6003      	strpl	r3, [r0, #0]
 8009664:	2202      	movpl	r2, #2
 8009666:	4610      	mov	r0, r2
 8009668:	4770      	bx	lr
 800966a:	b299      	uxth	r1, r3
 800966c:	b909      	cbnz	r1, 8009672 <__lo0bits+0x2a>
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	2210      	movs	r2, #16
 8009672:	b2d9      	uxtb	r1, r3
 8009674:	b909      	cbnz	r1, 800967a <__lo0bits+0x32>
 8009676:	3208      	adds	r2, #8
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	0719      	lsls	r1, r3, #28
 800967c:	bf04      	itt	eq
 800967e:	091b      	lsreq	r3, r3, #4
 8009680:	3204      	addeq	r2, #4
 8009682:	0799      	lsls	r1, r3, #30
 8009684:	bf04      	itt	eq
 8009686:	089b      	lsreq	r3, r3, #2
 8009688:	3202      	addeq	r2, #2
 800968a:	07d9      	lsls	r1, r3, #31
 800968c:	d403      	bmi.n	8009696 <__lo0bits+0x4e>
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	f102 0201 	add.w	r2, r2, #1
 8009694:	d003      	beq.n	800969e <__lo0bits+0x56>
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	e7e5      	b.n	8009666 <__lo0bits+0x1e>
 800969a:	2200      	movs	r2, #0
 800969c:	e7e3      	b.n	8009666 <__lo0bits+0x1e>
 800969e:	2220      	movs	r2, #32
 80096a0:	e7e1      	b.n	8009666 <__lo0bits+0x1e>
	...

080096a4 <__i2b>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	460c      	mov	r4, r1
 80096a8:	2101      	movs	r1, #1
 80096aa:	f7ff febb 	bl	8009424 <_Balloc>
 80096ae:	4602      	mov	r2, r0
 80096b0:	b928      	cbnz	r0, 80096be <__i2b+0x1a>
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <__i2b+0x24>)
 80096b4:	4805      	ldr	r0, [pc, #20]	; (80096cc <__i2b+0x28>)
 80096b6:	f240 1145 	movw	r1, #325	; 0x145
 80096ba:	f001 fe1d 	bl	800b2f8 <__assert_func>
 80096be:	2301      	movs	r3, #1
 80096c0:	6144      	str	r4, [r0, #20]
 80096c2:	6103      	str	r3, [r0, #16]
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	bf00      	nop
 80096c8:	0800dcfd 	.word	0x0800dcfd
 80096cc:	0800dd0e 	.word	0x0800dd0e

080096d0 <__multiply>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4691      	mov	r9, r2
 80096d6:	690a      	ldr	r2, [r1, #16]
 80096d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096dc:	429a      	cmp	r2, r3
 80096de:	bfb8      	it	lt
 80096e0:	460b      	movlt	r3, r1
 80096e2:	460c      	mov	r4, r1
 80096e4:	bfbc      	itt	lt
 80096e6:	464c      	movlt	r4, r9
 80096e8:	4699      	movlt	r9, r3
 80096ea:	6927      	ldr	r7, [r4, #16]
 80096ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	6861      	ldr	r1, [r4, #4]
 80096f4:	eb07 060a 	add.w	r6, r7, sl
 80096f8:	42b3      	cmp	r3, r6
 80096fa:	b085      	sub	sp, #20
 80096fc:	bfb8      	it	lt
 80096fe:	3101      	addlt	r1, #1
 8009700:	f7ff fe90 	bl	8009424 <_Balloc>
 8009704:	b930      	cbnz	r0, 8009714 <__multiply+0x44>
 8009706:	4602      	mov	r2, r0
 8009708:	4b44      	ldr	r3, [pc, #272]	; (800981c <__multiply+0x14c>)
 800970a:	4845      	ldr	r0, [pc, #276]	; (8009820 <__multiply+0x150>)
 800970c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009710:	f001 fdf2 	bl	800b2f8 <__assert_func>
 8009714:	f100 0514 	add.w	r5, r0, #20
 8009718:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800971c:	462b      	mov	r3, r5
 800971e:	2200      	movs	r2, #0
 8009720:	4543      	cmp	r3, r8
 8009722:	d321      	bcc.n	8009768 <__multiply+0x98>
 8009724:	f104 0314 	add.w	r3, r4, #20
 8009728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800972c:	f109 0314 	add.w	r3, r9, #20
 8009730:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009734:	9202      	str	r2, [sp, #8]
 8009736:	1b3a      	subs	r2, r7, r4
 8009738:	3a15      	subs	r2, #21
 800973a:	f022 0203 	bic.w	r2, r2, #3
 800973e:	3204      	adds	r2, #4
 8009740:	f104 0115 	add.w	r1, r4, #21
 8009744:	428f      	cmp	r7, r1
 8009746:	bf38      	it	cc
 8009748:	2204      	movcc	r2, #4
 800974a:	9201      	str	r2, [sp, #4]
 800974c:	9a02      	ldr	r2, [sp, #8]
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	429a      	cmp	r2, r3
 8009752:	d80c      	bhi.n	800976e <__multiply+0x9e>
 8009754:	2e00      	cmp	r6, #0
 8009756:	dd03      	ble.n	8009760 <__multiply+0x90>
 8009758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800975c:	2b00      	cmp	r3, #0
 800975e:	d05b      	beq.n	8009818 <__multiply+0x148>
 8009760:	6106      	str	r6, [r0, #16]
 8009762:	b005      	add	sp, #20
 8009764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009768:	f843 2b04 	str.w	r2, [r3], #4
 800976c:	e7d8      	b.n	8009720 <__multiply+0x50>
 800976e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009772:	f1ba 0f00 	cmp.w	sl, #0
 8009776:	d024      	beq.n	80097c2 <__multiply+0xf2>
 8009778:	f104 0e14 	add.w	lr, r4, #20
 800977c:	46a9      	mov	r9, r5
 800977e:	f04f 0c00 	mov.w	ip, #0
 8009782:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009786:	f8d9 1000 	ldr.w	r1, [r9]
 800978a:	fa1f fb82 	uxth.w	fp, r2
 800978e:	b289      	uxth	r1, r1
 8009790:	fb0a 110b 	mla	r1, sl, fp, r1
 8009794:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009798:	f8d9 2000 	ldr.w	r2, [r9]
 800979c:	4461      	add	r1, ip
 800979e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80097a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097aa:	b289      	uxth	r1, r1
 80097ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097b0:	4577      	cmp	r7, lr
 80097b2:	f849 1b04 	str.w	r1, [r9], #4
 80097b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097ba:	d8e2      	bhi.n	8009782 <__multiply+0xb2>
 80097bc:	9a01      	ldr	r2, [sp, #4]
 80097be:	f845 c002 	str.w	ip, [r5, r2]
 80097c2:	9a03      	ldr	r2, [sp, #12]
 80097c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097c8:	3304      	adds	r3, #4
 80097ca:	f1b9 0f00 	cmp.w	r9, #0
 80097ce:	d021      	beq.n	8009814 <__multiply+0x144>
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	f104 0c14 	add.w	ip, r4, #20
 80097d6:	46ae      	mov	lr, r5
 80097d8:	f04f 0a00 	mov.w	sl, #0
 80097dc:	f8bc b000 	ldrh.w	fp, [ip]
 80097e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097e4:	fb09 220b 	mla	r2, r9, fp, r2
 80097e8:	4452      	add	r2, sl
 80097ea:	b289      	uxth	r1, r1
 80097ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097f0:	f84e 1b04 	str.w	r1, [lr], #4
 80097f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097fc:	f8be 1000 	ldrh.w	r1, [lr]
 8009800:	fb09 110a 	mla	r1, r9, sl, r1
 8009804:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009808:	4567      	cmp	r7, ip
 800980a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800980e:	d8e5      	bhi.n	80097dc <__multiply+0x10c>
 8009810:	9a01      	ldr	r2, [sp, #4]
 8009812:	50a9      	str	r1, [r5, r2]
 8009814:	3504      	adds	r5, #4
 8009816:	e799      	b.n	800974c <__multiply+0x7c>
 8009818:	3e01      	subs	r6, #1
 800981a:	e79b      	b.n	8009754 <__multiply+0x84>
 800981c:	0800dcfd 	.word	0x0800dcfd
 8009820:	0800dd0e 	.word	0x0800dd0e

08009824 <__pow5mult>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	4615      	mov	r5, r2
 800982a:	f012 0203 	ands.w	r2, r2, #3
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	d007      	beq.n	8009844 <__pow5mult+0x20>
 8009834:	4c25      	ldr	r4, [pc, #148]	; (80098cc <__pow5mult+0xa8>)
 8009836:	3a01      	subs	r2, #1
 8009838:	2300      	movs	r3, #0
 800983a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800983e:	f7ff fe53 	bl	80094e8 <__multadd>
 8009842:	4607      	mov	r7, r0
 8009844:	10ad      	asrs	r5, r5, #2
 8009846:	d03d      	beq.n	80098c4 <__pow5mult+0xa0>
 8009848:	69f4      	ldr	r4, [r6, #28]
 800984a:	b97c      	cbnz	r4, 800986c <__pow5mult+0x48>
 800984c:	2010      	movs	r0, #16
 800984e:	f7ff fd35 	bl	80092bc <malloc>
 8009852:	4602      	mov	r2, r0
 8009854:	61f0      	str	r0, [r6, #28]
 8009856:	b928      	cbnz	r0, 8009864 <__pow5mult+0x40>
 8009858:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <__pow5mult+0xac>)
 800985a:	481e      	ldr	r0, [pc, #120]	; (80098d4 <__pow5mult+0xb0>)
 800985c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009860:	f001 fd4a 	bl	800b2f8 <__assert_func>
 8009864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009868:	6004      	str	r4, [r0, #0]
 800986a:	60c4      	str	r4, [r0, #12]
 800986c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009874:	b94c      	cbnz	r4, 800988a <__pow5mult+0x66>
 8009876:	f240 2171 	movw	r1, #625	; 0x271
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff ff12 	bl	80096a4 <__i2b>
 8009880:	2300      	movs	r3, #0
 8009882:	f8c8 0008 	str.w	r0, [r8, #8]
 8009886:	4604      	mov	r4, r0
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	f04f 0900 	mov.w	r9, #0
 800988e:	07eb      	lsls	r3, r5, #31
 8009890:	d50a      	bpl.n	80098a8 <__pow5mult+0x84>
 8009892:	4639      	mov	r1, r7
 8009894:	4622      	mov	r2, r4
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ff1a 	bl	80096d0 <__multiply>
 800989c:	4639      	mov	r1, r7
 800989e:	4680      	mov	r8, r0
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff fdff 	bl	80094a4 <_Bfree>
 80098a6:	4647      	mov	r7, r8
 80098a8:	106d      	asrs	r5, r5, #1
 80098aa:	d00b      	beq.n	80098c4 <__pow5mult+0xa0>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	b938      	cbnz	r0, 80098c0 <__pow5mult+0x9c>
 80098b0:	4622      	mov	r2, r4
 80098b2:	4621      	mov	r1, r4
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff ff0b 	bl	80096d0 <__multiply>
 80098ba:	6020      	str	r0, [r4, #0]
 80098bc:	f8c0 9000 	str.w	r9, [r0]
 80098c0:	4604      	mov	r4, r0
 80098c2:	e7e4      	b.n	800988e <__pow5mult+0x6a>
 80098c4:	4638      	mov	r0, r7
 80098c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ca:	bf00      	nop
 80098cc:	0800de58 	.word	0x0800de58
 80098d0:	0800dc8e 	.word	0x0800dc8e
 80098d4:	0800dd0e 	.word	0x0800dd0e

080098d8 <__lshift>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	6849      	ldr	r1, [r1, #4]
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	4607      	mov	r7, r0
 80098ea:	4691      	mov	r9, r2
 80098ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098f0:	f108 0601 	add.w	r6, r8, #1
 80098f4:	42b3      	cmp	r3, r6
 80098f6:	db0b      	blt.n	8009910 <__lshift+0x38>
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7ff fd93 	bl	8009424 <_Balloc>
 80098fe:	4605      	mov	r5, r0
 8009900:	b948      	cbnz	r0, 8009916 <__lshift+0x3e>
 8009902:	4602      	mov	r2, r0
 8009904:	4b28      	ldr	r3, [pc, #160]	; (80099a8 <__lshift+0xd0>)
 8009906:	4829      	ldr	r0, [pc, #164]	; (80099ac <__lshift+0xd4>)
 8009908:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800990c:	f001 fcf4 	bl	800b2f8 <__assert_func>
 8009910:	3101      	adds	r1, #1
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	e7ee      	b.n	80098f4 <__lshift+0x1c>
 8009916:	2300      	movs	r3, #0
 8009918:	f100 0114 	add.w	r1, r0, #20
 800991c:	f100 0210 	add.w	r2, r0, #16
 8009920:	4618      	mov	r0, r3
 8009922:	4553      	cmp	r3, sl
 8009924:	db33      	blt.n	800998e <__lshift+0xb6>
 8009926:	6920      	ldr	r0, [r4, #16]
 8009928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800992c:	f104 0314 	add.w	r3, r4, #20
 8009930:	f019 091f 	ands.w	r9, r9, #31
 8009934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009938:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800993c:	d02b      	beq.n	8009996 <__lshift+0xbe>
 800993e:	f1c9 0e20 	rsb	lr, r9, #32
 8009942:	468a      	mov	sl, r1
 8009944:	2200      	movs	r2, #0
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	fa00 f009 	lsl.w	r0, r0, r9
 800994c:	4310      	orrs	r0, r2
 800994e:	f84a 0b04 	str.w	r0, [sl], #4
 8009952:	f853 2b04 	ldr.w	r2, [r3], #4
 8009956:	459c      	cmp	ip, r3
 8009958:	fa22 f20e 	lsr.w	r2, r2, lr
 800995c:	d8f3      	bhi.n	8009946 <__lshift+0x6e>
 800995e:	ebac 0304 	sub.w	r3, ip, r4
 8009962:	3b15      	subs	r3, #21
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	3304      	adds	r3, #4
 800996a:	f104 0015 	add.w	r0, r4, #21
 800996e:	4584      	cmp	ip, r0
 8009970:	bf38      	it	cc
 8009972:	2304      	movcc	r3, #4
 8009974:	50ca      	str	r2, [r1, r3]
 8009976:	b10a      	cbz	r2, 800997c <__lshift+0xa4>
 8009978:	f108 0602 	add.w	r6, r8, #2
 800997c:	3e01      	subs	r6, #1
 800997e:	4638      	mov	r0, r7
 8009980:	612e      	str	r6, [r5, #16]
 8009982:	4621      	mov	r1, r4
 8009984:	f7ff fd8e 	bl	80094a4 <_Bfree>
 8009988:	4628      	mov	r0, r5
 800998a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009992:	3301      	adds	r3, #1
 8009994:	e7c5      	b.n	8009922 <__lshift+0x4a>
 8009996:	3904      	subs	r1, #4
 8009998:	f853 2b04 	ldr.w	r2, [r3], #4
 800999c:	f841 2f04 	str.w	r2, [r1, #4]!
 80099a0:	459c      	cmp	ip, r3
 80099a2:	d8f9      	bhi.n	8009998 <__lshift+0xc0>
 80099a4:	e7ea      	b.n	800997c <__lshift+0xa4>
 80099a6:	bf00      	nop
 80099a8:	0800dcfd 	.word	0x0800dcfd
 80099ac:	0800dd0e 	.word	0x0800dd0e

080099b0 <__mcmp>:
 80099b0:	b530      	push	{r4, r5, lr}
 80099b2:	6902      	ldr	r2, [r0, #16]
 80099b4:	690c      	ldr	r4, [r1, #16]
 80099b6:	1b12      	subs	r2, r2, r4
 80099b8:	d10e      	bne.n	80099d8 <__mcmp+0x28>
 80099ba:	f100 0314 	add.w	r3, r0, #20
 80099be:	3114      	adds	r1, #20
 80099c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099d0:	42a5      	cmp	r5, r4
 80099d2:	d003      	beq.n	80099dc <__mcmp+0x2c>
 80099d4:	d305      	bcc.n	80099e2 <__mcmp+0x32>
 80099d6:	2201      	movs	r2, #1
 80099d8:	4610      	mov	r0, r2
 80099da:	bd30      	pop	{r4, r5, pc}
 80099dc:	4283      	cmp	r3, r0
 80099de:	d3f3      	bcc.n	80099c8 <__mcmp+0x18>
 80099e0:	e7fa      	b.n	80099d8 <__mcmp+0x28>
 80099e2:	f04f 32ff 	mov.w	r2, #4294967295
 80099e6:	e7f7      	b.n	80099d8 <__mcmp+0x28>

080099e8 <__mdiff>:
 80099e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	4606      	mov	r6, r0
 80099f0:	4611      	mov	r1, r2
 80099f2:	4620      	mov	r0, r4
 80099f4:	4690      	mov	r8, r2
 80099f6:	f7ff ffdb 	bl	80099b0 <__mcmp>
 80099fa:	1e05      	subs	r5, r0, #0
 80099fc:	d110      	bne.n	8009a20 <__mdiff+0x38>
 80099fe:	4629      	mov	r1, r5
 8009a00:	4630      	mov	r0, r6
 8009a02:	f7ff fd0f 	bl	8009424 <_Balloc>
 8009a06:	b930      	cbnz	r0, 8009a16 <__mdiff+0x2e>
 8009a08:	4b3a      	ldr	r3, [pc, #232]	; (8009af4 <__mdiff+0x10c>)
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	f240 2137 	movw	r1, #567	; 0x237
 8009a10:	4839      	ldr	r0, [pc, #228]	; (8009af8 <__mdiff+0x110>)
 8009a12:	f001 fc71 	bl	800b2f8 <__assert_func>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	bfa4      	itt	ge
 8009a22:	4643      	movge	r3, r8
 8009a24:	46a0      	movge	r8, r4
 8009a26:	4630      	mov	r0, r6
 8009a28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a2c:	bfa6      	itte	ge
 8009a2e:	461c      	movge	r4, r3
 8009a30:	2500      	movge	r5, #0
 8009a32:	2501      	movlt	r5, #1
 8009a34:	f7ff fcf6 	bl	8009424 <_Balloc>
 8009a38:	b920      	cbnz	r0, 8009a44 <__mdiff+0x5c>
 8009a3a:	4b2e      	ldr	r3, [pc, #184]	; (8009af4 <__mdiff+0x10c>)
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	f240 2145 	movw	r1, #581	; 0x245
 8009a42:	e7e5      	b.n	8009a10 <__mdiff+0x28>
 8009a44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a48:	6926      	ldr	r6, [r4, #16]
 8009a4a:	60c5      	str	r5, [r0, #12]
 8009a4c:	f104 0914 	add.w	r9, r4, #20
 8009a50:	f108 0514 	add.w	r5, r8, #20
 8009a54:	f100 0e14 	add.w	lr, r0, #20
 8009a58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a60:	f108 0210 	add.w	r2, r8, #16
 8009a64:	46f2      	mov	sl, lr
 8009a66:	2100      	movs	r1, #0
 8009a68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a70:	fa11 f88b 	uxtah	r8, r1, fp
 8009a74:	b299      	uxth	r1, r3
 8009a76:	0c1b      	lsrs	r3, r3, #16
 8009a78:	eba8 0801 	sub.w	r8, r8, r1
 8009a7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a84:	fa1f f888 	uxth.w	r8, r8
 8009a88:	1419      	asrs	r1, r3, #16
 8009a8a:	454e      	cmp	r6, r9
 8009a8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a90:	f84a 3b04 	str.w	r3, [sl], #4
 8009a94:	d8e8      	bhi.n	8009a68 <__mdiff+0x80>
 8009a96:	1b33      	subs	r3, r6, r4
 8009a98:	3b15      	subs	r3, #21
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	3415      	adds	r4, #21
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	bf38      	it	cc
 8009aa6:	2304      	movcc	r3, #4
 8009aa8:	441d      	add	r5, r3
 8009aaa:	4473      	add	r3, lr
 8009aac:	469e      	mov	lr, r3
 8009aae:	462e      	mov	r6, r5
 8009ab0:	4566      	cmp	r6, ip
 8009ab2:	d30e      	bcc.n	8009ad2 <__mdiff+0xea>
 8009ab4:	f10c 0203 	add.w	r2, ip, #3
 8009ab8:	1b52      	subs	r2, r2, r5
 8009aba:	f022 0203 	bic.w	r2, r2, #3
 8009abe:	3d03      	subs	r5, #3
 8009ac0:	45ac      	cmp	ip, r5
 8009ac2:	bf38      	it	cc
 8009ac4:	2200      	movcc	r2, #0
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009acc:	b17a      	cbz	r2, 8009aee <__mdiff+0x106>
 8009ace:	6107      	str	r7, [r0, #16]
 8009ad0:	e7a4      	b.n	8009a1c <__mdiff+0x34>
 8009ad2:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ad6:	fa11 f288 	uxtah	r2, r1, r8
 8009ada:	1414      	asrs	r4, r2, #16
 8009adc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ae0:	b292      	uxth	r2, r2
 8009ae2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ae6:	f84e 2b04 	str.w	r2, [lr], #4
 8009aea:	1421      	asrs	r1, r4, #16
 8009aec:	e7e0      	b.n	8009ab0 <__mdiff+0xc8>
 8009aee:	3f01      	subs	r7, #1
 8009af0:	e7ea      	b.n	8009ac8 <__mdiff+0xe0>
 8009af2:	bf00      	nop
 8009af4:	0800dcfd 	.word	0x0800dcfd
 8009af8:	0800dd0e 	.word	0x0800dd0e

08009afc <__ulp>:
 8009afc:	b082      	sub	sp, #8
 8009afe:	ed8d 0b00 	vstr	d0, [sp]
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <__ulp+0x48>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dc08      	bgt.n	8009b22 <__ulp+0x26>
 8009b10:	425b      	negs	r3, r3
 8009b12:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009b16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b1a:	da04      	bge.n	8009b26 <__ulp+0x2a>
 8009b1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b20:	4113      	asrs	r3, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	e008      	b.n	8009b38 <__ulp+0x3c>
 8009b26:	f1a2 0314 	sub.w	r3, r2, #20
 8009b2a:	2b1e      	cmp	r3, #30
 8009b2c:	bfda      	itte	le
 8009b2e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b32:	40da      	lsrle	r2, r3
 8009b34:	2201      	movgt	r2, #1
 8009b36:	2300      	movs	r3, #0
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	ec41 0b10 	vmov	d0, r0, r1
 8009b40:	b002      	add	sp, #8
 8009b42:	4770      	bx	lr
 8009b44:	7ff00000 	.word	0x7ff00000

08009b48 <__b2d>:
 8009b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4c:	6906      	ldr	r6, [r0, #16]
 8009b4e:	f100 0814 	add.w	r8, r0, #20
 8009b52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b56:	1f37      	subs	r7, r6, #4
 8009b58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7ff fd53 	bl	8009608 <__hi0bits>
 8009b62:	f1c0 0320 	rsb	r3, r0, #32
 8009b66:	280a      	cmp	r0, #10
 8009b68:	600b      	str	r3, [r1, #0]
 8009b6a:	491b      	ldr	r1, [pc, #108]	; (8009bd8 <__b2d+0x90>)
 8009b6c:	dc15      	bgt.n	8009b9a <__b2d+0x52>
 8009b6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b72:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b76:	45b8      	cmp	r8, r7
 8009b78:	ea43 0501 	orr.w	r5, r3, r1
 8009b7c:	bf34      	ite	cc
 8009b7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b82:	2300      	movcs	r3, #0
 8009b84:	3015      	adds	r0, #21
 8009b86:	fa02 f000 	lsl.w	r0, r2, r0
 8009b8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b8e:	4303      	orrs	r3, r0
 8009b90:	461c      	mov	r4, r3
 8009b92:	ec45 4b10 	vmov	d0, r4, r5
 8009b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9a:	45b8      	cmp	r8, r7
 8009b9c:	bf3a      	itte	cc
 8009b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ba2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ba6:	2300      	movcs	r3, #0
 8009ba8:	380b      	subs	r0, #11
 8009baa:	d012      	beq.n	8009bd2 <__b2d+0x8a>
 8009bac:	f1c0 0120 	rsb	r1, r0, #32
 8009bb0:	fa23 f401 	lsr.w	r4, r3, r1
 8009bb4:	4082      	lsls	r2, r0
 8009bb6:	4322      	orrs	r2, r4
 8009bb8:	4547      	cmp	r7, r8
 8009bba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009bbe:	bf8c      	ite	hi
 8009bc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009bc4:	2200      	movls	r2, #0
 8009bc6:	4083      	lsls	r3, r0
 8009bc8:	40ca      	lsrs	r2, r1
 8009bca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	e7de      	b.n	8009b90 <__b2d+0x48>
 8009bd2:	ea42 0501 	orr.w	r5, r2, r1
 8009bd6:	e7db      	b.n	8009b90 <__b2d+0x48>
 8009bd8:	3ff00000 	.word	0x3ff00000

08009bdc <__d2b>:
 8009bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	460f      	mov	r7, r1
 8009be2:	2101      	movs	r1, #1
 8009be4:	ec59 8b10 	vmov	r8, r9, d0
 8009be8:	4616      	mov	r6, r2
 8009bea:	f7ff fc1b 	bl	8009424 <_Balloc>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b930      	cbnz	r0, 8009c00 <__d2b+0x24>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <__d2b+0xac>)
 8009bf6:	4825      	ldr	r0, [pc, #148]	; (8009c8c <__d2b+0xb0>)
 8009bf8:	f240 310f 	movw	r1, #783	; 0x30f
 8009bfc:	f001 fb7c 	bl	800b2f8 <__assert_func>
 8009c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c08:	bb2d      	cbnz	r5, 8009c56 <__d2b+0x7a>
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	f1b8 0300 	subs.w	r3, r8, #0
 8009c10:	d026      	beq.n	8009c60 <__d2b+0x84>
 8009c12:	4668      	mov	r0, sp
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	f7ff fd17 	bl	8009648 <__lo0bits>
 8009c1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c1e:	b1e8      	cbz	r0, 8009c5c <__d2b+0x80>
 8009c20:	f1c0 0320 	rsb	r3, r0, #32
 8009c24:	fa02 f303 	lsl.w	r3, r2, r3
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	40c2      	lsrs	r2, r0
 8009c2c:	6163      	str	r3, [r4, #20]
 8009c2e:	9201      	str	r2, [sp, #4]
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	61a3      	str	r3, [r4, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf14      	ite	ne
 8009c38:	2202      	movne	r2, #2
 8009c3a:	2201      	moveq	r2, #1
 8009c3c:	6122      	str	r2, [r4, #16]
 8009c3e:	b1bd      	cbz	r5, 8009c70 <__d2b+0x94>
 8009c40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c44:	4405      	add	r5, r0
 8009c46:	603d      	str	r5, [r7, #0]
 8009c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c4c:	6030      	str	r0, [r6, #0]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	b003      	add	sp, #12
 8009c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c5a:	e7d6      	b.n	8009c0a <__d2b+0x2e>
 8009c5c:	6161      	str	r1, [r4, #20]
 8009c5e:	e7e7      	b.n	8009c30 <__d2b+0x54>
 8009c60:	a801      	add	r0, sp, #4
 8009c62:	f7ff fcf1 	bl	8009648 <__lo0bits>
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	6163      	str	r3, [r4, #20]
 8009c6a:	3020      	adds	r0, #32
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	e7e5      	b.n	8009c3c <__d2b+0x60>
 8009c70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c78:	6038      	str	r0, [r7, #0]
 8009c7a:	6918      	ldr	r0, [r3, #16]
 8009c7c:	f7ff fcc4 	bl	8009608 <__hi0bits>
 8009c80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c84:	e7e2      	b.n	8009c4c <__d2b+0x70>
 8009c86:	bf00      	nop
 8009c88:	0800dcfd 	.word	0x0800dcfd
 8009c8c:	0800dd0e 	.word	0x0800dd0e

08009c90 <__ratio>:
 8009c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	4688      	mov	r8, r1
 8009c96:	4669      	mov	r1, sp
 8009c98:	4681      	mov	r9, r0
 8009c9a:	f7ff ff55 	bl	8009b48 <__b2d>
 8009c9e:	a901      	add	r1, sp, #4
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	ec55 4b10 	vmov	r4, r5, d0
 8009ca6:	f7ff ff4f 	bl	8009b48 <__b2d>
 8009caa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cb2:	eba3 0c02 	sub.w	ip, r3, r2
 8009cb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfd6      	itet	le
 8009cc8:	460a      	movle	r2, r1
 8009cca:	462a      	movgt	r2, r5
 8009ccc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cd0:	468b      	mov	fp, r1
 8009cd2:	462f      	mov	r7, r5
 8009cd4:	bfd4      	ite	le
 8009cd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cde:	4620      	mov	r0, r4
 8009ce0:	ee10 2a10 	vmov	r2, s0
 8009ce4:	465b      	mov	r3, fp
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fdb0 	bl	800084c <__aeabi_ddiv>
 8009cec:	ec41 0b10 	vmov	d0, r0, r1
 8009cf0:	b003      	add	sp, #12
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cf6 <__copybits>:
 8009cf6:	3901      	subs	r1, #1
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	1149      	asrs	r1, r1, #5
 8009cfc:	6914      	ldr	r4, [r2, #16]
 8009cfe:	3101      	adds	r1, #1
 8009d00:	f102 0314 	add.w	r3, r2, #20
 8009d04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d0c:	1f05      	subs	r5, r0, #4
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	d30c      	bcc.n	8009d2c <__copybits+0x36>
 8009d12:	1aa3      	subs	r3, r4, r2
 8009d14:	3b11      	subs	r3, #17
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	3211      	adds	r2, #17
 8009d1c:	42a2      	cmp	r2, r4
 8009d1e:	bf88      	it	hi
 8009d20:	2300      	movhi	r3, #0
 8009d22:	4418      	add	r0, r3
 8009d24:	2300      	movs	r3, #0
 8009d26:	4288      	cmp	r0, r1
 8009d28:	d305      	bcc.n	8009d36 <__copybits+0x40>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d30:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d34:	e7eb      	b.n	8009d0e <__copybits+0x18>
 8009d36:	f840 3b04 	str.w	r3, [r0], #4
 8009d3a:	e7f4      	b.n	8009d26 <__copybits+0x30>

08009d3c <__any_on>:
 8009d3c:	f100 0214 	add.w	r2, r0, #20
 8009d40:	6900      	ldr	r0, [r0, #16]
 8009d42:	114b      	asrs	r3, r1, #5
 8009d44:	4298      	cmp	r0, r3
 8009d46:	b510      	push	{r4, lr}
 8009d48:	db11      	blt.n	8009d6e <__any_on+0x32>
 8009d4a:	dd0a      	ble.n	8009d62 <__any_on+0x26>
 8009d4c:	f011 011f 	ands.w	r1, r1, #31
 8009d50:	d007      	beq.n	8009d62 <__any_on+0x26>
 8009d52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d56:	fa24 f001 	lsr.w	r0, r4, r1
 8009d5a:	fa00 f101 	lsl.w	r1, r0, r1
 8009d5e:	428c      	cmp	r4, r1
 8009d60:	d10b      	bne.n	8009d7a <__any_on+0x3e>
 8009d62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d803      	bhi.n	8009d72 <__any_on+0x36>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	bd10      	pop	{r4, pc}
 8009d6e:	4603      	mov	r3, r0
 8009d70:	e7f7      	b.n	8009d62 <__any_on+0x26>
 8009d72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d76:	2900      	cmp	r1, #0
 8009d78:	d0f5      	beq.n	8009d66 <__any_on+0x2a>
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	e7f6      	b.n	8009d6c <__any_on+0x30>

08009d7e <sulp>:
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	ec45 4b10 	vmov	d0, r4, r5
 8009d88:	4616      	mov	r6, r2
 8009d8a:	f7ff feb7 	bl	8009afc <__ulp>
 8009d8e:	ec51 0b10 	vmov	r0, r1, d0
 8009d92:	b17e      	cbz	r6, 8009db4 <sulp+0x36>
 8009d94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd09      	ble.n	8009db4 <sulp+0x36>
 8009da0:	051b      	lsls	r3, r3, #20
 8009da2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009da6:	2400      	movs	r4, #0
 8009da8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009dac:	4622      	mov	r2, r4
 8009dae:	462b      	mov	r3, r5
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009db8 <_strtod_l>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	ed2d 8b02 	vpush	{d8}
 8009dc0:	b09b      	sub	sp, #108	; 0x6c
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	9213      	str	r2, [sp, #76]	; 0x4c
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	9216      	str	r2, [sp, #88]	; 0x58
 8009dca:	460d      	mov	r5, r1
 8009dcc:	f04f 0800 	mov.w	r8, #0
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	460a      	mov	r2, r1
 8009dd6:	9215      	str	r2, [sp, #84]	; 0x54
 8009dd8:	7811      	ldrb	r1, [r2, #0]
 8009dda:	292b      	cmp	r1, #43	; 0x2b
 8009ddc:	d04c      	beq.n	8009e78 <_strtod_l+0xc0>
 8009dde:	d83a      	bhi.n	8009e56 <_strtod_l+0x9e>
 8009de0:	290d      	cmp	r1, #13
 8009de2:	d834      	bhi.n	8009e4e <_strtod_l+0x96>
 8009de4:	2908      	cmp	r1, #8
 8009de6:	d834      	bhi.n	8009e52 <_strtod_l+0x9a>
 8009de8:	2900      	cmp	r1, #0
 8009dea:	d03d      	beq.n	8009e68 <_strtod_l+0xb0>
 8009dec:	2200      	movs	r2, #0
 8009dee:	920a      	str	r2, [sp, #40]	; 0x28
 8009df0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009df2:	7832      	ldrb	r2, [r6, #0]
 8009df4:	2a30      	cmp	r2, #48	; 0x30
 8009df6:	f040 80b4 	bne.w	8009f62 <_strtod_l+0x1aa>
 8009dfa:	7872      	ldrb	r2, [r6, #1]
 8009dfc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009e00:	2a58      	cmp	r2, #88	; 0x58
 8009e02:	d170      	bne.n	8009ee6 <_strtod_l+0x12e>
 8009e04:	9302      	str	r3, [sp, #8]
 8009e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	ab16      	add	r3, sp, #88	; 0x58
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4a8e      	ldr	r2, [pc, #568]	; (800a048 <_strtod_l+0x290>)
 8009e10:	ab17      	add	r3, sp, #92	; 0x5c
 8009e12:	a915      	add	r1, sp, #84	; 0x54
 8009e14:	4620      	mov	r0, r4
 8009e16:	f001 fb0b 	bl	800b430 <__gethex>
 8009e1a:	f010 070f 	ands.w	r7, r0, #15
 8009e1e:	4605      	mov	r5, r0
 8009e20:	d005      	beq.n	8009e2e <_strtod_l+0x76>
 8009e22:	2f06      	cmp	r7, #6
 8009e24:	d12a      	bne.n	8009e7c <_strtod_l+0xc4>
 8009e26:	3601      	adds	r6, #1
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9615      	str	r6, [sp, #84]	; 0x54
 8009e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 857f 	bne.w	800a934 <_strtod_l+0xb7c>
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	b1db      	cbz	r3, 8009e72 <_strtod_l+0xba>
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e40:	ec43 2b10 	vmov	d0, r2, r3
 8009e44:	b01b      	add	sp, #108	; 0x6c
 8009e46:	ecbd 8b02 	vpop	{d8}
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	2920      	cmp	r1, #32
 8009e50:	d1cc      	bne.n	8009dec <_strtod_l+0x34>
 8009e52:	3201      	adds	r2, #1
 8009e54:	e7bf      	b.n	8009dd6 <_strtod_l+0x1e>
 8009e56:	292d      	cmp	r1, #45	; 0x2d
 8009e58:	d1c8      	bne.n	8009dec <_strtod_l+0x34>
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	910a      	str	r1, [sp, #40]	; 0x28
 8009e5e:	1c51      	adds	r1, r2, #1
 8009e60:	9115      	str	r1, [sp, #84]	; 0x54
 8009e62:	7852      	ldrb	r2, [r2, #1]
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d1c3      	bne.n	8009df0 <_strtod_l+0x38>
 8009e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e6a:	9515      	str	r5, [sp, #84]	; 0x54
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 855f 	bne.w	800a930 <_strtod_l+0xb78>
 8009e72:	4642      	mov	r2, r8
 8009e74:	464b      	mov	r3, r9
 8009e76:	e7e3      	b.n	8009e40 <_strtod_l+0x88>
 8009e78:	2100      	movs	r1, #0
 8009e7a:	e7ef      	b.n	8009e5c <_strtod_l+0xa4>
 8009e7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e7e:	b13a      	cbz	r2, 8009e90 <_strtod_l+0xd8>
 8009e80:	2135      	movs	r1, #53	; 0x35
 8009e82:	a818      	add	r0, sp, #96	; 0x60
 8009e84:	f7ff ff37 	bl	8009cf6 <__copybits>
 8009e88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7ff fb0a 	bl	80094a4 <_Bfree>
 8009e90:	3f01      	subs	r7, #1
 8009e92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e94:	2f04      	cmp	r7, #4
 8009e96:	d806      	bhi.n	8009ea6 <_strtod_l+0xee>
 8009e98:	e8df f007 	tbb	[pc, r7]
 8009e9c:	201d0314 	.word	0x201d0314
 8009ea0:	14          	.byte	0x14
 8009ea1:	00          	.byte	0x00
 8009ea2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009ea6:	05e9      	lsls	r1, r5, #23
 8009ea8:	bf48      	it	mi
 8009eaa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009eae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009eb2:	0d1b      	lsrs	r3, r3, #20
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1b9      	bne.n	8009e2e <_strtod_l+0x76>
 8009eba:	f7fe faf7 	bl	80084ac <__errno>
 8009ebe:	2322      	movs	r3, #34	; 0x22
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	e7b4      	b.n	8009e2e <_strtod_l+0x76>
 8009ec4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009ec8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ecc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ed0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ed4:	e7e7      	b.n	8009ea6 <_strtod_l+0xee>
 8009ed6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a050 <_strtod_l+0x298>
 8009eda:	e7e4      	b.n	8009ea6 <_strtod_l+0xee>
 8009edc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009ee0:	f04f 38ff 	mov.w	r8, #4294967295
 8009ee4:	e7df      	b.n	8009ea6 <_strtod_l+0xee>
 8009ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	9215      	str	r2, [sp, #84]	; 0x54
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b30      	cmp	r3, #48	; 0x30
 8009ef0:	d0f9      	beq.n	8009ee6 <_strtod_l+0x12e>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d09b      	beq.n	8009e2e <_strtod_l+0x76>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f04f 0a00 	mov.w	sl, #0
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009f06:	46d3      	mov	fp, sl
 8009f08:	220a      	movs	r2, #10
 8009f0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009f0c:	7806      	ldrb	r6, [r0, #0]
 8009f0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009f12:	b2d9      	uxtb	r1, r3
 8009f14:	2909      	cmp	r1, #9
 8009f16:	d926      	bls.n	8009f66 <_strtod_l+0x1ae>
 8009f18:	494c      	ldr	r1, [pc, #304]	; (800a04c <_strtod_l+0x294>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f001 f9c0 	bl	800b2a0 <strncmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d030      	beq.n	8009f86 <_strtod_l+0x1ce>
 8009f24:	2000      	movs	r0, #0
 8009f26:	4632      	mov	r2, r6
 8009f28:	9005      	str	r0, [sp, #20]
 8009f2a:	465e      	mov	r6, fp
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2a65      	cmp	r2, #101	; 0x65
 8009f30:	d001      	beq.n	8009f36 <_strtod_l+0x17e>
 8009f32:	2a45      	cmp	r2, #69	; 0x45
 8009f34:	d113      	bne.n	8009f5e <_strtod_l+0x1a6>
 8009f36:	b91e      	cbnz	r6, 8009f40 <_strtod_l+0x188>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	4302      	orrs	r2, r0
 8009f3c:	d094      	beq.n	8009e68 <_strtod_l+0xb0>
 8009f3e:	2600      	movs	r6, #0
 8009f40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f42:	1c6a      	adds	r2, r5, #1
 8009f44:	9215      	str	r2, [sp, #84]	; 0x54
 8009f46:	786a      	ldrb	r2, [r5, #1]
 8009f48:	2a2b      	cmp	r2, #43	; 0x2b
 8009f4a:	d074      	beq.n	800a036 <_strtod_l+0x27e>
 8009f4c:	2a2d      	cmp	r2, #45	; 0x2d
 8009f4e:	d078      	beq.n	800a042 <_strtod_l+0x28a>
 8009f50:	f04f 0c00 	mov.w	ip, #0
 8009f54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f58:	2909      	cmp	r1, #9
 8009f5a:	d97f      	bls.n	800a05c <_strtod_l+0x2a4>
 8009f5c:	9515      	str	r5, [sp, #84]	; 0x54
 8009f5e:	2700      	movs	r7, #0
 8009f60:	e09e      	b.n	800a0a0 <_strtod_l+0x2e8>
 8009f62:	2300      	movs	r3, #0
 8009f64:	e7c8      	b.n	8009ef8 <_strtod_l+0x140>
 8009f66:	f1bb 0f08 	cmp.w	fp, #8
 8009f6a:	bfd8      	it	le
 8009f6c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009f6e:	f100 0001 	add.w	r0, r0, #1
 8009f72:	bfda      	itte	le
 8009f74:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f78:	9309      	strle	r3, [sp, #36]	; 0x24
 8009f7a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009f7e:	f10b 0b01 	add.w	fp, fp, #1
 8009f82:	9015      	str	r0, [sp, #84]	; 0x54
 8009f84:	e7c1      	b.n	8009f0a <_strtod_l+0x152>
 8009f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	9215      	str	r2, [sp, #84]	; 0x54
 8009f8c:	785a      	ldrb	r2, [r3, #1]
 8009f8e:	f1bb 0f00 	cmp.w	fp, #0
 8009f92:	d037      	beq.n	800a004 <_strtod_l+0x24c>
 8009f94:	9005      	str	r0, [sp, #20]
 8009f96:	465e      	mov	r6, fp
 8009f98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	d912      	bls.n	8009fc6 <_strtod_l+0x20e>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e7c4      	b.n	8009f2e <_strtod_l+0x176>
 8009fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	9215      	str	r2, [sp, #84]	; 0x54
 8009faa:	785a      	ldrb	r2, [r3, #1]
 8009fac:	3001      	adds	r0, #1
 8009fae:	2a30      	cmp	r2, #48	; 0x30
 8009fb0:	d0f8      	beq.n	8009fa4 <_strtod_l+0x1ec>
 8009fb2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009fb6:	2b08      	cmp	r3, #8
 8009fb8:	f200 84c1 	bhi.w	800a93e <_strtod_l+0xb86>
 8009fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fbe:	9005      	str	r0, [sp, #20]
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	3a30      	subs	r2, #48	; 0x30
 8009fc8:	f100 0301 	add.w	r3, r0, #1
 8009fcc:	d014      	beq.n	8009ff8 <_strtod_l+0x240>
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	4419      	add	r1, r3
 8009fd2:	9105      	str	r1, [sp, #20]
 8009fd4:	4633      	mov	r3, r6
 8009fd6:	eb00 0c06 	add.w	ip, r0, r6
 8009fda:	210a      	movs	r1, #10
 8009fdc:	4563      	cmp	r3, ip
 8009fde:	d113      	bne.n	800a008 <_strtod_l+0x250>
 8009fe0:	1833      	adds	r3, r6, r0
 8009fe2:	2b08      	cmp	r3, #8
 8009fe4:	f106 0601 	add.w	r6, r6, #1
 8009fe8:	4406      	add	r6, r0
 8009fea:	dc1a      	bgt.n	800a022 <_strtod_l+0x26a>
 8009fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fee:	230a      	movs	r3, #10
 8009ff0:	fb03 2301 	mla	r3, r3, r1, r2
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ffa:	1c51      	adds	r1, r2, #1
 8009ffc:	9115      	str	r1, [sp, #84]	; 0x54
 8009ffe:	7852      	ldrb	r2, [r2, #1]
 800a000:	4618      	mov	r0, r3
 800a002:	e7c9      	b.n	8009f98 <_strtod_l+0x1e0>
 800a004:	4658      	mov	r0, fp
 800a006:	e7d2      	b.n	8009fae <_strtod_l+0x1f6>
 800a008:	2b08      	cmp	r3, #8
 800a00a:	f103 0301 	add.w	r3, r3, #1
 800a00e:	dc03      	bgt.n	800a018 <_strtod_l+0x260>
 800a010:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a012:	434f      	muls	r7, r1
 800a014:	9709      	str	r7, [sp, #36]	; 0x24
 800a016:	e7e1      	b.n	8009fdc <_strtod_l+0x224>
 800a018:	2b10      	cmp	r3, #16
 800a01a:	bfd8      	it	le
 800a01c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a020:	e7dc      	b.n	8009fdc <_strtod_l+0x224>
 800a022:	2e10      	cmp	r6, #16
 800a024:	bfdc      	itt	le
 800a026:	230a      	movle	r3, #10
 800a028:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a02c:	e7e3      	b.n	8009ff6 <_strtod_l+0x23e>
 800a02e:	2300      	movs	r3, #0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	2301      	movs	r3, #1
 800a034:	e780      	b.n	8009f38 <_strtod_l+0x180>
 800a036:	f04f 0c00 	mov.w	ip, #0
 800a03a:	1caa      	adds	r2, r5, #2
 800a03c:	9215      	str	r2, [sp, #84]	; 0x54
 800a03e:	78aa      	ldrb	r2, [r5, #2]
 800a040:	e788      	b.n	8009f54 <_strtod_l+0x19c>
 800a042:	f04f 0c01 	mov.w	ip, #1
 800a046:	e7f8      	b.n	800a03a <_strtod_l+0x282>
 800a048:	0800de68 	.word	0x0800de68
 800a04c:	0800de64 	.word	0x0800de64
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a056:	1c51      	adds	r1, r2, #1
 800a058:	9115      	str	r1, [sp, #84]	; 0x54
 800a05a:	7852      	ldrb	r2, [r2, #1]
 800a05c:	2a30      	cmp	r2, #48	; 0x30
 800a05e:	d0f9      	beq.n	800a054 <_strtod_l+0x29c>
 800a060:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a064:	2908      	cmp	r1, #8
 800a066:	f63f af7a 	bhi.w	8009f5e <_strtod_l+0x1a6>
 800a06a:	3a30      	subs	r2, #48	; 0x30
 800a06c:	9208      	str	r2, [sp, #32]
 800a06e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a070:	920c      	str	r2, [sp, #48]	; 0x30
 800a072:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a074:	1c57      	adds	r7, r2, #1
 800a076:	9715      	str	r7, [sp, #84]	; 0x54
 800a078:	7852      	ldrb	r2, [r2, #1]
 800a07a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a07e:	f1be 0f09 	cmp.w	lr, #9
 800a082:	d938      	bls.n	800a0f6 <_strtod_l+0x33e>
 800a084:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a086:	1a7f      	subs	r7, r7, r1
 800a088:	2f08      	cmp	r7, #8
 800a08a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a08e:	dc03      	bgt.n	800a098 <_strtod_l+0x2e0>
 800a090:	9908      	ldr	r1, [sp, #32]
 800a092:	428f      	cmp	r7, r1
 800a094:	bfa8      	it	ge
 800a096:	460f      	movge	r7, r1
 800a098:	f1bc 0f00 	cmp.w	ip, #0
 800a09c:	d000      	beq.n	800a0a0 <_strtod_l+0x2e8>
 800a09e:	427f      	negs	r7, r7
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d14f      	bne.n	800a144 <_strtod_l+0x38c>
 800a0a4:	9904      	ldr	r1, [sp, #16]
 800a0a6:	4301      	orrs	r1, r0
 800a0a8:	f47f aec1 	bne.w	8009e2e <_strtod_l+0x76>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f47f aedb 	bne.w	8009e68 <_strtod_l+0xb0>
 800a0b2:	2a69      	cmp	r2, #105	; 0x69
 800a0b4:	d029      	beq.n	800a10a <_strtod_l+0x352>
 800a0b6:	dc26      	bgt.n	800a106 <_strtod_l+0x34e>
 800a0b8:	2a49      	cmp	r2, #73	; 0x49
 800a0ba:	d026      	beq.n	800a10a <_strtod_l+0x352>
 800a0bc:	2a4e      	cmp	r2, #78	; 0x4e
 800a0be:	f47f aed3 	bne.w	8009e68 <_strtod_l+0xb0>
 800a0c2:	499b      	ldr	r1, [pc, #620]	; (800a330 <_strtod_l+0x578>)
 800a0c4:	a815      	add	r0, sp, #84	; 0x54
 800a0c6:	f001 fbf3 	bl	800b8b0 <__match>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f43f aecc 	beq.w	8009e68 <_strtod_l+0xb0>
 800a0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b28      	cmp	r3, #40	; 0x28
 800a0d6:	d12f      	bne.n	800a138 <_strtod_l+0x380>
 800a0d8:	4996      	ldr	r1, [pc, #600]	; (800a334 <_strtod_l+0x57c>)
 800a0da:	aa18      	add	r2, sp, #96	; 0x60
 800a0dc:	a815      	add	r0, sp, #84	; 0x54
 800a0de:	f001 fbfb 	bl	800b8d8 <__hexnan>
 800a0e2:	2805      	cmp	r0, #5
 800a0e4:	d128      	bne.n	800a138 <_strtod_l+0x380>
 800a0e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a0f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a0f4:	e69b      	b.n	8009e2e <_strtod_l+0x76>
 800a0f6:	9f08      	ldr	r7, [sp, #32]
 800a0f8:	210a      	movs	r1, #10
 800a0fa:	fb01 2107 	mla	r1, r1, r7, r2
 800a0fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a102:	9208      	str	r2, [sp, #32]
 800a104:	e7b5      	b.n	800a072 <_strtod_l+0x2ba>
 800a106:	2a6e      	cmp	r2, #110	; 0x6e
 800a108:	e7d9      	b.n	800a0be <_strtod_l+0x306>
 800a10a:	498b      	ldr	r1, [pc, #556]	; (800a338 <_strtod_l+0x580>)
 800a10c:	a815      	add	r0, sp, #84	; 0x54
 800a10e:	f001 fbcf 	bl	800b8b0 <__match>
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f aea8 	beq.w	8009e68 <_strtod_l+0xb0>
 800a118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a11a:	4988      	ldr	r1, [pc, #544]	; (800a33c <_strtod_l+0x584>)
 800a11c:	3b01      	subs	r3, #1
 800a11e:	a815      	add	r0, sp, #84	; 0x54
 800a120:	9315      	str	r3, [sp, #84]	; 0x54
 800a122:	f001 fbc5 	bl	800b8b0 <__match>
 800a126:	b910      	cbnz	r0, 800a12e <_strtod_l+0x376>
 800a128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a12a:	3301      	adds	r3, #1
 800a12c:	9315      	str	r3, [sp, #84]	; 0x54
 800a12e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a34c <_strtod_l+0x594>
 800a132:	f04f 0800 	mov.w	r8, #0
 800a136:	e67a      	b.n	8009e2e <_strtod_l+0x76>
 800a138:	4881      	ldr	r0, [pc, #516]	; (800a340 <_strtod_l+0x588>)
 800a13a:	f001 f8d5 	bl	800b2e8 <nan>
 800a13e:	ec59 8b10 	vmov	r8, r9, d0
 800a142:	e674      	b.n	8009e2e <_strtod_l+0x76>
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a148:	1afb      	subs	r3, r7, r3
 800a14a:	f1bb 0f00 	cmp.w	fp, #0
 800a14e:	bf08      	it	eq
 800a150:	46b3      	moveq	fp, r6
 800a152:	2e10      	cmp	r6, #16
 800a154:	9308      	str	r3, [sp, #32]
 800a156:	4635      	mov	r5, r6
 800a158:	bfa8      	it	ge
 800a15a:	2510      	movge	r5, #16
 800a15c:	f7f6 f9d2 	bl	8000504 <__aeabi_ui2d>
 800a160:	2e09      	cmp	r6, #9
 800a162:	4680      	mov	r8, r0
 800a164:	4689      	mov	r9, r1
 800a166:	dd13      	ble.n	800a190 <_strtod_l+0x3d8>
 800a168:	4b76      	ldr	r3, [pc, #472]	; (800a344 <_strtod_l+0x58c>)
 800a16a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a16e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	4680      	mov	r8, r0
 800a178:	4650      	mov	r0, sl
 800a17a:	4689      	mov	r9, r1
 800a17c:	f7f6 f9c2 	bl	8000504 <__aeabi_ui2d>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4640      	mov	r0, r8
 800a186:	4649      	mov	r1, r9
 800a188:	f7f6 f880 	bl	800028c <__adddf3>
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	2e0f      	cmp	r6, #15
 800a192:	dc38      	bgt.n	800a206 <_strtod_l+0x44e>
 800a194:	9b08      	ldr	r3, [sp, #32]
 800a196:	2b00      	cmp	r3, #0
 800a198:	f43f ae49 	beq.w	8009e2e <_strtod_l+0x76>
 800a19c:	dd24      	ble.n	800a1e8 <_strtod_l+0x430>
 800a19e:	2b16      	cmp	r3, #22
 800a1a0:	dc0b      	bgt.n	800a1ba <_strtod_l+0x402>
 800a1a2:	4968      	ldr	r1, [pc, #416]	; (800a344 <_strtod_l+0x58c>)
 800a1a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	f7f6 fa22 	bl	80005f8 <__aeabi_dmul>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	e639      	b.n	8009e2e <_strtod_l+0x76>
 800a1ba:	9a08      	ldr	r2, [sp, #32]
 800a1bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	db20      	blt.n	800a206 <_strtod_l+0x44e>
 800a1c4:	4c5f      	ldr	r4, [pc, #380]	; (800a344 <_strtod_l+0x58c>)
 800a1c6:	f1c6 060f 	rsb	r6, r6, #15
 800a1ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d6:	f7f6 fa0f 	bl	80005f8 <__aeabi_dmul>
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	1b9e      	subs	r6, r3, r6
 800a1de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a1e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1e6:	e7e3      	b.n	800a1b0 <_strtod_l+0x3f8>
 800a1e8:	9b08      	ldr	r3, [sp, #32]
 800a1ea:	3316      	adds	r3, #22
 800a1ec:	db0b      	blt.n	800a206 <_strtod_l+0x44e>
 800a1ee:	9b05      	ldr	r3, [sp, #20]
 800a1f0:	1bdf      	subs	r7, r3, r7
 800a1f2:	4b54      	ldr	r3, [pc, #336]	; (800a344 <_strtod_l+0x58c>)
 800a1f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4649      	mov	r1, r9
 800a200:	f7f6 fb24 	bl	800084c <__aeabi_ddiv>
 800a204:	e7d6      	b.n	800a1b4 <_strtod_l+0x3fc>
 800a206:	9b08      	ldr	r3, [sp, #32]
 800a208:	1b75      	subs	r5, r6, r5
 800a20a:	441d      	add	r5, r3
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	dd70      	ble.n	800a2f2 <_strtod_l+0x53a>
 800a210:	f015 030f 	ands.w	r3, r5, #15
 800a214:	d00a      	beq.n	800a22c <_strtod_l+0x474>
 800a216:	494b      	ldr	r1, [pc, #300]	; (800a344 <_strtod_l+0x58c>)
 800a218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a21c:	4642      	mov	r2, r8
 800a21e:	464b      	mov	r3, r9
 800a220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a224:	f7f6 f9e8 	bl	80005f8 <__aeabi_dmul>
 800a228:	4680      	mov	r8, r0
 800a22a:	4689      	mov	r9, r1
 800a22c:	f035 050f 	bics.w	r5, r5, #15
 800a230:	d04d      	beq.n	800a2ce <_strtod_l+0x516>
 800a232:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a236:	dd22      	ble.n	800a27e <_strtod_l+0x4c6>
 800a238:	2500      	movs	r5, #0
 800a23a:	46ab      	mov	fp, r5
 800a23c:	9509      	str	r5, [sp, #36]	; 0x24
 800a23e:	9505      	str	r5, [sp, #20]
 800a240:	2322      	movs	r3, #34	; 0x22
 800a242:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a34c <_strtod_l+0x594>
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	f04f 0800 	mov.w	r8, #0
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f43f aded 	beq.w	8009e2e <_strtod_l+0x76>
 800a254:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff f924 	bl	80094a4 <_Bfree>
 800a25c:	9905      	ldr	r1, [sp, #20]
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff f920 	bl	80094a4 <_Bfree>
 800a264:	4659      	mov	r1, fp
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff f91c 	bl	80094a4 <_Bfree>
 800a26c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff f918 	bl	80094a4 <_Bfree>
 800a274:	4629      	mov	r1, r5
 800a276:	4620      	mov	r0, r4
 800a278:	f7ff f914 	bl	80094a4 <_Bfree>
 800a27c:	e5d7      	b.n	8009e2e <_strtod_l+0x76>
 800a27e:	4b32      	ldr	r3, [pc, #200]	; (800a348 <_strtod_l+0x590>)
 800a280:	9304      	str	r3, [sp, #16]
 800a282:	2300      	movs	r3, #0
 800a284:	112d      	asrs	r5, r5, #4
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	469a      	mov	sl, r3
 800a28c:	2d01      	cmp	r5, #1
 800a28e:	dc21      	bgt.n	800a2d4 <_strtod_l+0x51c>
 800a290:	b10b      	cbz	r3, 800a296 <_strtod_l+0x4de>
 800a292:	4680      	mov	r8, r0
 800a294:	4689      	mov	r9, r1
 800a296:	492c      	ldr	r1, [pc, #176]	; (800a348 <_strtod_l+0x590>)
 800a298:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a29c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a8:	f7f6 f9a6 	bl	80005f8 <__aeabi_dmul>
 800a2ac:	4b27      	ldr	r3, [pc, #156]	; (800a34c <_strtod_l+0x594>)
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	400b      	ands	r3, r1
 800a2b2:	4927      	ldr	r1, [pc, #156]	; (800a350 <_strtod_l+0x598>)
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	d8be      	bhi.n	800a238 <_strtod_l+0x480>
 800a2ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	bf86      	itte	hi
 800a2c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a354 <_strtod_l+0x59c>
 800a2c6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a2ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	e07b      	b.n	800a3cc <_strtod_l+0x614>
 800a2d4:	07ea      	lsls	r2, r5, #31
 800a2d6:	d505      	bpl.n	800a2e4 <_strtod_l+0x52c>
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f6 f98b 	bl	80005f8 <__aeabi_dmul>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	9a04      	ldr	r2, [sp, #16]
 800a2e6:	3208      	adds	r2, #8
 800a2e8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ec:	106d      	asrs	r5, r5, #1
 800a2ee:	9204      	str	r2, [sp, #16]
 800a2f0:	e7cc      	b.n	800a28c <_strtod_l+0x4d4>
 800a2f2:	d0ec      	beq.n	800a2ce <_strtod_l+0x516>
 800a2f4:	426d      	negs	r5, r5
 800a2f6:	f015 020f 	ands.w	r2, r5, #15
 800a2fa:	d00a      	beq.n	800a312 <_strtod_l+0x55a>
 800a2fc:	4b11      	ldr	r3, [pc, #68]	; (800a344 <_strtod_l+0x58c>)
 800a2fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f6 fa9f 	bl	800084c <__aeabi_ddiv>
 800a30e:	4680      	mov	r8, r0
 800a310:	4689      	mov	r9, r1
 800a312:	112d      	asrs	r5, r5, #4
 800a314:	d0db      	beq.n	800a2ce <_strtod_l+0x516>
 800a316:	2d1f      	cmp	r5, #31
 800a318:	dd1e      	ble.n	800a358 <_strtod_l+0x5a0>
 800a31a:	2500      	movs	r5, #0
 800a31c:	46ab      	mov	fp, r5
 800a31e:	9509      	str	r5, [sp, #36]	; 0x24
 800a320:	9505      	str	r5, [sp, #20]
 800a322:	2322      	movs	r3, #34	; 0x22
 800a324:	f04f 0800 	mov.w	r8, #0
 800a328:	f04f 0900 	mov.w	r9, #0
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	e78d      	b.n	800a24c <_strtod_l+0x494>
 800a330:	0800dc55 	.word	0x0800dc55
 800a334:	0800de7c 	.word	0x0800de7c
 800a338:	0800dc4d 	.word	0x0800dc4d
 800a33c:	0800dc84 	.word	0x0800dc84
 800a340:	0800e00d 	.word	0x0800e00d
 800a344:	0800dd90 	.word	0x0800dd90
 800a348:	0800dd68 	.word	0x0800dd68
 800a34c:	7ff00000 	.word	0x7ff00000
 800a350:	7ca00000 	.word	0x7ca00000
 800a354:	7fefffff 	.word	0x7fefffff
 800a358:	f015 0310 	ands.w	r3, r5, #16
 800a35c:	bf18      	it	ne
 800a35e:	236a      	movne	r3, #106	; 0x6a
 800a360:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a704 <_strtod_l+0x94c>
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	2300      	movs	r3, #0
 800a36c:	07ea      	lsls	r2, r5, #31
 800a36e:	d504      	bpl.n	800a37a <_strtod_l+0x5c2>
 800a370:	e9da 2300 	ldrd	r2, r3, [sl]
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	2301      	movs	r3, #1
 800a37a:	106d      	asrs	r5, r5, #1
 800a37c:	f10a 0a08 	add.w	sl, sl, #8
 800a380:	d1f4      	bne.n	800a36c <_strtod_l+0x5b4>
 800a382:	b10b      	cbz	r3, 800a388 <_strtod_l+0x5d0>
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	b1bb      	cbz	r3, 800a3bc <_strtod_l+0x604>
 800a38c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a390:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a394:	2b00      	cmp	r3, #0
 800a396:	4649      	mov	r1, r9
 800a398:	dd10      	ble.n	800a3bc <_strtod_l+0x604>
 800a39a:	2b1f      	cmp	r3, #31
 800a39c:	f340 811e 	ble.w	800a5dc <_strtod_l+0x824>
 800a3a0:	2b34      	cmp	r3, #52	; 0x34
 800a3a2:	bfde      	ittt	le
 800a3a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a3a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a3ac:	4093      	lslle	r3, r2
 800a3ae:	f04f 0800 	mov.w	r8, #0
 800a3b2:	bfcc      	ite	gt
 800a3b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a3b8:	ea03 0901 	andle.w	r9, r3, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f7f6 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1a6      	bne.n	800a31a <_strtod_l+0x562>
 800a3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3d2:	4633      	mov	r3, r6
 800a3d4:	465a      	mov	r2, fp
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7ff f8cc 	bl	8009574 <__s2b>
 800a3dc:	9009      	str	r0, [sp, #36]	; 0x24
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f af2a 	beq.w	800a238 <_strtod_l+0x480>
 800a3e4:	9a08      	ldr	r2, [sp, #32]
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	eba3 0307 	sub.w	r3, r3, r7
 800a3ee:	bfa8      	it	ge
 800a3f0:	2300      	movge	r3, #0
 800a3f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a3fc:	46ab      	mov	fp, r5
 800a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a400:	4620      	mov	r0, r4
 800a402:	6859      	ldr	r1, [r3, #4]
 800a404:	f7ff f80e 	bl	8009424 <_Balloc>
 800a408:	9005      	str	r0, [sp, #20]
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f43f af18 	beq.w	800a240 <_strtod_l+0x488>
 800a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	3202      	adds	r2, #2
 800a416:	f103 010c 	add.w	r1, r3, #12
 800a41a:	0092      	lsls	r2, r2, #2
 800a41c:	300c      	adds	r0, #12
 800a41e:	f7fe f872 	bl	8008506 <memcpy>
 800a422:	ec49 8b10 	vmov	d0, r8, r9
 800a426:	aa18      	add	r2, sp, #96	; 0x60
 800a428:	a917      	add	r1, sp, #92	; 0x5c
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff fbd6 	bl	8009bdc <__d2b>
 800a430:	ec49 8b18 	vmov	d8, r8, r9
 800a434:	9016      	str	r0, [sp, #88]	; 0x58
 800a436:	2800      	cmp	r0, #0
 800a438:	f43f af02 	beq.w	800a240 <_strtod_l+0x488>
 800a43c:	2101      	movs	r1, #1
 800a43e:	4620      	mov	r0, r4
 800a440:	f7ff f930 	bl	80096a4 <__i2b>
 800a444:	4683      	mov	fp, r0
 800a446:	2800      	cmp	r0, #0
 800a448:	f43f aefa 	beq.w	800a240 <_strtod_l+0x488>
 800a44c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a44e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a450:	2e00      	cmp	r6, #0
 800a452:	bfab      	itete	ge
 800a454:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a456:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a458:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a45a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a45e:	bfac      	ite	ge
 800a460:	eb06 0a03 	addge.w	sl, r6, r3
 800a464:	1b9f      	sublt	r7, r3, r6
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	1af6      	subs	r6, r6, r3
 800a46a:	4416      	add	r6, r2
 800a46c:	4ba0      	ldr	r3, [pc, #640]	; (800a6f0 <_strtod_l+0x938>)
 800a46e:	3e01      	subs	r6, #1
 800a470:	429e      	cmp	r6, r3
 800a472:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a476:	f280 80c4 	bge.w	800a602 <_strtod_l+0x84a>
 800a47a:	1b9b      	subs	r3, r3, r6
 800a47c:	2b1f      	cmp	r3, #31
 800a47e:	eba2 0203 	sub.w	r2, r2, r3
 800a482:	f04f 0101 	mov.w	r1, #1
 800a486:	f300 80b0 	bgt.w	800a5ea <_strtod_l+0x832>
 800a48a:	fa01 f303 	lsl.w	r3, r1, r3
 800a48e:	930e      	str	r3, [sp, #56]	; 0x38
 800a490:	2300      	movs	r3, #0
 800a492:	930d      	str	r3, [sp, #52]	; 0x34
 800a494:	eb0a 0602 	add.w	r6, sl, r2
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	45b2      	cmp	sl, r6
 800a49c:	4417      	add	r7, r2
 800a49e:	441f      	add	r7, r3
 800a4a0:	4653      	mov	r3, sl
 800a4a2:	bfa8      	it	ge
 800a4a4:	4633      	movge	r3, r6
 800a4a6:	42bb      	cmp	r3, r7
 800a4a8:	bfa8      	it	ge
 800a4aa:	463b      	movge	r3, r7
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bfc2      	ittt	gt
 800a4b0:	1af6      	subgt	r6, r6, r3
 800a4b2:	1aff      	subgt	r7, r7, r3
 800a4b4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd17      	ble.n	800a4ee <_strtod_l+0x736>
 800a4be:	4659      	mov	r1, fp
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff f9ae 	bl	8009824 <__pow5mult>
 800a4c8:	4683      	mov	fp, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f43f aeb8 	beq.w	800a240 <_strtod_l+0x488>
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f7ff f8fb 	bl	80096d0 <__multiply>
 800a4da:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f43f aeaf 	beq.w	800a240 <_strtod_l+0x488>
 800a4e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f7fe ffdd 	bl	80094a4 <_Bfree>
 800a4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ec:	9316      	str	r3, [sp, #88]	; 0x58
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	f300 808c 	bgt.w	800a60c <_strtod_l+0x854>
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd08      	ble.n	800a50c <_strtod_l+0x754>
 800a4fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4fc:	9905      	ldr	r1, [sp, #20]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7ff f990 	bl	8009824 <__pow5mult>
 800a504:	9005      	str	r0, [sp, #20]
 800a506:	2800      	cmp	r0, #0
 800a508:	f43f ae9a 	beq.w	800a240 <_strtod_l+0x488>
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	dd08      	ble.n	800a522 <_strtod_l+0x76a>
 800a510:	9905      	ldr	r1, [sp, #20]
 800a512:	463a      	mov	r2, r7
 800a514:	4620      	mov	r0, r4
 800a516:	f7ff f9df 	bl	80098d8 <__lshift>
 800a51a:	9005      	str	r0, [sp, #20]
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f43f ae8f 	beq.w	800a240 <_strtod_l+0x488>
 800a522:	f1ba 0f00 	cmp.w	sl, #0
 800a526:	dd08      	ble.n	800a53a <_strtod_l+0x782>
 800a528:	4659      	mov	r1, fp
 800a52a:	4652      	mov	r2, sl
 800a52c:	4620      	mov	r0, r4
 800a52e:	f7ff f9d3 	bl	80098d8 <__lshift>
 800a532:	4683      	mov	fp, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae83 	beq.w	800a240 <_strtod_l+0x488>
 800a53a:	9a05      	ldr	r2, [sp, #20]
 800a53c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff fa52 	bl	80099e8 <__mdiff>
 800a544:	4605      	mov	r5, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae7a 	beq.w	800a240 <_strtod_l+0x488>
 800a54c:	68c3      	ldr	r3, [r0, #12]
 800a54e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a550:	2300      	movs	r3, #0
 800a552:	60c3      	str	r3, [r0, #12]
 800a554:	4659      	mov	r1, fp
 800a556:	f7ff fa2b 	bl	80099b0 <__mcmp>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	da60      	bge.n	800a620 <_strtod_l+0x868>
 800a55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a560:	ea53 0308 	orrs.w	r3, r3, r8
 800a564:	f040 8084 	bne.w	800a670 <_strtod_l+0x8b8>
 800a568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d17f      	bne.n	800a670 <_strtod_l+0x8b8>
 800a570:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a574:	0d1b      	lsrs	r3, r3, #20
 800a576:	051b      	lsls	r3, r3, #20
 800a578:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a57c:	d978      	bls.n	800a670 <_strtod_l+0x8b8>
 800a57e:	696b      	ldr	r3, [r5, #20]
 800a580:	b913      	cbnz	r3, 800a588 <_strtod_l+0x7d0>
 800a582:	692b      	ldr	r3, [r5, #16]
 800a584:	2b01      	cmp	r3, #1
 800a586:	dd73      	ble.n	800a670 <_strtod_l+0x8b8>
 800a588:	4629      	mov	r1, r5
 800a58a:	2201      	movs	r2, #1
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7ff f9a3 	bl	80098d8 <__lshift>
 800a592:	4659      	mov	r1, fp
 800a594:	4605      	mov	r5, r0
 800a596:	f7ff fa0b 	bl	80099b0 <__mcmp>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	dd68      	ble.n	800a670 <_strtod_l+0x8b8>
 800a59e:	9904      	ldr	r1, [sp, #16]
 800a5a0:	4a54      	ldr	r2, [pc, #336]	; (800a6f4 <_strtod_l+0x93c>)
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	f000 8084 	beq.w	800a6b2 <_strtod_l+0x8fa>
 800a5aa:	ea02 0109 	and.w	r1, r2, r9
 800a5ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a5b2:	dc7e      	bgt.n	800a6b2 <_strtod_l+0x8fa>
 800a5b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a5b8:	f77f aeb3 	ble.w	800a322 <_strtod_l+0x56a>
 800a5bc:	4b4e      	ldr	r3, [pc, #312]	; (800a6f8 <_strtod_l+0x940>)
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	4b4a      	ldr	r3, [pc, #296]	; (800a6f4 <_strtod_l+0x93c>)
 800a5ca:	400b      	ands	r3, r1
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f47f ae3f 	bne.w	800a254 <_strtod_l+0x49c>
 800a5d6:	2322      	movs	r3, #34	; 0x22
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	e63b      	b.n	800a254 <_strtod_l+0x49c>
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	ea03 0808 	and.w	r8, r3, r8
 800a5e8:	e6e8      	b.n	800a3bc <_strtod_l+0x604>
 800a5ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a5ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a5f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a5f6:	36e2      	adds	r6, #226	; 0xe2
 800a5f8:	fa01 f306 	lsl.w	r3, r1, r6
 800a5fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a600:	e748      	b.n	800a494 <_strtod_l+0x6dc>
 800a602:	2100      	movs	r1, #0
 800a604:	2301      	movs	r3, #1
 800a606:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a60a:	e743      	b.n	800a494 <_strtod_l+0x6dc>
 800a60c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a60e:	4632      	mov	r2, r6
 800a610:	4620      	mov	r0, r4
 800a612:	f7ff f961 	bl	80098d8 <__lshift>
 800a616:	9016      	str	r0, [sp, #88]	; 0x58
 800a618:	2800      	cmp	r0, #0
 800a61a:	f47f af6b 	bne.w	800a4f4 <_strtod_l+0x73c>
 800a61e:	e60f      	b.n	800a240 <_strtod_l+0x488>
 800a620:	46ca      	mov	sl, r9
 800a622:	d171      	bne.n	800a708 <_strtod_l+0x950>
 800a624:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a626:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a62a:	b352      	cbz	r2, 800a682 <_strtod_l+0x8ca>
 800a62c:	4a33      	ldr	r2, [pc, #204]	; (800a6fc <_strtod_l+0x944>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d12a      	bne.n	800a688 <_strtod_l+0x8d0>
 800a632:	9b04      	ldr	r3, [sp, #16]
 800a634:	4641      	mov	r1, r8
 800a636:	b1fb      	cbz	r3, 800a678 <_strtod_l+0x8c0>
 800a638:	4b2e      	ldr	r3, [pc, #184]	; (800a6f4 <_strtod_l+0x93c>)
 800a63a:	ea09 0303 	and.w	r3, r9, r3
 800a63e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a642:	f04f 32ff 	mov.w	r2, #4294967295
 800a646:	d81a      	bhi.n	800a67e <_strtod_l+0x8c6>
 800a648:	0d1b      	lsrs	r3, r3, #20
 800a64a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a64e:	fa02 f303 	lsl.w	r3, r2, r3
 800a652:	4299      	cmp	r1, r3
 800a654:	d118      	bne.n	800a688 <_strtod_l+0x8d0>
 800a656:	4b2a      	ldr	r3, [pc, #168]	; (800a700 <_strtod_l+0x948>)
 800a658:	459a      	cmp	sl, r3
 800a65a:	d102      	bne.n	800a662 <_strtod_l+0x8aa>
 800a65c:	3101      	adds	r1, #1
 800a65e:	f43f adef 	beq.w	800a240 <_strtod_l+0x488>
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <_strtod_l+0x93c>)
 800a664:	ea0a 0303 	and.w	r3, sl, r3
 800a668:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a66c:	f04f 0800 	mov.w	r8, #0
 800a670:	9b04      	ldr	r3, [sp, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1a2      	bne.n	800a5bc <_strtod_l+0x804>
 800a676:	e5ed      	b.n	800a254 <_strtod_l+0x49c>
 800a678:	f04f 33ff 	mov.w	r3, #4294967295
 800a67c:	e7e9      	b.n	800a652 <_strtod_l+0x89a>
 800a67e:	4613      	mov	r3, r2
 800a680:	e7e7      	b.n	800a652 <_strtod_l+0x89a>
 800a682:	ea53 0308 	orrs.w	r3, r3, r8
 800a686:	d08a      	beq.n	800a59e <_strtod_l+0x7e6>
 800a688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a68a:	b1e3      	cbz	r3, 800a6c6 <_strtod_l+0x90e>
 800a68c:	ea13 0f0a 	tst.w	r3, sl
 800a690:	d0ee      	beq.n	800a670 <_strtod_l+0x8b8>
 800a692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a694:	9a04      	ldr	r2, [sp, #16]
 800a696:	4640      	mov	r0, r8
 800a698:	4649      	mov	r1, r9
 800a69a:	b1c3      	cbz	r3, 800a6ce <_strtod_l+0x916>
 800a69c:	f7ff fb6f 	bl	8009d7e <sulp>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	ec51 0b18 	vmov	r0, r1, d8
 800a6a8:	f7f5 fdf0 	bl	800028c <__adddf3>
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	4689      	mov	r9, r1
 800a6b0:	e7de      	b.n	800a670 <_strtod_l+0x8b8>
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a6bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a6c0:	f04f 38ff 	mov.w	r8, #4294967295
 800a6c4:	e7d4      	b.n	800a670 <_strtod_l+0x8b8>
 800a6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c8:	ea13 0f08 	tst.w	r3, r8
 800a6cc:	e7e0      	b.n	800a690 <_strtod_l+0x8d8>
 800a6ce:	f7ff fb56 	bl	8009d7e <sulp>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	ec51 0b18 	vmov	r0, r1, d8
 800a6da:	f7f5 fdd5 	bl	8000288 <__aeabi_dsub>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	f7f6 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d0c0      	beq.n	800a670 <_strtod_l+0x8b8>
 800a6ee:	e618      	b.n	800a322 <_strtod_l+0x56a>
 800a6f0:	fffffc02 	.word	0xfffffc02
 800a6f4:	7ff00000 	.word	0x7ff00000
 800a6f8:	39500000 	.word	0x39500000
 800a6fc:	000fffff 	.word	0x000fffff
 800a700:	7fefffff 	.word	0x7fefffff
 800a704:	0800de90 	.word	0x0800de90
 800a708:	4659      	mov	r1, fp
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7ff fac0 	bl	8009c90 <__ratio>
 800a710:	ec57 6b10 	vmov	r6, r7, d0
 800a714:	ee10 0a10 	vmov	r0, s0
 800a718:	2200      	movs	r2, #0
 800a71a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 f9e6 	bl	8000af0 <__aeabi_dcmple>
 800a724:	2800      	cmp	r0, #0
 800a726:	d071      	beq.n	800a80c <_strtod_l+0xa54>
 800a728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d17c      	bne.n	800a828 <_strtod_l+0xa70>
 800a72e:	f1b8 0f00 	cmp.w	r8, #0
 800a732:	d15a      	bne.n	800a7ea <_strtod_l+0xa32>
 800a734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d15d      	bne.n	800a7f8 <_strtod_l+0xa40>
 800a73c:	4b90      	ldr	r3, [pc, #576]	; (800a980 <_strtod_l+0xbc8>)
 800a73e:	2200      	movs	r2, #0
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d15c      	bne.n	800a806 <_strtod_l+0xa4e>
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	4b8c      	ldr	r3, [pc, #560]	; (800a984 <_strtod_l+0xbcc>)
 800a752:	2200      	movs	r2, #0
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	4606      	mov	r6, r0
 800a75a:	460f      	mov	r7, r1
 800a75c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a760:	9606      	str	r6, [sp, #24]
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a768:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a76c:	4b86      	ldr	r3, [pc, #536]	; (800a988 <_strtod_l+0xbd0>)
 800a76e:	ea0a 0303 	and.w	r3, sl, r3
 800a772:	930d      	str	r3, [sp, #52]	; 0x34
 800a774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a776:	4b85      	ldr	r3, [pc, #532]	; (800a98c <_strtod_l+0xbd4>)
 800a778:	429a      	cmp	r2, r3
 800a77a:	f040 8090 	bne.w	800a89e <_strtod_l+0xae6>
 800a77e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a782:	ec49 8b10 	vmov	d0, r8, r9
 800a786:	f7ff f9b9 	bl	8009afc <__ulp>
 800a78a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a78e:	ec51 0b10 	vmov	r0, r1, d0
 800a792:	f7f5 ff31 	bl	80005f8 <__aeabi_dmul>
 800a796:	4642      	mov	r2, r8
 800a798:	464b      	mov	r3, r9
 800a79a:	f7f5 fd77 	bl	800028c <__adddf3>
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4979      	ldr	r1, [pc, #484]	; (800a988 <_strtod_l+0xbd0>)
 800a7a2:	4a7b      	ldr	r2, [pc, #492]	; (800a990 <_strtod_l+0xbd8>)
 800a7a4:	4019      	ands	r1, r3
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	d944      	bls.n	800a836 <_strtod_l+0xa7e>
 800a7ac:	ee18 2a90 	vmov	r2, s17
 800a7b0:	4b78      	ldr	r3, [pc, #480]	; (800a994 <_strtod_l+0xbdc>)
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d104      	bne.n	800a7c0 <_strtod_l+0xa08>
 800a7b6:	ee18 3a10 	vmov	r3, s16
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	f43f ad40 	beq.w	800a240 <_strtod_l+0x488>
 800a7c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a994 <_strtod_l+0xbdc>
 800a7c4:	f04f 38ff 	mov.w	r8, #4294967295
 800a7c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7fe fe6a 	bl	80094a4 <_Bfree>
 800a7d0:	9905      	ldr	r1, [sp, #20]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7fe fe66 	bl	80094a4 <_Bfree>
 800a7d8:	4659      	mov	r1, fp
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7fe fe62 	bl	80094a4 <_Bfree>
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f7fe fe5e 	bl	80094a4 <_Bfree>
 800a7e8:	e609      	b.n	800a3fe <_strtod_l+0x646>
 800a7ea:	f1b8 0f01 	cmp.w	r8, #1
 800a7ee:	d103      	bne.n	800a7f8 <_strtod_l+0xa40>
 800a7f0:	f1b9 0f00 	cmp.w	r9, #0
 800a7f4:	f43f ad95 	beq.w	800a322 <_strtod_l+0x56a>
 800a7f8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a950 <_strtod_l+0xb98>
 800a7fc:	4f60      	ldr	r7, [pc, #384]	; (800a980 <_strtod_l+0xbc8>)
 800a7fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a802:	2600      	movs	r6, #0
 800a804:	e7ae      	b.n	800a764 <_strtod_l+0x9ac>
 800a806:	4f5f      	ldr	r7, [pc, #380]	; (800a984 <_strtod_l+0xbcc>)
 800a808:	2600      	movs	r6, #0
 800a80a:	e7a7      	b.n	800a75c <_strtod_l+0x9a4>
 800a80c:	4b5d      	ldr	r3, [pc, #372]	; (800a984 <_strtod_l+0xbcc>)
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	2200      	movs	r2, #0
 800a814:	f7f5 fef0 	bl	80005f8 <__aeabi_dmul>
 800a818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d09c      	beq.n	800a75c <_strtod_l+0x9a4>
 800a822:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a826:	e79d      	b.n	800a764 <_strtod_l+0x9ac>
 800a828:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a958 <_strtod_l+0xba0>
 800a82c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a830:	ec57 6b17 	vmov	r6, r7, d7
 800a834:	e796      	b.n	800a764 <_strtod_l+0x9ac>
 800a836:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	46ca      	mov	sl, r9
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1c2      	bne.n	800a7c8 <_strtod_l+0xa10>
 800a842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a848:	0d1b      	lsrs	r3, r3, #20
 800a84a:	051b      	lsls	r3, r3, #20
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d1bb      	bne.n	800a7c8 <_strtod_l+0xa10>
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f6 fa30 	bl	8000cb8 <__aeabi_d2lz>
 800a858:	f7f5 fea0 	bl	800059c <__aeabi_l2d>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a86a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a86e:	ea43 0308 	orr.w	r3, r3, r8
 800a872:	4313      	orrs	r3, r2
 800a874:	4606      	mov	r6, r0
 800a876:	460f      	mov	r7, r1
 800a878:	d054      	beq.n	800a924 <_strtod_l+0xb6c>
 800a87a:	a339      	add	r3, pc, #228	; (adr r3, 800a960 <_strtod_l+0xba8>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f6 f92c 	bl	8000adc <__aeabi_dcmplt>
 800a884:	2800      	cmp	r0, #0
 800a886:	f47f ace5 	bne.w	800a254 <_strtod_l+0x49c>
 800a88a:	a337      	add	r3, pc, #220	; (adr r3, 800a968 <_strtod_l+0xbb0>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	4630      	mov	r0, r6
 800a892:	4639      	mov	r1, r7
 800a894:	f7f6 f940 	bl	8000b18 <__aeabi_dcmpgt>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d095      	beq.n	800a7c8 <_strtod_l+0xa10>
 800a89c:	e4da      	b.n	800a254 <_strtod_l+0x49c>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	b333      	cbz	r3, 800a8f0 <_strtod_l+0xb38>
 800a8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8a8:	d822      	bhi.n	800a8f0 <_strtod_l+0xb38>
 800a8aa:	a331      	add	r3, pc, #196	; (adr r3, 800a970 <_strtod_l+0xbb8>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f6 f91c 	bl	8000af0 <__aeabi_dcmple>
 800a8b8:	b1a0      	cbz	r0, 800a8e4 <_strtod_l+0xb2c>
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7f6 f973 	bl	8000ba8 <__aeabi_d2uiz>
 800a8c2:	2801      	cmp	r0, #1
 800a8c4:	bf38      	it	cc
 800a8c6:	2001      	movcc	r0, #1
 800a8c8:	f7f5 fe1c 	bl	8000504 <__aeabi_ui2d>
 800a8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	bb23      	cbnz	r3, 800a91e <_strtod_l+0xb66>
 800a8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8d8:	9010      	str	r0, [sp, #64]	; 0x40
 800a8da:	9311      	str	r3, [sp, #68]	; 0x44
 800a8dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a8ec:	1a9b      	subs	r3, r3, r2
 800a8ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a8f8:	eef0 0a68 	vmov.f32	s1, s17
 800a8fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a900:	f7ff f8fc 	bl	8009afc <__ulp>
 800a904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a908:	ec53 2b10 	vmov	r2, r3, d0
 800a90c:	f7f5 fe74 	bl	80005f8 <__aeabi_dmul>
 800a910:	ec53 2b18 	vmov	r2, r3, d8
 800a914:	f7f5 fcba 	bl	800028c <__adddf3>
 800a918:	4680      	mov	r8, r0
 800a91a:	4689      	mov	r9, r1
 800a91c:	e78d      	b.n	800a83a <_strtod_l+0xa82>
 800a91e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a922:	e7db      	b.n	800a8dc <_strtod_l+0xb24>
 800a924:	a314      	add	r3, pc, #80	; (adr r3, 800a978 <_strtod_l+0xbc0>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f7f6 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800a92e:	e7b3      	b.n	800a898 <_strtod_l+0xae0>
 800a930:	2300      	movs	r3, #0
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	f7ff ba7c 	b.w	8009e36 <_strtod_l+0x7e>
 800a93e:	2a65      	cmp	r2, #101	; 0x65
 800a940:	f43f ab75 	beq.w	800a02e <_strtod_l+0x276>
 800a944:	2a45      	cmp	r2, #69	; 0x45
 800a946:	f43f ab72 	beq.w	800a02e <_strtod_l+0x276>
 800a94a:	2301      	movs	r3, #1
 800a94c:	f7ff bbaa 	b.w	800a0a4 <_strtod_l+0x2ec>
 800a950:	00000000 	.word	0x00000000
 800a954:	bff00000 	.word	0xbff00000
 800a958:	00000000 	.word	0x00000000
 800a95c:	3ff00000 	.word	0x3ff00000
 800a960:	94a03595 	.word	0x94a03595
 800a964:	3fdfffff 	.word	0x3fdfffff
 800a968:	35afe535 	.word	0x35afe535
 800a96c:	3fe00000 	.word	0x3fe00000
 800a970:	ffc00000 	.word	0xffc00000
 800a974:	41dfffff 	.word	0x41dfffff
 800a978:	94a03595 	.word	0x94a03595
 800a97c:	3fcfffff 	.word	0x3fcfffff
 800a980:	3ff00000 	.word	0x3ff00000
 800a984:	3fe00000 	.word	0x3fe00000
 800a988:	7ff00000 	.word	0x7ff00000
 800a98c:	7fe00000 	.word	0x7fe00000
 800a990:	7c9fffff 	.word	0x7c9fffff
 800a994:	7fefffff 	.word	0x7fefffff

0800a998 <_strtod_r>:
 800a998:	4b01      	ldr	r3, [pc, #4]	; (800a9a0 <_strtod_r+0x8>)
 800a99a:	f7ff ba0d 	b.w	8009db8 <_strtod_l>
 800a99e:	bf00      	nop
 800a9a0:	20000098 	.word	0x20000098

0800a9a4 <_strtol_l.constprop.0>:
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9aa:	d001      	beq.n	800a9b0 <_strtol_l.constprop.0+0xc>
 800a9ac:	2b24      	cmp	r3, #36	; 0x24
 800a9ae:	d906      	bls.n	800a9be <_strtol_l.constprop.0+0x1a>
 800a9b0:	f7fd fd7c 	bl	80084ac <__errno>
 800a9b4:	2316      	movs	r3, #22
 800a9b6:	6003      	str	r3, [r0, #0]
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aaa4 <_strtol_l.constprop.0+0x100>
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	462e      	mov	r6, r5
 800a9c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a9ce:	f017 0708 	ands.w	r7, r7, #8
 800a9d2:	d1f7      	bne.n	800a9c4 <_strtol_l.constprop.0+0x20>
 800a9d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a9d6:	d132      	bne.n	800aa3e <_strtol_l.constprop.0+0x9a>
 800a9d8:	782c      	ldrb	r4, [r5, #0]
 800a9da:	2701      	movs	r7, #1
 800a9dc:	1cb5      	adds	r5, r6, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d05b      	beq.n	800aa9a <_strtol_l.constprop.0+0xf6>
 800a9e2:	2b10      	cmp	r3, #16
 800a9e4:	d109      	bne.n	800a9fa <_strtol_l.constprop.0+0x56>
 800a9e6:	2c30      	cmp	r4, #48	; 0x30
 800a9e8:	d107      	bne.n	800a9fa <_strtol_l.constprop.0+0x56>
 800a9ea:	782c      	ldrb	r4, [r5, #0]
 800a9ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9f0:	2c58      	cmp	r4, #88	; 0x58
 800a9f2:	d14d      	bne.n	800aa90 <_strtol_l.constprop.0+0xec>
 800a9f4:	786c      	ldrb	r4, [r5, #1]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	3502      	adds	r5, #2
 800a9fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa02:	f04f 0e00 	mov.w	lr, #0
 800aa06:	fbb8 f9f3 	udiv	r9, r8, r3
 800aa0a:	4676      	mov	r6, lr
 800aa0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800aa10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aa14:	f1bc 0f09 	cmp.w	ip, #9
 800aa18:	d816      	bhi.n	800aa48 <_strtol_l.constprop.0+0xa4>
 800aa1a:	4664      	mov	r4, ip
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	dd24      	ble.n	800aa6a <_strtol_l.constprop.0+0xc6>
 800aa20:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa24:	d008      	beq.n	800aa38 <_strtol_l.constprop.0+0x94>
 800aa26:	45b1      	cmp	r9, r6
 800aa28:	d31c      	bcc.n	800aa64 <_strtol_l.constprop.0+0xc0>
 800aa2a:	d101      	bne.n	800aa30 <_strtol_l.constprop.0+0x8c>
 800aa2c:	45a2      	cmp	sl, r4
 800aa2e:	db19      	blt.n	800aa64 <_strtol_l.constprop.0+0xc0>
 800aa30:	fb06 4603 	mla	r6, r6, r3, r4
 800aa34:	f04f 0e01 	mov.w	lr, #1
 800aa38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3c:	e7e8      	b.n	800aa10 <_strtol_l.constprop.0+0x6c>
 800aa3e:	2c2b      	cmp	r4, #43	; 0x2b
 800aa40:	bf04      	itt	eq
 800aa42:	782c      	ldrbeq	r4, [r5, #0]
 800aa44:	1cb5      	addeq	r5, r6, #2
 800aa46:	e7ca      	b.n	800a9de <_strtol_l.constprop.0+0x3a>
 800aa48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa4c:	f1bc 0f19 	cmp.w	ip, #25
 800aa50:	d801      	bhi.n	800aa56 <_strtol_l.constprop.0+0xb2>
 800aa52:	3c37      	subs	r4, #55	; 0x37
 800aa54:	e7e2      	b.n	800aa1c <_strtol_l.constprop.0+0x78>
 800aa56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa5a:	f1bc 0f19 	cmp.w	ip, #25
 800aa5e:	d804      	bhi.n	800aa6a <_strtol_l.constprop.0+0xc6>
 800aa60:	3c57      	subs	r4, #87	; 0x57
 800aa62:	e7db      	b.n	800aa1c <_strtol_l.constprop.0+0x78>
 800aa64:	f04f 3eff 	mov.w	lr, #4294967295
 800aa68:	e7e6      	b.n	800aa38 <_strtol_l.constprop.0+0x94>
 800aa6a:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa6e:	d105      	bne.n	800aa7c <_strtol_l.constprop.0+0xd8>
 800aa70:	2322      	movs	r3, #34	; 0x22
 800aa72:	6003      	str	r3, [r0, #0]
 800aa74:	4646      	mov	r6, r8
 800aa76:	b942      	cbnz	r2, 800aa8a <_strtol_l.constprop.0+0xe6>
 800aa78:	4630      	mov	r0, r6
 800aa7a:	e79e      	b.n	800a9ba <_strtol_l.constprop.0+0x16>
 800aa7c:	b107      	cbz	r7, 800aa80 <_strtol_l.constprop.0+0xdc>
 800aa7e:	4276      	negs	r6, r6
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d0f9      	beq.n	800aa78 <_strtol_l.constprop.0+0xd4>
 800aa84:	f1be 0f00 	cmp.w	lr, #0
 800aa88:	d000      	beq.n	800aa8c <_strtol_l.constprop.0+0xe8>
 800aa8a:	1e69      	subs	r1, r5, #1
 800aa8c:	6011      	str	r1, [r2, #0]
 800aa8e:	e7f3      	b.n	800aa78 <_strtol_l.constprop.0+0xd4>
 800aa90:	2430      	movs	r4, #48	; 0x30
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1b1      	bne.n	800a9fa <_strtol_l.constprop.0+0x56>
 800aa96:	2308      	movs	r3, #8
 800aa98:	e7af      	b.n	800a9fa <_strtol_l.constprop.0+0x56>
 800aa9a:	2c30      	cmp	r4, #48	; 0x30
 800aa9c:	d0a5      	beq.n	800a9ea <_strtol_l.constprop.0+0x46>
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e7ab      	b.n	800a9fa <_strtol_l.constprop.0+0x56>
 800aaa2:	bf00      	nop
 800aaa4:	0800deb9 	.word	0x0800deb9

0800aaa8 <_strtol_r>:
 800aaa8:	f7ff bf7c 	b.w	800a9a4 <_strtol_l.constprop.0>

0800aaac <__ssputs_r>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	688e      	ldr	r6, [r1, #8]
 800aab2:	461f      	mov	r7, r3
 800aab4:	42be      	cmp	r6, r7
 800aab6:	680b      	ldr	r3, [r1, #0]
 800aab8:	4682      	mov	sl, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4690      	mov	r8, r2
 800aabe:	d82c      	bhi.n	800ab1a <__ssputs_r+0x6e>
 800aac0:	898a      	ldrh	r2, [r1, #12]
 800aac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aac6:	d026      	beq.n	800ab16 <__ssputs_r+0x6a>
 800aac8:	6965      	ldr	r5, [r4, #20]
 800aaca:	6909      	ldr	r1, [r1, #16]
 800aacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aad0:	eba3 0901 	sub.w	r9, r3, r1
 800aad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aad8:	1c7b      	adds	r3, r7, #1
 800aada:	444b      	add	r3, r9
 800aadc:	106d      	asrs	r5, r5, #1
 800aade:	429d      	cmp	r5, r3
 800aae0:	bf38      	it	cc
 800aae2:	461d      	movcc	r5, r3
 800aae4:	0553      	lsls	r3, r2, #21
 800aae6:	d527      	bpl.n	800ab38 <__ssputs_r+0x8c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7fe fc0f 	bl	800930c <_malloc_r>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	b360      	cbz	r0, 800ab4c <__ssputs_r+0xa0>
 800aaf2:	6921      	ldr	r1, [r4, #16]
 800aaf4:	464a      	mov	r2, r9
 800aaf6:	f7fd fd06 	bl	8008506 <memcpy>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	6126      	str	r6, [r4, #16]
 800ab08:	6165      	str	r5, [r4, #20]
 800ab0a:	444e      	add	r6, r9
 800ab0c:	eba5 0509 	sub.w	r5, r5, r9
 800ab10:	6026      	str	r6, [r4, #0]
 800ab12:	60a5      	str	r5, [r4, #8]
 800ab14:	463e      	mov	r6, r7
 800ab16:	42be      	cmp	r6, r7
 800ab18:	d900      	bls.n	800ab1c <__ssputs_r+0x70>
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	4632      	mov	r2, r6
 800ab20:	4641      	mov	r1, r8
 800ab22:	f000 fba3 	bl	800b26c <memmove>
 800ab26:	68a3      	ldr	r3, [r4, #8]
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	60a3      	str	r3, [r4, #8]
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	4433      	add	r3, r6
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	2000      	movs	r0, #0
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	462a      	mov	r2, r5
 800ab3a:	f000 ff7a 	bl	800ba32 <_realloc_r>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1e0      	bne.n	800ab06 <__ssputs_r+0x5a>
 800ab44:	6921      	ldr	r1, [r4, #16]
 800ab46:	4650      	mov	r0, sl
 800ab48:	f7fe fb6c 	bl	8009224 <_free_r>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	f8ca 3000 	str.w	r3, [sl]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5e:	e7e9      	b.n	800ab34 <__ssputs_r+0x88>

0800ab60 <_svfiprintf_r>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4698      	mov	r8, r3
 800ab66:	898b      	ldrh	r3, [r1, #12]
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	b09d      	sub	sp, #116	; 0x74
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4614      	mov	r4, r2
 800ab72:	d50e      	bpl.n	800ab92 <_svfiprintf_r+0x32>
 800ab74:	690b      	ldr	r3, [r1, #16]
 800ab76:	b963      	cbnz	r3, 800ab92 <_svfiprintf_r+0x32>
 800ab78:	2140      	movs	r1, #64	; 0x40
 800ab7a:	f7fe fbc7 	bl	800930c <_malloc_r>
 800ab7e:	6028      	str	r0, [r5, #0]
 800ab80:	6128      	str	r0, [r5, #16]
 800ab82:	b920      	cbnz	r0, 800ab8e <_svfiprintf_r+0x2e>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e0d0      	b.n	800ad30 <_svfiprintf_r+0x1d0>
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	616b      	str	r3, [r5, #20]
 800ab92:	2300      	movs	r3, #0
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	2320      	movs	r3, #32
 800ab98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba0:	2330      	movs	r3, #48	; 0x30
 800aba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad48 <_svfiprintf_r+0x1e8>
 800aba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abaa:	f04f 0901 	mov.w	r9, #1
 800abae:	4623      	mov	r3, r4
 800abb0:	469a      	mov	sl, r3
 800abb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb6:	b10a      	cbz	r2, 800abbc <_svfiprintf_r+0x5c>
 800abb8:	2a25      	cmp	r2, #37	; 0x25
 800abba:	d1f9      	bne.n	800abb0 <_svfiprintf_r+0x50>
 800abbc:	ebba 0b04 	subs.w	fp, sl, r4
 800abc0:	d00b      	beq.n	800abda <_svfiprintf_r+0x7a>
 800abc2:	465b      	mov	r3, fp
 800abc4:	4622      	mov	r2, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ff6f 	bl	800aaac <__ssputs_r>
 800abce:	3001      	adds	r0, #1
 800abd0:	f000 80a9 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd6:	445a      	add	r2, fp
 800abd8:	9209      	str	r2, [sp, #36]	; 0x24
 800abda:	f89a 3000 	ldrb.w	r3, [sl]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80a1 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abee:	f10a 0a01 	add.w	sl, sl, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	9307      	str	r3, [sp, #28]
 800abf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abfa:	931a      	str	r3, [sp, #104]	; 0x68
 800abfc:	4654      	mov	r4, sl
 800abfe:	2205      	movs	r2, #5
 800ac00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac04:	4850      	ldr	r0, [pc, #320]	; (800ad48 <_svfiprintf_r+0x1e8>)
 800ac06:	f7f5 fae3 	bl	80001d0 <memchr>
 800ac0a:	9a04      	ldr	r2, [sp, #16]
 800ac0c:	b9d8      	cbnz	r0, 800ac46 <_svfiprintf_r+0xe6>
 800ac0e:	06d0      	lsls	r0, r2, #27
 800ac10:	bf44      	itt	mi
 800ac12:	2320      	movmi	r3, #32
 800ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac18:	0711      	lsls	r1, r2, #28
 800ac1a:	bf44      	itt	mi
 800ac1c:	232b      	movmi	r3, #43	; 0x2b
 800ac1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac22:	f89a 3000 	ldrb.w	r3, [sl]
 800ac26:	2b2a      	cmp	r3, #42	; 0x2a
 800ac28:	d015      	beq.n	800ac56 <_svfiprintf_r+0xf6>
 800ac2a:	9a07      	ldr	r2, [sp, #28]
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f04f 0c0a 	mov.w	ip, #10
 800ac34:	4621      	mov	r1, r4
 800ac36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3a:	3b30      	subs	r3, #48	; 0x30
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d94d      	bls.n	800acdc <_svfiprintf_r+0x17c>
 800ac40:	b1b0      	cbz	r0, 800ac70 <_svfiprintf_r+0x110>
 800ac42:	9207      	str	r2, [sp, #28]
 800ac44:	e014      	b.n	800ac70 <_svfiprintf_r+0x110>
 800ac46:	eba0 0308 	sub.w	r3, r0, r8
 800ac4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	46a2      	mov	sl, r4
 800ac54:	e7d2      	b.n	800abfc <_svfiprintf_r+0x9c>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d19      	adds	r1, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9103      	str	r1, [sp, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfbb      	ittet	lt
 800ac62:	425b      	neglt	r3, r3
 800ac64:	f042 0202 	orrlt.w	r2, r2, #2
 800ac68:	9307      	strge	r3, [sp, #28]
 800ac6a:	9307      	strlt	r3, [sp, #28]
 800ac6c:	bfb8      	it	lt
 800ac6e:	9204      	strlt	r2, [sp, #16]
 800ac70:	7823      	ldrb	r3, [r4, #0]
 800ac72:	2b2e      	cmp	r3, #46	; 0x2e
 800ac74:	d10c      	bne.n	800ac90 <_svfiprintf_r+0x130>
 800ac76:	7863      	ldrb	r3, [r4, #1]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d134      	bne.n	800ace6 <_svfiprintf_r+0x186>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	9203      	str	r2, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb8      	it	lt
 800ac88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac8c:	3402      	adds	r4, #2
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad58 <_svfiprintf_r+0x1f8>
 800ac94:	7821      	ldrb	r1, [r4, #0]
 800ac96:	2203      	movs	r2, #3
 800ac98:	4650      	mov	r0, sl
 800ac9a:	f7f5 fa99 	bl	80001d0 <memchr>
 800ac9e:	b138      	cbz	r0, 800acb0 <_svfiprintf_r+0x150>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	eba0 000a 	sub.w	r0, r0, sl
 800aca6:	2240      	movs	r2, #64	; 0x40
 800aca8:	4082      	lsls	r2, r0
 800acaa:	4313      	orrs	r3, r2
 800acac:	3401      	adds	r4, #1
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	4825      	ldr	r0, [pc, #148]	; (800ad4c <_svfiprintf_r+0x1ec>)
 800acb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acba:	2206      	movs	r2, #6
 800acbc:	f7f5 fa88 	bl	80001d0 <memchr>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d038      	beq.n	800ad36 <_svfiprintf_r+0x1d6>
 800acc4:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <_svfiprintf_r+0x1f0>)
 800acc6:	bb1b      	cbnz	r3, 800ad10 <_svfiprintf_r+0x1b0>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	3307      	adds	r3, #7
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	3308      	adds	r3, #8
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	4433      	add	r3, r6
 800acd8:	9309      	str	r3, [sp, #36]	; 0x24
 800acda:	e768      	b.n	800abae <_svfiprintf_r+0x4e>
 800acdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace0:	460c      	mov	r4, r1
 800ace2:	2001      	movs	r0, #1
 800ace4:	e7a6      	b.n	800ac34 <_svfiprintf_r+0xd4>
 800ace6:	2300      	movs	r3, #0
 800ace8:	3401      	adds	r4, #1
 800acea:	9305      	str	r3, [sp, #20]
 800acec:	4619      	mov	r1, r3
 800acee:	f04f 0c0a 	mov.w	ip, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf8:	3a30      	subs	r2, #48	; 0x30
 800acfa:	2a09      	cmp	r2, #9
 800acfc:	d903      	bls.n	800ad06 <_svfiprintf_r+0x1a6>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c6      	beq.n	800ac90 <_svfiprintf_r+0x130>
 800ad02:	9105      	str	r1, [sp, #20]
 800ad04:	e7c4      	b.n	800ac90 <_svfiprintf_r+0x130>
 800ad06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e7f0      	b.n	800acf2 <_svfiprintf_r+0x192>
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <_svfiprintf_r+0x1f4>)
 800ad18:	a904      	add	r1, sp, #16
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f7fc fc66 	bl	80075ec <_printf_float>
 800ad20:	1c42      	adds	r2, r0, #1
 800ad22:	4606      	mov	r6, r0
 800ad24:	d1d6      	bne.n	800acd4 <_svfiprintf_r+0x174>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	065b      	lsls	r3, r3, #25
 800ad2a:	f53f af2d 	bmi.w	800ab88 <_svfiprintf_r+0x28>
 800ad2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad30:	b01d      	add	sp, #116	; 0x74
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <_svfiprintf_r+0x1f4>)
 800ad3e:	a904      	add	r1, sp, #16
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7fc fef7 	bl	8007b34 <_printf_i>
 800ad46:	e7eb      	b.n	800ad20 <_svfiprintf_r+0x1c0>
 800ad48:	0800dfb9 	.word	0x0800dfb9
 800ad4c:	0800dfc3 	.word	0x0800dfc3
 800ad50:	080075ed 	.word	0x080075ed
 800ad54:	0800aaad 	.word	0x0800aaad
 800ad58:	0800dfbf 	.word	0x0800dfbf

0800ad5c <__sfputc_r>:
 800ad5c:	6893      	ldr	r3, [r2, #8]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	b410      	push	{r4}
 800ad64:	6093      	str	r3, [r2, #8]
 800ad66:	da08      	bge.n	800ad7a <__sfputc_r+0x1e>
 800ad68:	6994      	ldr	r4, [r2, #24]
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	db01      	blt.n	800ad72 <__sfputc_r+0x16>
 800ad6e:	290a      	cmp	r1, #10
 800ad70:	d103      	bne.n	800ad7a <__sfputc_r+0x1e>
 800ad72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad76:	f000 b9e3 	b.w	800b140 <__swbuf_r>
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	1c58      	adds	r0, r3, #1
 800ad7e:	6010      	str	r0, [r2, #0]
 800ad80:	7019      	strb	r1, [r3, #0]
 800ad82:	4608      	mov	r0, r1
 800ad84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <__sfputs_r>:
 800ad8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	4614      	mov	r4, r2
 800ad92:	18d5      	adds	r5, r2, r3
 800ad94:	42ac      	cmp	r4, r5
 800ad96:	d101      	bne.n	800ad9c <__sfputs_r+0x12>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e007      	b.n	800adac <__sfputs_r+0x22>
 800ad9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada0:	463a      	mov	r2, r7
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ffda 	bl	800ad5c <__sfputc_r>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d1f3      	bne.n	800ad94 <__sfputs_r+0xa>
 800adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adb0 <_vfiprintf_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	460d      	mov	r5, r1
 800adb6:	b09d      	sub	sp, #116	; 0x74
 800adb8:	4614      	mov	r4, r2
 800adba:	4698      	mov	r8, r3
 800adbc:	4606      	mov	r6, r0
 800adbe:	b118      	cbz	r0, 800adc8 <_vfiprintf_r+0x18>
 800adc0:	6a03      	ldr	r3, [r0, #32]
 800adc2:	b90b      	cbnz	r3, 800adc8 <_vfiprintf_r+0x18>
 800adc4:	f7fd fa74 	bl	80082b0 <__sinit>
 800adc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adca:	07d9      	lsls	r1, r3, #31
 800adcc:	d405      	bmi.n	800adda <_vfiprintf_r+0x2a>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	059a      	lsls	r2, r3, #22
 800add2:	d402      	bmi.n	800adda <_vfiprintf_r+0x2a>
 800add4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add6:	f7fd fb94 	bl	8008502 <__retarget_lock_acquire_recursive>
 800adda:	89ab      	ldrh	r3, [r5, #12]
 800addc:	071b      	lsls	r3, r3, #28
 800adde:	d501      	bpl.n	800ade4 <_vfiprintf_r+0x34>
 800ade0:	692b      	ldr	r3, [r5, #16]
 800ade2:	b99b      	cbnz	r3, 800ae0c <_vfiprintf_r+0x5c>
 800ade4:	4629      	mov	r1, r5
 800ade6:	4630      	mov	r0, r6
 800ade8:	f000 f9e8 	bl	800b1bc <__swsetup_r>
 800adec:	b170      	cbz	r0, 800ae0c <_vfiprintf_r+0x5c>
 800adee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf0:	07dc      	lsls	r4, r3, #31
 800adf2:	d504      	bpl.n	800adfe <_vfiprintf_r+0x4e>
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	b01d      	add	sp, #116	; 0x74
 800adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfe:	89ab      	ldrh	r3, [r5, #12]
 800ae00:	0598      	lsls	r0, r3, #22
 800ae02:	d4f7      	bmi.n	800adf4 <_vfiprintf_r+0x44>
 800ae04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae06:	f7fd fb7d 	bl	8008504 <__retarget_lock_release_recursive>
 800ae0a:	e7f3      	b.n	800adf4 <_vfiprintf_r+0x44>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae10:	2320      	movs	r3, #32
 800ae12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae1a:	2330      	movs	r3, #48	; 0x30
 800ae1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800afd0 <_vfiprintf_r+0x220>
 800ae20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae24:	f04f 0901 	mov.w	r9, #1
 800ae28:	4623      	mov	r3, r4
 800ae2a:	469a      	mov	sl, r3
 800ae2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae30:	b10a      	cbz	r2, 800ae36 <_vfiprintf_r+0x86>
 800ae32:	2a25      	cmp	r2, #37	; 0x25
 800ae34:	d1f9      	bne.n	800ae2a <_vfiprintf_r+0x7a>
 800ae36:	ebba 0b04 	subs.w	fp, sl, r4
 800ae3a:	d00b      	beq.n	800ae54 <_vfiprintf_r+0xa4>
 800ae3c:	465b      	mov	r3, fp
 800ae3e:	4622      	mov	r2, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ffa1 	bl	800ad8a <__sfputs_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f000 80a9 	beq.w	800afa0 <_vfiprintf_r+0x1f0>
 800ae4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae50:	445a      	add	r2, fp
 800ae52:	9209      	str	r2, [sp, #36]	; 0x24
 800ae54:	f89a 3000 	ldrb.w	r3, [sl]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 80a1 	beq.w	800afa0 <_vfiprintf_r+0x1f0>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295
 800ae64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae68:	f10a 0a01 	add.w	sl, sl, #1
 800ae6c:	9304      	str	r3, [sp, #16]
 800ae6e:	9307      	str	r3, [sp, #28]
 800ae70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae74:	931a      	str	r3, [sp, #104]	; 0x68
 800ae76:	4654      	mov	r4, sl
 800ae78:	2205      	movs	r2, #5
 800ae7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7e:	4854      	ldr	r0, [pc, #336]	; (800afd0 <_vfiprintf_r+0x220>)
 800ae80:	f7f5 f9a6 	bl	80001d0 <memchr>
 800ae84:	9a04      	ldr	r2, [sp, #16]
 800ae86:	b9d8      	cbnz	r0, 800aec0 <_vfiprintf_r+0x110>
 800ae88:	06d1      	lsls	r1, r2, #27
 800ae8a:	bf44      	itt	mi
 800ae8c:	2320      	movmi	r3, #32
 800ae8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae92:	0713      	lsls	r3, r2, #28
 800ae94:	bf44      	itt	mi
 800ae96:	232b      	movmi	r3, #43	; 0x2b
 800ae98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b2a      	cmp	r3, #42	; 0x2a
 800aea2:	d015      	beq.n	800aed0 <_vfiprintf_r+0x120>
 800aea4:	9a07      	ldr	r2, [sp, #28]
 800aea6:	4654      	mov	r4, sl
 800aea8:	2000      	movs	r0, #0
 800aeaa:	f04f 0c0a 	mov.w	ip, #10
 800aeae:	4621      	mov	r1, r4
 800aeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeb4:	3b30      	subs	r3, #48	; 0x30
 800aeb6:	2b09      	cmp	r3, #9
 800aeb8:	d94d      	bls.n	800af56 <_vfiprintf_r+0x1a6>
 800aeba:	b1b0      	cbz	r0, 800aeea <_vfiprintf_r+0x13a>
 800aebc:	9207      	str	r2, [sp, #28]
 800aebe:	e014      	b.n	800aeea <_vfiprintf_r+0x13a>
 800aec0:	eba0 0308 	sub.w	r3, r0, r8
 800aec4:	fa09 f303 	lsl.w	r3, r9, r3
 800aec8:	4313      	orrs	r3, r2
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	46a2      	mov	sl, r4
 800aece:	e7d2      	b.n	800ae76 <_vfiprintf_r+0xc6>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	1d19      	adds	r1, r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	9103      	str	r1, [sp, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bfbb      	ittet	lt
 800aedc:	425b      	neglt	r3, r3
 800aede:	f042 0202 	orrlt.w	r2, r2, #2
 800aee2:	9307      	strge	r3, [sp, #28]
 800aee4:	9307      	strlt	r3, [sp, #28]
 800aee6:	bfb8      	it	lt
 800aee8:	9204      	strlt	r2, [sp, #16]
 800aeea:	7823      	ldrb	r3, [r4, #0]
 800aeec:	2b2e      	cmp	r3, #46	; 0x2e
 800aeee:	d10c      	bne.n	800af0a <_vfiprintf_r+0x15a>
 800aef0:	7863      	ldrb	r3, [r4, #1]
 800aef2:	2b2a      	cmp	r3, #42	; 0x2a
 800aef4:	d134      	bne.n	800af60 <_vfiprintf_r+0x1b0>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	9203      	str	r2, [sp, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfb8      	it	lt
 800af02:	f04f 33ff 	movlt.w	r3, #4294967295
 800af06:	3402      	adds	r4, #2
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800afe0 <_vfiprintf_r+0x230>
 800af0e:	7821      	ldrb	r1, [r4, #0]
 800af10:	2203      	movs	r2, #3
 800af12:	4650      	mov	r0, sl
 800af14:	f7f5 f95c 	bl	80001d0 <memchr>
 800af18:	b138      	cbz	r0, 800af2a <_vfiprintf_r+0x17a>
 800af1a:	9b04      	ldr	r3, [sp, #16]
 800af1c:	eba0 000a 	sub.w	r0, r0, sl
 800af20:	2240      	movs	r2, #64	; 0x40
 800af22:	4082      	lsls	r2, r0
 800af24:	4313      	orrs	r3, r2
 800af26:	3401      	adds	r4, #1
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2e:	4829      	ldr	r0, [pc, #164]	; (800afd4 <_vfiprintf_r+0x224>)
 800af30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af34:	2206      	movs	r2, #6
 800af36:	f7f5 f94b 	bl	80001d0 <memchr>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d03f      	beq.n	800afbe <_vfiprintf_r+0x20e>
 800af3e:	4b26      	ldr	r3, [pc, #152]	; (800afd8 <_vfiprintf_r+0x228>)
 800af40:	bb1b      	cbnz	r3, 800af8a <_vfiprintf_r+0x1da>
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	3307      	adds	r3, #7
 800af46:	f023 0307 	bic.w	r3, r3, #7
 800af4a:	3308      	adds	r3, #8
 800af4c:	9303      	str	r3, [sp, #12]
 800af4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af50:	443b      	add	r3, r7
 800af52:	9309      	str	r3, [sp, #36]	; 0x24
 800af54:	e768      	b.n	800ae28 <_vfiprintf_r+0x78>
 800af56:	fb0c 3202 	mla	r2, ip, r2, r3
 800af5a:	460c      	mov	r4, r1
 800af5c:	2001      	movs	r0, #1
 800af5e:	e7a6      	b.n	800aeae <_vfiprintf_r+0xfe>
 800af60:	2300      	movs	r3, #0
 800af62:	3401      	adds	r4, #1
 800af64:	9305      	str	r3, [sp, #20]
 800af66:	4619      	mov	r1, r3
 800af68:	f04f 0c0a 	mov.w	ip, #10
 800af6c:	4620      	mov	r0, r4
 800af6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af72:	3a30      	subs	r2, #48	; 0x30
 800af74:	2a09      	cmp	r2, #9
 800af76:	d903      	bls.n	800af80 <_vfiprintf_r+0x1d0>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d0c6      	beq.n	800af0a <_vfiprintf_r+0x15a>
 800af7c:	9105      	str	r1, [sp, #20]
 800af7e:	e7c4      	b.n	800af0a <_vfiprintf_r+0x15a>
 800af80:	fb0c 2101 	mla	r1, ip, r1, r2
 800af84:	4604      	mov	r4, r0
 800af86:	2301      	movs	r3, #1
 800af88:	e7f0      	b.n	800af6c <_vfiprintf_r+0x1bc>
 800af8a:	ab03      	add	r3, sp, #12
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	462a      	mov	r2, r5
 800af90:	4b12      	ldr	r3, [pc, #72]	; (800afdc <_vfiprintf_r+0x22c>)
 800af92:	a904      	add	r1, sp, #16
 800af94:	4630      	mov	r0, r6
 800af96:	f7fc fb29 	bl	80075ec <_printf_float>
 800af9a:	4607      	mov	r7, r0
 800af9c:	1c78      	adds	r0, r7, #1
 800af9e:	d1d6      	bne.n	800af4e <_vfiprintf_r+0x19e>
 800afa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa2:	07d9      	lsls	r1, r3, #31
 800afa4:	d405      	bmi.n	800afb2 <_vfiprintf_r+0x202>
 800afa6:	89ab      	ldrh	r3, [r5, #12]
 800afa8:	059a      	lsls	r2, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_vfiprintf_r+0x202>
 800afac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afae:	f7fd faa9 	bl	8008504 <__retarget_lock_release_recursive>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	065b      	lsls	r3, r3, #25
 800afb6:	f53f af1d 	bmi.w	800adf4 <_vfiprintf_r+0x44>
 800afba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afbc:	e71c      	b.n	800adf8 <_vfiprintf_r+0x48>
 800afbe:	ab03      	add	r3, sp, #12
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	462a      	mov	r2, r5
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <_vfiprintf_r+0x22c>)
 800afc6:	a904      	add	r1, sp, #16
 800afc8:	4630      	mov	r0, r6
 800afca:	f7fc fdb3 	bl	8007b34 <_printf_i>
 800afce:	e7e4      	b.n	800af9a <_vfiprintf_r+0x1ea>
 800afd0:	0800dfb9 	.word	0x0800dfb9
 800afd4:	0800dfc3 	.word	0x0800dfc3
 800afd8:	080075ed 	.word	0x080075ed
 800afdc:	0800ad8b 	.word	0x0800ad8b
 800afe0:	0800dfbf 	.word	0x0800dfbf

0800afe4 <__sflush_r>:
 800afe4:	898a      	ldrh	r2, [r1, #12]
 800afe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	4605      	mov	r5, r0
 800afec:	0710      	lsls	r0, r2, #28
 800afee:	460c      	mov	r4, r1
 800aff0:	d458      	bmi.n	800b0a4 <__sflush_r+0xc0>
 800aff2:	684b      	ldr	r3, [r1, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dc05      	bgt.n	800b004 <__sflush_r+0x20>
 800aff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800affa:	2b00      	cmp	r3, #0
 800affc:	dc02      	bgt.n	800b004 <__sflush_r+0x20>
 800affe:	2000      	movs	r0, #0
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b006:	2e00      	cmp	r6, #0
 800b008:	d0f9      	beq.n	800affe <__sflush_r+0x1a>
 800b00a:	2300      	movs	r3, #0
 800b00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b010:	682f      	ldr	r7, [r5, #0]
 800b012:	6a21      	ldr	r1, [r4, #32]
 800b014:	602b      	str	r3, [r5, #0]
 800b016:	d032      	beq.n	800b07e <__sflush_r+0x9a>
 800b018:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	075a      	lsls	r2, r3, #29
 800b01e:	d505      	bpl.n	800b02c <__sflush_r+0x48>
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	1ac0      	subs	r0, r0, r3
 800b024:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b026:	b10b      	cbz	r3, 800b02c <__sflush_r+0x48>
 800b028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b02a:	1ac0      	subs	r0, r0, r3
 800b02c:	2300      	movs	r3, #0
 800b02e:	4602      	mov	r2, r0
 800b030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b032:	6a21      	ldr	r1, [r4, #32]
 800b034:	4628      	mov	r0, r5
 800b036:	47b0      	blx	r6
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	d106      	bne.n	800b04c <__sflush_r+0x68>
 800b03e:	6829      	ldr	r1, [r5, #0]
 800b040:	291d      	cmp	r1, #29
 800b042:	d82b      	bhi.n	800b09c <__sflush_r+0xb8>
 800b044:	4a29      	ldr	r2, [pc, #164]	; (800b0ec <__sflush_r+0x108>)
 800b046:	410a      	asrs	r2, r1
 800b048:	07d6      	lsls	r6, r2, #31
 800b04a:	d427      	bmi.n	800b09c <__sflush_r+0xb8>
 800b04c:	2200      	movs	r2, #0
 800b04e:	6062      	str	r2, [r4, #4]
 800b050:	04d9      	lsls	r1, r3, #19
 800b052:	6922      	ldr	r2, [r4, #16]
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	d504      	bpl.n	800b062 <__sflush_r+0x7e>
 800b058:	1c42      	adds	r2, r0, #1
 800b05a:	d101      	bne.n	800b060 <__sflush_r+0x7c>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b903      	cbnz	r3, 800b062 <__sflush_r+0x7e>
 800b060:	6560      	str	r0, [r4, #84]	; 0x54
 800b062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b064:	602f      	str	r7, [r5, #0]
 800b066:	2900      	cmp	r1, #0
 800b068:	d0c9      	beq.n	800affe <__sflush_r+0x1a>
 800b06a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b06e:	4299      	cmp	r1, r3
 800b070:	d002      	beq.n	800b078 <__sflush_r+0x94>
 800b072:	4628      	mov	r0, r5
 800b074:	f7fe f8d6 	bl	8009224 <_free_r>
 800b078:	2000      	movs	r0, #0
 800b07a:	6360      	str	r0, [r4, #52]	; 0x34
 800b07c:	e7c0      	b.n	800b000 <__sflush_r+0x1c>
 800b07e:	2301      	movs	r3, #1
 800b080:	4628      	mov	r0, r5
 800b082:	47b0      	blx	r6
 800b084:	1c41      	adds	r1, r0, #1
 800b086:	d1c8      	bne.n	800b01a <__sflush_r+0x36>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0c5      	beq.n	800b01a <__sflush_r+0x36>
 800b08e:	2b1d      	cmp	r3, #29
 800b090:	d001      	beq.n	800b096 <__sflush_r+0xb2>
 800b092:	2b16      	cmp	r3, #22
 800b094:	d101      	bne.n	800b09a <__sflush_r+0xb6>
 800b096:	602f      	str	r7, [r5, #0]
 800b098:	e7b1      	b.n	800affe <__sflush_r+0x1a>
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	e7ad      	b.n	800b000 <__sflush_r+0x1c>
 800b0a4:	690f      	ldr	r7, [r1, #16]
 800b0a6:	2f00      	cmp	r7, #0
 800b0a8:	d0a9      	beq.n	800affe <__sflush_r+0x1a>
 800b0aa:	0793      	lsls	r3, r2, #30
 800b0ac:	680e      	ldr	r6, [r1, #0]
 800b0ae:	bf08      	it	eq
 800b0b0:	694b      	ldreq	r3, [r1, #20]
 800b0b2:	600f      	str	r7, [r1, #0]
 800b0b4:	bf18      	it	ne
 800b0b6:	2300      	movne	r3, #0
 800b0b8:	eba6 0807 	sub.w	r8, r6, r7
 800b0bc:	608b      	str	r3, [r1, #8]
 800b0be:	f1b8 0f00 	cmp.w	r8, #0
 800b0c2:	dd9c      	ble.n	800affe <__sflush_r+0x1a>
 800b0c4:	6a21      	ldr	r1, [r4, #32]
 800b0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0c8:	4643      	mov	r3, r8
 800b0ca:	463a      	mov	r2, r7
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b0      	blx	r6
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dc06      	bgt.n	800b0e2 <__sflush_r+0xfe>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	e78e      	b.n	800b000 <__sflush_r+0x1c>
 800b0e2:	4407      	add	r7, r0
 800b0e4:	eba8 0800 	sub.w	r8, r8, r0
 800b0e8:	e7e9      	b.n	800b0be <__sflush_r+0xda>
 800b0ea:	bf00      	nop
 800b0ec:	dfbffffe 	.word	0xdfbffffe

0800b0f0 <_fflush_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	690b      	ldr	r3, [r1, #16]
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	b913      	cbnz	r3, 800b100 <_fflush_r+0x10>
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	b118      	cbz	r0, 800b10a <_fflush_r+0x1a>
 800b102:	6a03      	ldr	r3, [r0, #32]
 800b104:	b90b      	cbnz	r3, 800b10a <_fflush_r+0x1a>
 800b106:	f7fd f8d3 	bl	80082b0 <__sinit>
 800b10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0f3      	beq.n	800b0fa <_fflush_r+0xa>
 800b112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b114:	07d0      	lsls	r0, r2, #31
 800b116:	d404      	bmi.n	800b122 <_fflush_r+0x32>
 800b118:	0599      	lsls	r1, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_fflush_r+0x32>
 800b11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b11e:	f7fd f9f0 	bl	8008502 <__retarget_lock_acquire_recursive>
 800b122:	4628      	mov	r0, r5
 800b124:	4621      	mov	r1, r4
 800b126:	f7ff ff5d 	bl	800afe4 <__sflush_r>
 800b12a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b12c:	07da      	lsls	r2, r3, #31
 800b12e:	4605      	mov	r5, r0
 800b130:	d4e4      	bmi.n	800b0fc <_fflush_r+0xc>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	059b      	lsls	r3, r3, #22
 800b136:	d4e1      	bmi.n	800b0fc <_fflush_r+0xc>
 800b138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13a:	f7fd f9e3 	bl	8008504 <__retarget_lock_release_recursive>
 800b13e:	e7dd      	b.n	800b0fc <_fflush_r+0xc>

0800b140 <__swbuf_r>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	460e      	mov	r6, r1
 800b144:	4614      	mov	r4, r2
 800b146:	4605      	mov	r5, r0
 800b148:	b118      	cbz	r0, 800b152 <__swbuf_r+0x12>
 800b14a:	6a03      	ldr	r3, [r0, #32]
 800b14c:	b90b      	cbnz	r3, 800b152 <__swbuf_r+0x12>
 800b14e:	f7fd f8af 	bl	80082b0 <__sinit>
 800b152:	69a3      	ldr	r3, [r4, #24]
 800b154:	60a3      	str	r3, [r4, #8]
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	071a      	lsls	r2, r3, #28
 800b15a:	d525      	bpl.n	800b1a8 <__swbuf_r+0x68>
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	b31b      	cbz	r3, 800b1a8 <__swbuf_r+0x68>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	6922      	ldr	r2, [r4, #16]
 800b164:	1a98      	subs	r0, r3, r2
 800b166:	6963      	ldr	r3, [r4, #20]
 800b168:	b2f6      	uxtb	r6, r6
 800b16a:	4283      	cmp	r3, r0
 800b16c:	4637      	mov	r7, r6
 800b16e:	dc04      	bgt.n	800b17a <__swbuf_r+0x3a>
 800b170:	4621      	mov	r1, r4
 800b172:	4628      	mov	r0, r5
 800b174:	f7ff ffbc 	bl	800b0f0 <_fflush_r>
 800b178:	b9e0      	cbnz	r0, 800b1b4 <__swbuf_r+0x74>
 800b17a:	68a3      	ldr	r3, [r4, #8]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	60a3      	str	r3, [r4, #8]
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	701e      	strb	r6, [r3, #0]
 800b188:	6962      	ldr	r2, [r4, #20]
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d004      	beq.n	800b19a <__swbuf_r+0x5a>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	07db      	lsls	r3, r3, #31
 800b194:	d506      	bpl.n	800b1a4 <__swbuf_r+0x64>
 800b196:	2e0a      	cmp	r6, #10
 800b198:	d104      	bne.n	800b1a4 <__swbuf_r+0x64>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4628      	mov	r0, r5
 800b19e:	f7ff ffa7 	bl	800b0f0 <_fflush_r>
 800b1a2:	b938      	cbnz	r0, 800b1b4 <__swbuf_r+0x74>
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f000 f806 	bl	800b1bc <__swsetup_r>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d0d5      	beq.n	800b160 <__swbuf_r+0x20>
 800b1b4:	f04f 37ff 	mov.w	r7, #4294967295
 800b1b8:	e7f4      	b.n	800b1a4 <__swbuf_r+0x64>
	...

0800b1bc <__swsetup_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4b2a      	ldr	r3, [pc, #168]	; (800b268 <__swsetup_r+0xac>)
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	6818      	ldr	r0, [r3, #0]
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	b118      	cbz	r0, 800b1d0 <__swsetup_r+0x14>
 800b1c8:	6a03      	ldr	r3, [r0, #32]
 800b1ca:	b90b      	cbnz	r3, 800b1d0 <__swsetup_r+0x14>
 800b1cc:	f7fd f870 	bl	80082b0 <__sinit>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1d6:	0718      	lsls	r0, r3, #28
 800b1d8:	d422      	bmi.n	800b220 <__swsetup_r+0x64>
 800b1da:	06d9      	lsls	r1, r3, #27
 800b1dc:	d407      	bmi.n	800b1ee <__swsetup_r+0x32>
 800b1de:	2309      	movs	r3, #9
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e034      	b.n	800b258 <__swsetup_r+0x9c>
 800b1ee:	0758      	lsls	r0, r3, #29
 800b1f0:	d512      	bpl.n	800b218 <__swsetup_r+0x5c>
 800b1f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1f4:	b141      	cbz	r1, 800b208 <__swsetup_r+0x4c>
 800b1f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1fa:	4299      	cmp	r1, r3
 800b1fc:	d002      	beq.n	800b204 <__swsetup_r+0x48>
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7fe f810 	bl	8009224 <_free_r>
 800b204:	2300      	movs	r3, #0
 800b206:	6363      	str	r3, [r4, #52]	; 0x34
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	2300      	movs	r3, #0
 800b212:	6063      	str	r3, [r4, #4]
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f043 0308 	orr.w	r3, r3, #8
 800b21e:	81a3      	strh	r3, [r4, #12]
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	b94b      	cbnz	r3, 800b238 <__swsetup_r+0x7c>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b22a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b22e:	d003      	beq.n	800b238 <__swsetup_r+0x7c>
 800b230:	4621      	mov	r1, r4
 800b232:	4628      	mov	r0, r5
 800b234:	f000 fc72 	bl	800bb1c <__smakebuf_r>
 800b238:	89a0      	ldrh	r0, [r4, #12]
 800b23a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b23e:	f010 0301 	ands.w	r3, r0, #1
 800b242:	d00a      	beq.n	800b25a <__swsetup_r+0x9e>
 800b244:	2300      	movs	r3, #0
 800b246:	60a3      	str	r3, [r4, #8]
 800b248:	6963      	ldr	r3, [r4, #20]
 800b24a:	425b      	negs	r3, r3
 800b24c:	61a3      	str	r3, [r4, #24]
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	b943      	cbnz	r3, 800b264 <__swsetup_r+0xa8>
 800b252:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b256:	d1c4      	bne.n	800b1e2 <__swsetup_r+0x26>
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	0781      	lsls	r1, r0, #30
 800b25c:	bf58      	it	pl
 800b25e:	6963      	ldrpl	r3, [r4, #20]
 800b260:	60a3      	str	r3, [r4, #8]
 800b262:	e7f4      	b.n	800b24e <__swsetup_r+0x92>
 800b264:	2000      	movs	r0, #0
 800b266:	e7f7      	b.n	800b258 <__swsetup_r+0x9c>
 800b268:	20000094 	.word	0x20000094

0800b26c <memmove>:
 800b26c:	4288      	cmp	r0, r1
 800b26e:	b510      	push	{r4, lr}
 800b270:	eb01 0402 	add.w	r4, r1, r2
 800b274:	d902      	bls.n	800b27c <memmove+0x10>
 800b276:	4284      	cmp	r4, r0
 800b278:	4623      	mov	r3, r4
 800b27a:	d807      	bhi.n	800b28c <memmove+0x20>
 800b27c:	1e43      	subs	r3, r0, #1
 800b27e:	42a1      	cmp	r1, r4
 800b280:	d008      	beq.n	800b294 <memmove+0x28>
 800b282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b28a:	e7f8      	b.n	800b27e <memmove+0x12>
 800b28c:	4402      	add	r2, r0
 800b28e:	4601      	mov	r1, r0
 800b290:	428a      	cmp	r2, r1
 800b292:	d100      	bne.n	800b296 <memmove+0x2a>
 800b294:	bd10      	pop	{r4, pc}
 800b296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b29e:	e7f7      	b.n	800b290 <memmove+0x24>

0800b2a0 <strncmp>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	b16a      	cbz	r2, 800b2c0 <strncmp+0x20>
 800b2a4:	3901      	subs	r1, #1
 800b2a6:	1884      	adds	r4, r0, r2
 800b2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d103      	bne.n	800b2bc <strncmp+0x1c>
 800b2b4:	42a0      	cmp	r0, r4
 800b2b6:	d001      	beq.n	800b2bc <strncmp+0x1c>
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d1f5      	bne.n	800b2a8 <strncmp+0x8>
 800b2bc:	1ad0      	subs	r0, r2, r3
 800b2be:	bd10      	pop	{r4, pc}
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	e7fc      	b.n	800b2be <strncmp+0x1e>

0800b2c4 <_sbrk_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	; (800b2e0 <_sbrk_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f8 f8ce 	bl	8003470 <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_sbrk_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_sbrk_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	20000f10 	.word	0x20000f10
 800b2e4:	00000000 	.word	0x00000000

0800b2e8 <nan>:
 800b2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b2f0 <nan+0x8>
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	00000000 	.word	0x00000000
 800b2f4:	7ff80000 	.word	0x7ff80000

0800b2f8 <__assert_func>:
 800b2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2fa:	4614      	mov	r4, r2
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <__assert_func+0x2c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4605      	mov	r5, r0
 800b304:	68d8      	ldr	r0, [r3, #12]
 800b306:	b14c      	cbz	r4, 800b31c <__assert_func+0x24>
 800b308:	4b07      	ldr	r3, [pc, #28]	; (800b328 <__assert_func+0x30>)
 800b30a:	9100      	str	r1, [sp, #0]
 800b30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b310:	4906      	ldr	r1, [pc, #24]	; (800b32c <__assert_func+0x34>)
 800b312:	462b      	mov	r3, r5
 800b314:	f000 fbca 	bl	800baac <fiprintf>
 800b318:	f000 fc5e 	bl	800bbd8 <abort>
 800b31c:	4b04      	ldr	r3, [pc, #16]	; (800b330 <__assert_func+0x38>)
 800b31e:	461c      	mov	r4, r3
 800b320:	e7f3      	b.n	800b30a <__assert_func+0x12>
 800b322:	bf00      	nop
 800b324:	20000094 	.word	0x20000094
 800b328:	0800dfd2 	.word	0x0800dfd2
 800b32c:	0800dfdf 	.word	0x0800dfdf
 800b330:	0800e00d 	.word	0x0800e00d

0800b334 <_calloc_r>:
 800b334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b336:	fba1 2402 	umull	r2, r4, r1, r2
 800b33a:	b94c      	cbnz	r4, 800b350 <_calloc_r+0x1c>
 800b33c:	4611      	mov	r1, r2
 800b33e:	9201      	str	r2, [sp, #4]
 800b340:	f7fd ffe4 	bl	800930c <_malloc_r>
 800b344:	9a01      	ldr	r2, [sp, #4]
 800b346:	4605      	mov	r5, r0
 800b348:	b930      	cbnz	r0, 800b358 <_calloc_r+0x24>
 800b34a:	4628      	mov	r0, r5
 800b34c:	b003      	add	sp, #12
 800b34e:	bd30      	pop	{r4, r5, pc}
 800b350:	220c      	movs	r2, #12
 800b352:	6002      	str	r2, [r0, #0]
 800b354:	2500      	movs	r5, #0
 800b356:	e7f8      	b.n	800b34a <_calloc_r+0x16>
 800b358:	4621      	mov	r1, r4
 800b35a:	f7fd f854 	bl	8008406 <memset>
 800b35e:	e7f4      	b.n	800b34a <_calloc_r+0x16>

0800b360 <rshift>:
 800b360:	6903      	ldr	r3, [r0, #16]
 800b362:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b36a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b36e:	f100 0414 	add.w	r4, r0, #20
 800b372:	dd45      	ble.n	800b400 <rshift+0xa0>
 800b374:	f011 011f 	ands.w	r1, r1, #31
 800b378:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b37c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b380:	d10c      	bne.n	800b39c <rshift+0x3c>
 800b382:	f100 0710 	add.w	r7, r0, #16
 800b386:	4629      	mov	r1, r5
 800b388:	42b1      	cmp	r1, r6
 800b38a:	d334      	bcc.n	800b3f6 <rshift+0x96>
 800b38c:	1a9b      	subs	r3, r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	1eea      	subs	r2, r5, #3
 800b392:	4296      	cmp	r6, r2
 800b394:	bf38      	it	cc
 800b396:	2300      	movcc	r3, #0
 800b398:	4423      	add	r3, r4
 800b39a:	e015      	b.n	800b3c8 <rshift+0x68>
 800b39c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3a0:	f1c1 0820 	rsb	r8, r1, #32
 800b3a4:	40cf      	lsrs	r7, r1
 800b3a6:	f105 0e04 	add.w	lr, r5, #4
 800b3aa:	46a1      	mov	r9, r4
 800b3ac:	4576      	cmp	r6, lr
 800b3ae:	46f4      	mov	ip, lr
 800b3b0:	d815      	bhi.n	800b3de <rshift+0x7e>
 800b3b2:	1a9a      	subs	r2, r3, r2
 800b3b4:	0092      	lsls	r2, r2, #2
 800b3b6:	3a04      	subs	r2, #4
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	42ae      	cmp	r6, r5
 800b3bc:	bf38      	it	cc
 800b3be:	2200      	movcc	r2, #0
 800b3c0:	18a3      	adds	r3, r4, r2
 800b3c2:	50a7      	str	r7, [r4, r2]
 800b3c4:	b107      	cbz	r7, 800b3c8 <rshift+0x68>
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	1b1a      	subs	r2, r3, r4
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3d0:	bf08      	it	eq
 800b3d2:	2300      	moveq	r3, #0
 800b3d4:	6102      	str	r2, [r0, #16]
 800b3d6:	bf08      	it	eq
 800b3d8:	6143      	streq	r3, [r0, #20]
 800b3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3de:	f8dc c000 	ldr.w	ip, [ip]
 800b3e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3e6:	ea4c 0707 	orr.w	r7, ip, r7
 800b3ea:	f849 7b04 	str.w	r7, [r9], #4
 800b3ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3f2:	40cf      	lsrs	r7, r1
 800b3f4:	e7da      	b.n	800b3ac <rshift+0x4c>
 800b3f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3fe:	e7c3      	b.n	800b388 <rshift+0x28>
 800b400:	4623      	mov	r3, r4
 800b402:	e7e1      	b.n	800b3c8 <rshift+0x68>

0800b404 <__hexdig_fun>:
 800b404:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b408:	2b09      	cmp	r3, #9
 800b40a:	d802      	bhi.n	800b412 <__hexdig_fun+0xe>
 800b40c:	3820      	subs	r0, #32
 800b40e:	b2c0      	uxtb	r0, r0
 800b410:	4770      	bx	lr
 800b412:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b416:	2b05      	cmp	r3, #5
 800b418:	d801      	bhi.n	800b41e <__hexdig_fun+0x1a>
 800b41a:	3847      	subs	r0, #71	; 0x47
 800b41c:	e7f7      	b.n	800b40e <__hexdig_fun+0xa>
 800b41e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b422:	2b05      	cmp	r3, #5
 800b424:	d801      	bhi.n	800b42a <__hexdig_fun+0x26>
 800b426:	3827      	subs	r0, #39	; 0x27
 800b428:	e7f1      	b.n	800b40e <__hexdig_fun+0xa>
 800b42a:	2000      	movs	r0, #0
 800b42c:	4770      	bx	lr
	...

0800b430 <__gethex>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	4617      	mov	r7, r2
 800b436:	680a      	ldr	r2, [r1, #0]
 800b438:	b085      	sub	sp, #20
 800b43a:	f102 0b02 	add.w	fp, r2, #2
 800b43e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b446:	4681      	mov	r9, r0
 800b448:	468a      	mov	sl, r1
 800b44a:	9302      	str	r3, [sp, #8]
 800b44c:	32fe      	adds	r2, #254	; 0xfe
 800b44e:	eb02 030b 	add.w	r3, r2, fp
 800b452:	46d8      	mov	r8, fp
 800b454:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	2830      	cmp	r0, #48	; 0x30
 800b45c:	d0f7      	beq.n	800b44e <__gethex+0x1e>
 800b45e:	f7ff ffd1 	bl	800b404 <__hexdig_fun>
 800b462:	4604      	mov	r4, r0
 800b464:	2800      	cmp	r0, #0
 800b466:	d138      	bne.n	800b4da <__gethex+0xaa>
 800b468:	49a7      	ldr	r1, [pc, #668]	; (800b708 <__gethex+0x2d8>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	4640      	mov	r0, r8
 800b46e:	f7ff ff17 	bl	800b2a0 <strncmp>
 800b472:	4606      	mov	r6, r0
 800b474:	2800      	cmp	r0, #0
 800b476:	d169      	bne.n	800b54c <__gethex+0x11c>
 800b478:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b47c:	465d      	mov	r5, fp
 800b47e:	f7ff ffc1 	bl	800b404 <__hexdig_fun>
 800b482:	2800      	cmp	r0, #0
 800b484:	d064      	beq.n	800b550 <__gethex+0x120>
 800b486:	465a      	mov	r2, fp
 800b488:	7810      	ldrb	r0, [r2, #0]
 800b48a:	2830      	cmp	r0, #48	; 0x30
 800b48c:	4690      	mov	r8, r2
 800b48e:	f102 0201 	add.w	r2, r2, #1
 800b492:	d0f9      	beq.n	800b488 <__gethex+0x58>
 800b494:	f7ff ffb6 	bl	800b404 <__hexdig_fun>
 800b498:	2301      	movs	r3, #1
 800b49a:	fab0 f480 	clz	r4, r0
 800b49e:	0964      	lsrs	r4, r4, #5
 800b4a0:	465e      	mov	r6, fp
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	4615      	mov	r5, r2
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	7828      	ldrb	r0, [r5, #0]
 800b4ac:	f7ff ffaa 	bl	800b404 <__hexdig_fun>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d1f8      	bne.n	800b4a6 <__gethex+0x76>
 800b4b4:	4994      	ldr	r1, [pc, #592]	; (800b708 <__gethex+0x2d8>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f7ff fef1 	bl	800b2a0 <strncmp>
 800b4be:	b978      	cbnz	r0, 800b4e0 <__gethex+0xb0>
 800b4c0:	b946      	cbnz	r6, 800b4d4 <__gethex+0xa4>
 800b4c2:	1c6e      	adds	r6, r5, #1
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	4615      	mov	r5, r2
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	7828      	ldrb	r0, [r5, #0]
 800b4cc:	f7ff ff9a 	bl	800b404 <__hexdig_fun>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1f8      	bne.n	800b4c6 <__gethex+0x96>
 800b4d4:	1b73      	subs	r3, r6, r5
 800b4d6:	009e      	lsls	r6, r3, #2
 800b4d8:	e004      	b.n	800b4e4 <__gethex+0xb4>
 800b4da:	2400      	movs	r4, #0
 800b4dc:	4626      	mov	r6, r4
 800b4de:	e7e1      	b.n	800b4a4 <__gethex+0x74>
 800b4e0:	2e00      	cmp	r6, #0
 800b4e2:	d1f7      	bne.n	800b4d4 <__gethex+0xa4>
 800b4e4:	782b      	ldrb	r3, [r5, #0]
 800b4e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4ea:	2b50      	cmp	r3, #80	; 0x50
 800b4ec:	d13d      	bne.n	800b56a <__gethex+0x13a>
 800b4ee:	786b      	ldrb	r3, [r5, #1]
 800b4f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b4f2:	d02f      	beq.n	800b554 <__gethex+0x124>
 800b4f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b4f6:	d031      	beq.n	800b55c <__gethex+0x12c>
 800b4f8:	1c69      	adds	r1, r5, #1
 800b4fa:	f04f 0b00 	mov.w	fp, #0
 800b4fe:	7808      	ldrb	r0, [r1, #0]
 800b500:	f7ff ff80 	bl	800b404 <__hexdig_fun>
 800b504:	1e42      	subs	r2, r0, #1
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	2a18      	cmp	r2, #24
 800b50a:	d82e      	bhi.n	800b56a <__gethex+0x13a>
 800b50c:	f1a0 0210 	sub.w	r2, r0, #16
 800b510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b514:	f7ff ff76 	bl	800b404 <__hexdig_fun>
 800b518:	f100 3cff 	add.w	ip, r0, #4294967295
 800b51c:	fa5f fc8c 	uxtb.w	ip, ip
 800b520:	f1bc 0f18 	cmp.w	ip, #24
 800b524:	d91d      	bls.n	800b562 <__gethex+0x132>
 800b526:	f1bb 0f00 	cmp.w	fp, #0
 800b52a:	d000      	beq.n	800b52e <__gethex+0xfe>
 800b52c:	4252      	negs	r2, r2
 800b52e:	4416      	add	r6, r2
 800b530:	f8ca 1000 	str.w	r1, [sl]
 800b534:	b1dc      	cbz	r4, 800b56e <__gethex+0x13e>
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bf14      	ite	ne
 800b53c:	f04f 0800 	movne.w	r8, #0
 800b540:	f04f 0806 	moveq.w	r8, #6
 800b544:	4640      	mov	r0, r8
 800b546:	b005      	add	sp, #20
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	4645      	mov	r5, r8
 800b54e:	4626      	mov	r6, r4
 800b550:	2401      	movs	r4, #1
 800b552:	e7c7      	b.n	800b4e4 <__gethex+0xb4>
 800b554:	f04f 0b00 	mov.w	fp, #0
 800b558:	1ca9      	adds	r1, r5, #2
 800b55a:	e7d0      	b.n	800b4fe <__gethex+0xce>
 800b55c:	f04f 0b01 	mov.w	fp, #1
 800b560:	e7fa      	b.n	800b558 <__gethex+0x128>
 800b562:	230a      	movs	r3, #10
 800b564:	fb03 0002 	mla	r0, r3, r2, r0
 800b568:	e7d0      	b.n	800b50c <__gethex+0xdc>
 800b56a:	4629      	mov	r1, r5
 800b56c:	e7e0      	b.n	800b530 <__gethex+0x100>
 800b56e:	eba5 0308 	sub.w	r3, r5, r8
 800b572:	3b01      	subs	r3, #1
 800b574:	4621      	mov	r1, r4
 800b576:	2b07      	cmp	r3, #7
 800b578:	dc0a      	bgt.n	800b590 <__gethex+0x160>
 800b57a:	4648      	mov	r0, r9
 800b57c:	f7fd ff52 	bl	8009424 <_Balloc>
 800b580:	4604      	mov	r4, r0
 800b582:	b940      	cbnz	r0, 800b596 <__gethex+0x166>
 800b584:	4b61      	ldr	r3, [pc, #388]	; (800b70c <__gethex+0x2dc>)
 800b586:	4602      	mov	r2, r0
 800b588:	21e4      	movs	r1, #228	; 0xe4
 800b58a:	4861      	ldr	r0, [pc, #388]	; (800b710 <__gethex+0x2e0>)
 800b58c:	f7ff feb4 	bl	800b2f8 <__assert_func>
 800b590:	3101      	adds	r1, #1
 800b592:	105b      	asrs	r3, r3, #1
 800b594:	e7ef      	b.n	800b576 <__gethex+0x146>
 800b596:	f100 0a14 	add.w	sl, r0, #20
 800b59a:	2300      	movs	r3, #0
 800b59c:	495a      	ldr	r1, [pc, #360]	; (800b708 <__gethex+0x2d8>)
 800b59e:	f8cd a004 	str.w	sl, [sp, #4]
 800b5a2:	469b      	mov	fp, r3
 800b5a4:	45a8      	cmp	r8, r5
 800b5a6:	d342      	bcc.n	800b62e <__gethex+0x1fe>
 800b5a8:	9801      	ldr	r0, [sp, #4]
 800b5aa:	f840 bb04 	str.w	fp, [r0], #4
 800b5ae:	eba0 000a 	sub.w	r0, r0, sl
 800b5b2:	1080      	asrs	r0, r0, #2
 800b5b4:	6120      	str	r0, [r4, #16]
 800b5b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b5ba:	4658      	mov	r0, fp
 800b5bc:	f7fe f824 	bl	8009608 <__hi0bits>
 800b5c0:	683d      	ldr	r5, [r7, #0]
 800b5c2:	eba8 0000 	sub.w	r0, r8, r0
 800b5c6:	42a8      	cmp	r0, r5
 800b5c8:	dd59      	ble.n	800b67e <__gethex+0x24e>
 800b5ca:	eba0 0805 	sub.w	r8, r0, r5
 800b5ce:	4641      	mov	r1, r8
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f7fe fbb3 	bl	8009d3c <__any_on>
 800b5d6:	4683      	mov	fp, r0
 800b5d8:	b1b8      	cbz	r0, 800b60a <__gethex+0x1da>
 800b5da:	f108 33ff 	add.w	r3, r8, #4294967295
 800b5de:	1159      	asrs	r1, r3, #5
 800b5e0:	f003 021f 	and.w	r2, r3, #31
 800b5e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5e8:	f04f 0b01 	mov.w	fp, #1
 800b5ec:	fa0b f202 	lsl.w	r2, fp, r2
 800b5f0:	420a      	tst	r2, r1
 800b5f2:	d00a      	beq.n	800b60a <__gethex+0x1da>
 800b5f4:	455b      	cmp	r3, fp
 800b5f6:	dd06      	ble.n	800b606 <__gethex+0x1d6>
 800b5f8:	f1a8 0102 	sub.w	r1, r8, #2
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7fe fb9d 	bl	8009d3c <__any_on>
 800b602:	2800      	cmp	r0, #0
 800b604:	d138      	bne.n	800b678 <__gethex+0x248>
 800b606:	f04f 0b02 	mov.w	fp, #2
 800b60a:	4641      	mov	r1, r8
 800b60c:	4620      	mov	r0, r4
 800b60e:	f7ff fea7 	bl	800b360 <rshift>
 800b612:	4446      	add	r6, r8
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	42b3      	cmp	r3, r6
 800b618:	da41      	bge.n	800b69e <__gethex+0x26e>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4648      	mov	r0, r9
 800b61e:	f7fd ff41 	bl	80094a4 <_Bfree>
 800b622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b624:	2300      	movs	r3, #0
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b62c:	e78a      	b.n	800b544 <__gethex+0x114>
 800b62e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b632:	2a2e      	cmp	r2, #46	; 0x2e
 800b634:	d014      	beq.n	800b660 <__gethex+0x230>
 800b636:	2b20      	cmp	r3, #32
 800b638:	d106      	bne.n	800b648 <__gethex+0x218>
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	f843 bb04 	str.w	fp, [r3], #4
 800b640:	f04f 0b00 	mov.w	fp, #0
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	465b      	mov	r3, fp
 800b648:	7828      	ldrb	r0, [r5, #0]
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	f7ff feda 	bl	800b404 <__hexdig_fun>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	f000 000f 	and.w	r0, r0, #15
 800b656:	4098      	lsls	r0, r3
 800b658:	ea4b 0b00 	orr.w	fp, fp, r0
 800b65c:	3304      	adds	r3, #4
 800b65e:	e7a1      	b.n	800b5a4 <__gethex+0x174>
 800b660:	45a8      	cmp	r8, r5
 800b662:	d8e8      	bhi.n	800b636 <__gethex+0x206>
 800b664:	2201      	movs	r2, #1
 800b666:	4628      	mov	r0, r5
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	f7ff fe19 	bl	800b2a0 <strncmp>
 800b66e:	4926      	ldr	r1, [pc, #152]	; (800b708 <__gethex+0x2d8>)
 800b670:	9b03      	ldr	r3, [sp, #12]
 800b672:	2800      	cmp	r0, #0
 800b674:	d1df      	bne.n	800b636 <__gethex+0x206>
 800b676:	e795      	b.n	800b5a4 <__gethex+0x174>
 800b678:	f04f 0b03 	mov.w	fp, #3
 800b67c:	e7c5      	b.n	800b60a <__gethex+0x1da>
 800b67e:	da0b      	bge.n	800b698 <__gethex+0x268>
 800b680:	eba5 0800 	sub.w	r8, r5, r0
 800b684:	4621      	mov	r1, r4
 800b686:	4642      	mov	r2, r8
 800b688:	4648      	mov	r0, r9
 800b68a:	f7fe f925 	bl	80098d8 <__lshift>
 800b68e:	eba6 0608 	sub.w	r6, r6, r8
 800b692:	4604      	mov	r4, r0
 800b694:	f100 0a14 	add.w	sl, r0, #20
 800b698:	f04f 0b00 	mov.w	fp, #0
 800b69c:	e7ba      	b.n	800b614 <__gethex+0x1e4>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	42b3      	cmp	r3, r6
 800b6a2:	dd73      	ble.n	800b78c <__gethex+0x35c>
 800b6a4:	1b9e      	subs	r6, r3, r6
 800b6a6:	42b5      	cmp	r5, r6
 800b6a8:	dc34      	bgt.n	800b714 <__gethex+0x2e4>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d023      	beq.n	800b6f8 <__gethex+0x2c8>
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d025      	beq.n	800b700 <__gethex+0x2d0>
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d115      	bne.n	800b6e4 <__gethex+0x2b4>
 800b6b8:	42b5      	cmp	r5, r6
 800b6ba:	d113      	bne.n	800b6e4 <__gethex+0x2b4>
 800b6bc:	2d01      	cmp	r5, #1
 800b6be:	d10b      	bne.n	800b6d8 <__gethex+0x2a8>
 800b6c0:	9a02      	ldr	r2, [sp, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	f8ca 3000 	str.w	r3, [sl]
 800b6ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b6d4:	601c      	str	r4, [r3, #0]
 800b6d6:	e735      	b.n	800b544 <__gethex+0x114>
 800b6d8:	1e69      	subs	r1, r5, #1
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7fe fb2e 	bl	8009d3c <__any_on>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d1ed      	bne.n	800b6c0 <__gethex+0x290>
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4648      	mov	r0, r9
 800b6e8:	f7fd fedc 	bl	80094a4 <_Bfree>
 800b6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b6f6:	e725      	b.n	800b544 <__gethex+0x114>
 800b6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1f2      	bne.n	800b6e4 <__gethex+0x2b4>
 800b6fe:	e7df      	b.n	800b6c0 <__gethex+0x290>
 800b700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1dc      	bne.n	800b6c0 <__gethex+0x290>
 800b706:	e7ed      	b.n	800b6e4 <__gethex+0x2b4>
 800b708:	0800de64 	.word	0x0800de64
 800b70c:	0800dcfd 	.word	0x0800dcfd
 800b710:	0800e00e 	.word	0x0800e00e
 800b714:	f106 38ff 	add.w	r8, r6, #4294967295
 800b718:	f1bb 0f00 	cmp.w	fp, #0
 800b71c:	d133      	bne.n	800b786 <__gethex+0x356>
 800b71e:	f1b8 0f00 	cmp.w	r8, #0
 800b722:	d004      	beq.n	800b72e <__gethex+0x2fe>
 800b724:	4641      	mov	r1, r8
 800b726:	4620      	mov	r0, r4
 800b728:	f7fe fb08 	bl	8009d3c <__any_on>
 800b72c:	4683      	mov	fp, r0
 800b72e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b732:	2301      	movs	r3, #1
 800b734:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b738:	f008 081f 	and.w	r8, r8, #31
 800b73c:	fa03 f308 	lsl.w	r3, r3, r8
 800b740:	4213      	tst	r3, r2
 800b742:	4631      	mov	r1, r6
 800b744:	4620      	mov	r0, r4
 800b746:	bf18      	it	ne
 800b748:	f04b 0b02 	orrne.w	fp, fp, #2
 800b74c:	1bad      	subs	r5, r5, r6
 800b74e:	f7ff fe07 	bl	800b360 <rshift>
 800b752:	687e      	ldr	r6, [r7, #4]
 800b754:	f04f 0802 	mov.w	r8, #2
 800b758:	f1bb 0f00 	cmp.w	fp, #0
 800b75c:	d04a      	beq.n	800b7f4 <__gethex+0x3c4>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b02      	cmp	r3, #2
 800b762:	d016      	beq.n	800b792 <__gethex+0x362>
 800b764:	2b03      	cmp	r3, #3
 800b766:	d018      	beq.n	800b79a <__gethex+0x36a>
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d109      	bne.n	800b780 <__gethex+0x350>
 800b76c:	f01b 0f02 	tst.w	fp, #2
 800b770:	d006      	beq.n	800b780 <__gethex+0x350>
 800b772:	f8da 3000 	ldr.w	r3, [sl]
 800b776:	ea4b 0b03 	orr.w	fp, fp, r3
 800b77a:	f01b 0f01 	tst.w	fp, #1
 800b77e:	d10f      	bne.n	800b7a0 <__gethex+0x370>
 800b780:	f048 0810 	orr.w	r8, r8, #16
 800b784:	e036      	b.n	800b7f4 <__gethex+0x3c4>
 800b786:	f04f 0b01 	mov.w	fp, #1
 800b78a:	e7d0      	b.n	800b72e <__gethex+0x2fe>
 800b78c:	f04f 0801 	mov.w	r8, #1
 800b790:	e7e2      	b.n	800b758 <__gethex+0x328>
 800b792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b794:	f1c3 0301 	rsb	r3, r3, #1
 800b798:	930f      	str	r3, [sp, #60]	; 0x3c
 800b79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0ef      	beq.n	800b780 <__gethex+0x350>
 800b7a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7a4:	f104 0214 	add.w	r2, r4, #20
 800b7a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4694      	mov	ip, r2
 800b7b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b7be:	d01e      	beq.n	800b7fe <__gethex+0x3ce>
 800b7c0:	3101      	adds	r1, #1
 800b7c2:	f8cc 1000 	str.w	r1, [ip]
 800b7c6:	f1b8 0f02 	cmp.w	r8, #2
 800b7ca:	f104 0214 	add.w	r2, r4, #20
 800b7ce:	d13d      	bne.n	800b84c <__gethex+0x41c>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	d10b      	bne.n	800b7f0 <__gethex+0x3c0>
 800b7d8:	1169      	asrs	r1, r5, #5
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f005 051f 	and.w	r5, r5, #31
 800b7e0:	fa03 f505 	lsl.w	r5, r3, r5
 800b7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7e8:	421d      	tst	r5, r3
 800b7ea:	bf18      	it	ne
 800b7ec:	f04f 0801 	movne.w	r8, #1
 800b7f0:	f048 0820 	orr.w	r8, r8, #32
 800b7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7f6:	601c      	str	r4, [r3, #0]
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	601e      	str	r6, [r3, #0]
 800b7fc:	e6a2      	b.n	800b544 <__gethex+0x114>
 800b7fe:	4290      	cmp	r0, r2
 800b800:	f842 3c04 	str.w	r3, [r2, #-4]
 800b804:	d8d6      	bhi.n	800b7b4 <__gethex+0x384>
 800b806:	68a2      	ldr	r2, [r4, #8]
 800b808:	4593      	cmp	fp, r2
 800b80a:	db17      	blt.n	800b83c <__gethex+0x40c>
 800b80c:	6861      	ldr	r1, [r4, #4]
 800b80e:	4648      	mov	r0, r9
 800b810:	3101      	adds	r1, #1
 800b812:	f7fd fe07 	bl	8009424 <_Balloc>
 800b816:	4682      	mov	sl, r0
 800b818:	b918      	cbnz	r0, 800b822 <__gethex+0x3f2>
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <__gethex+0x458>)
 800b81c:	4602      	mov	r2, r0
 800b81e:	2184      	movs	r1, #132	; 0x84
 800b820:	e6b3      	b.n	800b58a <__gethex+0x15a>
 800b822:	6922      	ldr	r2, [r4, #16]
 800b824:	3202      	adds	r2, #2
 800b826:	f104 010c 	add.w	r1, r4, #12
 800b82a:	0092      	lsls	r2, r2, #2
 800b82c:	300c      	adds	r0, #12
 800b82e:	f7fc fe6a 	bl	8008506 <memcpy>
 800b832:	4621      	mov	r1, r4
 800b834:	4648      	mov	r0, r9
 800b836:	f7fd fe35 	bl	80094a4 <_Bfree>
 800b83a:	4654      	mov	r4, sl
 800b83c:	6922      	ldr	r2, [r4, #16]
 800b83e:	1c51      	adds	r1, r2, #1
 800b840:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b844:	6121      	str	r1, [r4, #16]
 800b846:	2101      	movs	r1, #1
 800b848:	6151      	str	r1, [r2, #20]
 800b84a:	e7bc      	b.n	800b7c6 <__gethex+0x396>
 800b84c:	6921      	ldr	r1, [r4, #16]
 800b84e:	4559      	cmp	r1, fp
 800b850:	dd0b      	ble.n	800b86a <__gethex+0x43a>
 800b852:	2101      	movs	r1, #1
 800b854:	4620      	mov	r0, r4
 800b856:	f7ff fd83 	bl	800b360 <rshift>
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	3601      	adds	r6, #1
 800b85e:	42b3      	cmp	r3, r6
 800b860:	f6ff aedb 	blt.w	800b61a <__gethex+0x1ea>
 800b864:	f04f 0801 	mov.w	r8, #1
 800b868:	e7c2      	b.n	800b7f0 <__gethex+0x3c0>
 800b86a:	f015 051f 	ands.w	r5, r5, #31
 800b86e:	d0f9      	beq.n	800b864 <__gethex+0x434>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	441a      	add	r2, r3
 800b874:	f1c5 0520 	rsb	r5, r5, #32
 800b878:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b87c:	f7fd fec4 	bl	8009608 <__hi0bits>
 800b880:	42a8      	cmp	r0, r5
 800b882:	dbe6      	blt.n	800b852 <__gethex+0x422>
 800b884:	e7ee      	b.n	800b864 <__gethex+0x434>
 800b886:	bf00      	nop
 800b888:	0800dcfd 	.word	0x0800dcfd

0800b88c <L_shift>:
 800b88c:	f1c2 0208 	rsb	r2, r2, #8
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	b570      	push	{r4, r5, r6, lr}
 800b894:	f1c2 0620 	rsb	r6, r2, #32
 800b898:	6843      	ldr	r3, [r0, #4]
 800b89a:	6804      	ldr	r4, [r0, #0]
 800b89c:	fa03 f506 	lsl.w	r5, r3, r6
 800b8a0:	432c      	orrs	r4, r5
 800b8a2:	40d3      	lsrs	r3, r2
 800b8a4:	6004      	str	r4, [r0, #0]
 800b8a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8aa:	4288      	cmp	r0, r1
 800b8ac:	d3f4      	bcc.n	800b898 <L_shift+0xc>
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}

0800b8b0 <__match>:
 800b8b0:	b530      	push	{r4, r5, lr}
 800b8b2:	6803      	ldr	r3, [r0, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ba:	b914      	cbnz	r4, 800b8c2 <__match+0x12>
 800b8bc:	6003      	str	r3, [r0, #0]
 800b8be:	2001      	movs	r0, #1
 800b8c0:	bd30      	pop	{r4, r5, pc}
 800b8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8ca:	2d19      	cmp	r5, #25
 800b8cc:	bf98      	it	ls
 800b8ce:	3220      	addls	r2, #32
 800b8d0:	42a2      	cmp	r2, r4
 800b8d2:	d0f0      	beq.n	800b8b6 <__match+0x6>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e7f3      	b.n	800b8c0 <__match+0x10>

0800b8d8 <__hexnan>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	680b      	ldr	r3, [r1, #0]
 800b8de:	6801      	ldr	r1, [r0, #0]
 800b8e0:	115e      	asrs	r6, r3, #5
 800b8e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8e6:	f013 031f 	ands.w	r3, r3, #31
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	bf18      	it	ne
 800b8ee:	3604      	addne	r6, #4
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	1f37      	subs	r7, r6, #4
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	4690      	mov	r8, r2
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8fe:	46b9      	mov	r9, r7
 800b900:	463c      	mov	r4, r7
 800b902:	9502      	str	r5, [sp, #8]
 800b904:	46ab      	mov	fp, r5
 800b906:	784a      	ldrb	r2, [r1, #1]
 800b908:	1c4b      	adds	r3, r1, #1
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	b342      	cbz	r2, 800b960 <__hexnan+0x88>
 800b90e:	4610      	mov	r0, r2
 800b910:	9105      	str	r1, [sp, #20]
 800b912:	9204      	str	r2, [sp, #16]
 800b914:	f7ff fd76 	bl	800b404 <__hexdig_fun>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d14f      	bne.n	800b9bc <__hexnan+0xe4>
 800b91c:	9a04      	ldr	r2, [sp, #16]
 800b91e:	9905      	ldr	r1, [sp, #20]
 800b920:	2a20      	cmp	r2, #32
 800b922:	d818      	bhi.n	800b956 <__hexnan+0x7e>
 800b924:	9b02      	ldr	r3, [sp, #8]
 800b926:	459b      	cmp	fp, r3
 800b928:	dd13      	ble.n	800b952 <__hexnan+0x7a>
 800b92a:	454c      	cmp	r4, r9
 800b92c:	d206      	bcs.n	800b93c <__hexnan+0x64>
 800b92e:	2d07      	cmp	r5, #7
 800b930:	dc04      	bgt.n	800b93c <__hexnan+0x64>
 800b932:	462a      	mov	r2, r5
 800b934:	4649      	mov	r1, r9
 800b936:	4620      	mov	r0, r4
 800b938:	f7ff ffa8 	bl	800b88c <L_shift>
 800b93c:	4544      	cmp	r4, r8
 800b93e:	d950      	bls.n	800b9e2 <__hexnan+0x10a>
 800b940:	2300      	movs	r3, #0
 800b942:	f1a4 0904 	sub.w	r9, r4, #4
 800b946:	f844 3c04 	str.w	r3, [r4, #-4]
 800b94a:	f8cd b008 	str.w	fp, [sp, #8]
 800b94e:	464c      	mov	r4, r9
 800b950:	461d      	mov	r5, r3
 800b952:	9903      	ldr	r1, [sp, #12]
 800b954:	e7d7      	b.n	800b906 <__hexnan+0x2e>
 800b956:	2a29      	cmp	r2, #41	; 0x29
 800b958:	d155      	bne.n	800ba06 <__hexnan+0x12e>
 800b95a:	3102      	adds	r1, #2
 800b95c:	f8ca 1000 	str.w	r1, [sl]
 800b960:	f1bb 0f00 	cmp.w	fp, #0
 800b964:	d04f      	beq.n	800ba06 <__hexnan+0x12e>
 800b966:	454c      	cmp	r4, r9
 800b968:	d206      	bcs.n	800b978 <__hexnan+0xa0>
 800b96a:	2d07      	cmp	r5, #7
 800b96c:	dc04      	bgt.n	800b978 <__hexnan+0xa0>
 800b96e:	462a      	mov	r2, r5
 800b970:	4649      	mov	r1, r9
 800b972:	4620      	mov	r0, r4
 800b974:	f7ff ff8a 	bl	800b88c <L_shift>
 800b978:	4544      	cmp	r4, r8
 800b97a:	d934      	bls.n	800b9e6 <__hexnan+0x10e>
 800b97c:	f1a8 0204 	sub.w	r2, r8, #4
 800b980:	4623      	mov	r3, r4
 800b982:	f853 1b04 	ldr.w	r1, [r3], #4
 800b986:	f842 1f04 	str.w	r1, [r2, #4]!
 800b98a:	429f      	cmp	r7, r3
 800b98c:	d2f9      	bcs.n	800b982 <__hexnan+0xaa>
 800b98e:	1b3b      	subs	r3, r7, r4
 800b990:	f023 0303 	bic.w	r3, r3, #3
 800b994:	3304      	adds	r3, #4
 800b996:	3e03      	subs	r6, #3
 800b998:	3401      	adds	r4, #1
 800b99a:	42a6      	cmp	r6, r4
 800b99c:	bf38      	it	cc
 800b99e:	2304      	movcc	r3, #4
 800b9a0:	4443      	add	r3, r8
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f843 2b04 	str.w	r2, [r3], #4
 800b9a8:	429f      	cmp	r7, r3
 800b9aa:	d2fb      	bcs.n	800b9a4 <__hexnan+0xcc>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	b91b      	cbnz	r3, 800b9b8 <__hexnan+0xe0>
 800b9b0:	4547      	cmp	r7, r8
 800b9b2:	d126      	bne.n	800ba02 <__hexnan+0x12a>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	2005      	movs	r0, #5
 800b9ba:	e025      	b.n	800ba08 <__hexnan+0x130>
 800b9bc:	3501      	adds	r5, #1
 800b9be:	2d08      	cmp	r5, #8
 800b9c0:	f10b 0b01 	add.w	fp, fp, #1
 800b9c4:	dd06      	ble.n	800b9d4 <__hexnan+0xfc>
 800b9c6:	4544      	cmp	r4, r8
 800b9c8:	d9c3      	bls.n	800b952 <__hexnan+0x7a>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9d0:	2501      	movs	r5, #1
 800b9d2:	3c04      	subs	r4, #4
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	f000 000f 	and.w	r0, r0, #15
 800b9da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9de:	6020      	str	r0, [r4, #0]
 800b9e0:	e7b7      	b.n	800b952 <__hexnan+0x7a>
 800b9e2:	2508      	movs	r5, #8
 800b9e4:	e7b5      	b.n	800b952 <__hexnan+0x7a>
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0df      	beq.n	800b9ac <__hexnan+0xd4>
 800b9ec:	f1c3 0320 	rsb	r3, r3, #32
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f4:	40da      	lsrs	r2, r3
 800b9f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba00:	e7d4      	b.n	800b9ac <__hexnan+0xd4>
 800ba02:	3f04      	subs	r7, #4
 800ba04:	e7d2      	b.n	800b9ac <__hexnan+0xd4>
 800ba06:	2004      	movs	r0, #4
 800ba08:	b007      	add	sp, #28
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba0e <__ascii_mbtowc>:
 800ba0e:	b082      	sub	sp, #8
 800ba10:	b901      	cbnz	r1, 800ba14 <__ascii_mbtowc+0x6>
 800ba12:	a901      	add	r1, sp, #4
 800ba14:	b142      	cbz	r2, 800ba28 <__ascii_mbtowc+0x1a>
 800ba16:	b14b      	cbz	r3, 800ba2c <__ascii_mbtowc+0x1e>
 800ba18:	7813      	ldrb	r3, [r2, #0]
 800ba1a:	600b      	str	r3, [r1, #0]
 800ba1c:	7812      	ldrb	r2, [r2, #0]
 800ba1e:	1e10      	subs	r0, r2, #0
 800ba20:	bf18      	it	ne
 800ba22:	2001      	movne	r0, #1
 800ba24:	b002      	add	sp, #8
 800ba26:	4770      	bx	lr
 800ba28:	4610      	mov	r0, r2
 800ba2a:	e7fb      	b.n	800ba24 <__ascii_mbtowc+0x16>
 800ba2c:	f06f 0001 	mvn.w	r0, #1
 800ba30:	e7f8      	b.n	800ba24 <__ascii_mbtowc+0x16>

0800ba32 <_realloc_r>:
 800ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	4680      	mov	r8, r0
 800ba38:	4614      	mov	r4, r2
 800ba3a:	460e      	mov	r6, r1
 800ba3c:	b921      	cbnz	r1, 800ba48 <_realloc_r+0x16>
 800ba3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba42:	4611      	mov	r1, r2
 800ba44:	f7fd bc62 	b.w	800930c <_malloc_r>
 800ba48:	b92a      	cbnz	r2, 800ba56 <_realloc_r+0x24>
 800ba4a:	f7fd fbeb 	bl	8009224 <_free_r>
 800ba4e:	4625      	mov	r5, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba56:	f000 f8c6 	bl	800bbe6 <_malloc_usable_size_r>
 800ba5a:	4284      	cmp	r4, r0
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	d802      	bhi.n	800ba66 <_realloc_r+0x34>
 800ba60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba64:	d812      	bhi.n	800ba8c <_realloc_r+0x5a>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4640      	mov	r0, r8
 800ba6a:	f7fd fc4f 	bl	800930c <_malloc_r>
 800ba6e:	4605      	mov	r5, r0
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0ed      	beq.n	800ba50 <_realloc_r+0x1e>
 800ba74:	42bc      	cmp	r4, r7
 800ba76:	4622      	mov	r2, r4
 800ba78:	4631      	mov	r1, r6
 800ba7a:	bf28      	it	cs
 800ba7c:	463a      	movcs	r2, r7
 800ba7e:	f7fc fd42 	bl	8008506 <memcpy>
 800ba82:	4631      	mov	r1, r6
 800ba84:	4640      	mov	r0, r8
 800ba86:	f7fd fbcd 	bl	8009224 <_free_r>
 800ba8a:	e7e1      	b.n	800ba50 <_realloc_r+0x1e>
 800ba8c:	4635      	mov	r5, r6
 800ba8e:	e7df      	b.n	800ba50 <_realloc_r+0x1e>

0800ba90 <__ascii_wctomb>:
 800ba90:	b149      	cbz	r1, 800baa6 <__ascii_wctomb+0x16>
 800ba92:	2aff      	cmp	r2, #255	; 0xff
 800ba94:	bf85      	ittet	hi
 800ba96:	238a      	movhi	r3, #138	; 0x8a
 800ba98:	6003      	strhi	r3, [r0, #0]
 800ba9a:	700a      	strbls	r2, [r1, #0]
 800ba9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800baa0:	bf98      	it	ls
 800baa2:	2001      	movls	r0, #1
 800baa4:	4770      	bx	lr
 800baa6:	4608      	mov	r0, r1
 800baa8:	4770      	bx	lr
	...

0800baac <fiprintf>:
 800baac:	b40e      	push	{r1, r2, r3}
 800baae:	b503      	push	{r0, r1, lr}
 800bab0:	4601      	mov	r1, r0
 800bab2:	ab03      	add	r3, sp, #12
 800bab4:	4805      	ldr	r0, [pc, #20]	; (800bacc <fiprintf+0x20>)
 800bab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	f7ff f977 	bl	800adb0 <_vfiprintf_r>
 800bac2:	b002      	add	sp, #8
 800bac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac8:	b003      	add	sp, #12
 800baca:	4770      	bx	lr
 800bacc:	20000094 	.word	0x20000094

0800bad0 <__swhatbuf_r>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	460c      	mov	r4, r1
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	2900      	cmp	r1, #0
 800bada:	b096      	sub	sp, #88	; 0x58
 800badc:	4615      	mov	r5, r2
 800bade:	461e      	mov	r6, r3
 800bae0:	da0d      	bge.n	800bafe <__swhatbuf_r+0x2e>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bae8:	f04f 0100 	mov.w	r1, #0
 800baec:	bf0c      	ite	eq
 800baee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800baf2:	2340      	movne	r3, #64	; 0x40
 800baf4:	2000      	movs	r0, #0
 800baf6:	6031      	str	r1, [r6, #0]
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	b016      	add	sp, #88	; 0x58
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	466a      	mov	r2, sp
 800bb00:	f000 f848 	bl	800bb94 <_fstat_r>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	dbec      	blt.n	800bae2 <__swhatbuf_r+0x12>
 800bb08:	9901      	ldr	r1, [sp, #4]
 800bb0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb12:	4259      	negs	r1, r3
 800bb14:	4159      	adcs	r1, r3
 800bb16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1a:	e7eb      	b.n	800baf4 <__swhatbuf_r+0x24>

0800bb1c <__smakebuf_r>:
 800bb1c:	898b      	ldrh	r3, [r1, #12]
 800bb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb20:	079d      	lsls	r5, r3, #30
 800bb22:	4606      	mov	r6, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	d507      	bpl.n	800bb38 <__smakebuf_r+0x1c>
 800bb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	2301      	movs	r3, #1
 800bb32:	6163      	str	r3, [r4, #20]
 800bb34:	b002      	add	sp, #8
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	ab01      	add	r3, sp, #4
 800bb3a:	466a      	mov	r2, sp
 800bb3c:	f7ff ffc8 	bl	800bad0 <__swhatbuf_r>
 800bb40:	9900      	ldr	r1, [sp, #0]
 800bb42:	4605      	mov	r5, r0
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7fd fbe1 	bl	800930c <_malloc_r>
 800bb4a:	b948      	cbnz	r0, 800bb60 <__smakebuf_r+0x44>
 800bb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb50:	059a      	lsls	r2, r3, #22
 800bb52:	d4ef      	bmi.n	800bb34 <__smakebuf_r+0x18>
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	f043 0302 	orr.w	r3, r3, #2
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	e7e3      	b.n	800bb28 <__smakebuf_r+0xc>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	6020      	str	r0, [r4, #0]
 800bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	6163      	str	r3, [r4, #20]
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	6120      	str	r0, [r4, #16]
 800bb72:	b15b      	cbz	r3, 800bb8c <__smakebuf_r+0x70>
 800bb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f000 f81d 	bl	800bbb8 <_isatty_r>
 800bb7e:	b128      	cbz	r0, 800bb8c <__smakebuf_r+0x70>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	431d      	orrs	r5, r3
 800bb90:	81a5      	strh	r5, [r4, #12]
 800bb92:	e7cf      	b.n	800bb34 <__smakebuf_r+0x18>

0800bb94 <_fstat_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d07      	ldr	r5, [pc, #28]	; (800bbb4 <_fstat_r+0x20>)
 800bb98:	2300      	movs	r3, #0
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	4611      	mov	r1, r2
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	f7f7 fc3c 	bl	800341e <_fstat>
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	d102      	bne.n	800bbb0 <_fstat_r+0x1c>
 800bbaa:	682b      	ldr	r3, [r5, #0]
 800bbac:	b103      	cbz	r3, 800bbb0 <_fstat_r+0x1c>
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000f10 	.word	0x20000f10

0800bbb8 <_isatty_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d06      	ldr	r5, [pc, #24]	; (800bbd4 <_isatty_r+0x1c>)
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	602b      	str	r3, [r5, #0]
 800bbc4:	f7f7 fc3b 	bl	800343e <_isatty>
 800bbc8:	1c43      	adds	r3, r0, #1
 800bbca:	d102      	bne.n	800bbd2 <_isatty_r+0x1a>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	b103      	cbz	r3, 800bbd2 <_isatty_r+0x1a>
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	20000f10 	.word	0x20000f10

0800bbd8 <abort>:
 800bbd8:	b508      	push	{r3, lr}
 800bbda:	2006      	movs	r0, #6
 800bbdc:	f000 f834 	bl	800bc48 <raise>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f7f7 fbe9 	bl	80033b8 <_exit>

0800bbe6 <_malloc_usable_size_r>:
 800bbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbea:	1f18      	subs	r0, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	bfbc      	itt	lt
 800bbf0:	580b      	ldrlt	r3, [r1, r0]
 800bbf2:	18c0      	addlt	r0, r0, r3
 800bbf4:	4770      	bx	lr

0800bbf6 <_raise_r>:
 800bbf6:	291f      	cmp	r1, #31
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	d904      	bls.n	800bc0a <_raise_r+0x14>
 800bc00:	2316      	movs	r3, #22
 800bc02:	6003      	str	r3, [r0, #0]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	bd38      	pop	{r3, r4, r5, pc}
 800bc0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc0c:	b112      	cbz	r2, 800bc14 <_raise_r+0x1e>
 800bc0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc12:	b94b      	cbnz	r3, 800bc28 <_raise_r+0x32>
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 f831 	bl	800bc7c <_getpid_r>
 800bc1a:	462a      	mov	r2, r5
 800bc1c:	4601      	mov	r1, r0
 800bc1e:	4620      	mov	r0, r4
 800bc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc24:	f000 b818 	b.w	800bc58 <_kill_r>
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d00a      	beq.n	800bc42 <_raise_r+0x4c>
 800bc2c:	1c59      	adds	r1, r3, #1
 800bc2e:	d103      	bne.n	800bc38 <_raise_r+0x42>
 800bc30:	2316      	movs	r3, #22
 800bc32:	6003      	str	r3, [r0, #0]
 800bc34:	2001      	movs	r0, #1
 800bc36:	e7e7      	b.n	800bc08 <_raise_r+0x12>
 800bc38:	2400      	movs	r4, #0
 800bc3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc3e:	4628      	mov	r0, r5
 800bc40:	4798      	blx	r3
 800bc42:	2000      	movs	r0, #0
 800bc44:	e7e0      	b.n	800bc08 <_raise_r+0x12>
	...

0800bc48 <raise>:
 800bc48:	4b02      	ldr	r3, [pc, #8]	; (800bc54 <raise+0xc>)
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	f7ff bfd2 	b.w	800bbf6 <_raise_r>
 800bc52:	bf00      	nop
 800bc54:	20000094 	.word	0x20000094

0800bc58 <_kill_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d07      	ldr	r5, [pc, #28]	; (800bc78 <_kill_r+0x20>)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	4611      	mov	r1, r2
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	f7f7 fb97 	bl	8003398 <_kill>
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	d102      	bne.n	800bc74 <_kill_r+0x1c>
 800bc6e:	682b      	ldr	r3, [r5, #0]
 800bc70:	b103      	cbz	r3, 800bc74 <_kill_r+0x1c>
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	bd38      	pop	{r3, r4, r5, pc}
 800bc76:	bf00      	nop
 800bc78:	20000f10 	.word	0x20000f10

0800bc7c <_getpid_r>:
 800bc7c:	f7f7 bb84 	b.w	8003388 <_getpid>

0800bc80 <asin>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	ed2d 8b02 	vpush	{d8}
 800bc86:	ec55 4b10 	vmov	r4, r5, d0
 800bc8a:	f000 ff55 	bl	800cb38 <__ieee754_asin>
 800bc8e:	4622      	mov	r2, r4
 800bc90:	462b      	mov	r3, r5
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9a:	eef0 8a60 	vmov.f32	s17, s1
 800bc9e:	f7f4 ff45 	bl	8000b2c <__aeabi_dcmpun>
 800bca2:	b9a8      	cbnz	r0, 800bcd0 <asin+0x50>
 800bca4:	ec45 4b10 	vmov	d0, r4, r5
 800bca8:	f000 fa3e 	bl	800c128 <fabs>
 800bcac:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <asin+0x60>)
 800bcae:	ec51 0b10 	vmov	r0, r1, d0
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f7f4 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 800bcb8:	b150      	cbz	r0, 800bcd0 <asin+0x50>
 800bcba:	f7fc fbf7 	bl	80084ac <__errno>
 800bcbe:	ecbd 8b02 	vpop	{d8}
 800bcc2:	2321      	movs	r3, #33	; 0x21
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcca:	4806      	ldr	r0, [pc, #24]	; (800bce4 <asin+0x64>)
 800bccc:	f7ff bb0c 	b.w	800b2e8 <nan>
 800bcd0:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd4:	eef0 0a68 	vmov.f32	s1, s17
 800bcd8:	ecbd 8b02 	vpop	{d8}
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	bf00      	nop
 800bce0:	3ff00000 	.word	0x3ff00000
 800bce4:	0800e00d 	.word	0x0800e00d

0800bce8 <sqrt>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	ed2d 8b02 	vpush	{d8}
 800bcee:	ec55 4b10 	vmov	r4, r5, d0
 800bcf2:	f000 fab1 	bl	800c258 <__ieee754_sqrt>
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	eeb0 8a40 	vmov.f32	s16, s0
 800bd02:	eef0 8a60 	vmov.f32	s17, s1
 800bd06:	f7f4 ff11 	bl	8000b2c <__aeabi_dcmpun>
 800bd0a:	b990      	cbnz	r0, 800bd32 <sqrt+0x4a>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2300      	movs	r3, #0
 800bd10:	4620      	mov	r0, r4
 800bd12:	4629      	mov	r1, r5
 800bd14:	f7f4 fee2 	bl	8000adc <__aeabi_dcmplt>
 800bd18:	b158      	cbz	r0, 800bd32 <sqrt+0x4a>
 800bd1a:	f7fc fbc7 	bl	80084ac <__errno>
 800bd1e:	2321      	movs	r3, #33	; 0x21
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	4610      	mov	r0, r2
 800bd28:	4619      	mov	r1, r3
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	ec41 0b18 	vmov	d8, r0, r1
 800bd32:	eeb0 0a48 	vmov.f32	s0, s16
 800bd36:	eef0 0a68 	vmov.f32	s1, s17
 800bd3a:	ecbd 8b02 	vpop	{d8}
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}

0800bd40 <atan>:
 800bd40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	ec55 4b10 	vmov	r4, r5, d0
 800bd48:	4bc3      	ldr	r3, [pc, #780]	; (800c058 <atan+0x318>)
 800bd4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd4e:	429e      	cmp	r6, r3
 800bd50:	46ab      	mov	fp, r5
 800bd52:	dd18      	ble.n	800bd86 <atan+0x46>
 800bd54:	4bc1      	ldr	r3, [pc, #772]	; (800c05c <atan+0x31c>)
 800bd56:	429e      	cmp	r6, r3
 800bd58:	dc01      	bgt.n	800bd5e <atan+0x1e>
 800bd5a:	d109      	bne.n	800bd70 <atan+0x30>
 800bd5c:	b144      	cbz	r4, 800bd70 <atan+0x30>
 800bd5e:	4622      	mov	r2, r4
 800bd60:	462b      	mov	r3, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fa91 	bl	800028c <__adddf3>
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	e006      	b.n	800bd7e <atan+0x3e>
 800bd70:	f1bb 0f00 	cmp.w	fp, #0
 800bd74:	f300 8131 	bgt.w	800bfda <atan+0x29a>
 800bd78:	a59b      	add	r5, pc, #620	; (adr r5, 800bfe8 <atan+0x2a8>)
 800bd7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd7e:	ec45 4b10 	vmov	d0, r4, r5
 800bd82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd86:	4bb6      	ldr	r3, [pc, #728]	; (800c060 <atan+0x320>)
 800bd88:	429e      	cmp	r6, r3
 800bd8a:	dc14      	bgt.n	800bdb6 <atan+0x76>
 800bd8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bd90:	429e      	cmp	r6, r3
 800bd92:	dc0d      	bgt.n	800bdb0 <atan+0x70>
 800bd94:	a396      	add	r3, pc, #600	; (adr r3, 800bff0 <atan+0x2b0>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	ee10 0a10 	vmov	r0, s0
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7f4 fa74 	bl	800028c <__adddf3>
 800bda4:	4baf      	ldr	r3, [pc, #700]	; (800c064 <atan+0x324>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	f7f4 feb6 	bl	8000b18 <__aeabi_dcmpgt>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d1e6      	bne.n	800bd7e <atan+0x3e>
 800bdb0:	f04f 3aff 	mov.w	sl, #4294967295
 800bdb4:	e02b      	b.n	800be0e <atan+0xce>
 800bdb6:	f000 f9b7 	bl	800c128 <fabs>
 800bdba:	4bab      	ldr	r3, [pc, #684]	; (800c068 <atan+0x328>)
 800bdbc:	429e      	cmp	r6, r3
 800bdbe:	ec55 4b10 	vmov	r4, r5, d0
 800bdc2:	f300 80bf 	bgt.w	800bf44 <atan+0x204>
 800bdc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bdca:	429e      	cmp	r6, r3
 800bdcc:	f300 80a0 	bgt.w	800bf10 <atan+0x1d0>
 800bdd0:	ee10 2a10 	vmov	r2, s0
 800bdd4:	ee10 0a10 	vmov	r0, s0
 800bdd8:	462b      	mov	r3, r5
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fa56 	bl	800028c <__adddf3>
 800bde0:	4ba0      	ldr	r3, [pc, #640]	; (800c064 <atan+0x324>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	f7f4 fa50 	bl	8000288 <__aeabi_dsub>
 800bde8:	2200      	movs	r2, #0
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f7f4 fa49 	bl	800028c <__adddf3>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4630      	mov	r0, r6
 800be00:	4639      	mov	r1, r7
 800be02:	f7f4 fd23 	bl	800084c <__aeabi_ddiv>
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	4604      	mov	r4, r0
 800be0c:	460d      	mov	r5, r1
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	4620      	mov	r0, r4
 800be14:	4629      	mov	r1, r5
 800be16:	f7f4 fbef 	bl	80005f8 <__aeabi_dmul>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4680      	mov	r8, r0
 800be20:	4689      	mov	r9, r1
 800be22:	f7f4 fbe9 	bl	80005f8 <__aeabi_dmul>
 800be26:	a374      	add	r3, pc, #464	; (adr r3, 800bff8 <atan+0x2b8>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	f7f4 fbe2 	bl	80005f8 <__aeabi_dmul>
 800be34:	a372      	add	r3, pc, #456	; (adr r3, 800c000 <atan+0x2c0>)
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	f7f4 fa27 	bl	800028c <__adddf3>
 800be3e:	4632      	mov	r2, r6
 800be40:	463b      	mov	r3, r7
 800be42:	f7f4 fbd9 	bl	80005f8 <__aeabi_dmul>
 800be46:	a370      	add	r3, pc, #448	; (adr r3, 800c008 <atan+0x2c8>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f7f4 fa1e 	bl	800028c <__adddf3>
 800be50:	4632      	mov	r2, r6
 800be52:	463b      	mov	r3, r7
 800be54:	f7f4 fbd0 	bl	80005f8 <__aeabi_dmul>
 800be58:	a36d      	add	r3, pc, #436	; (adr r3, 800c010 <atan+0x2d0>)
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f7f4 fa15 	bl	800028c <__adddf3>
 800be62:	4632      	mov	r2, r6
 800be64:	463b      	mov	r3, r7
 800be66:	f7f4 fbc7 	bl	80005f8 <__aeabi_dmul>
 800be6a:	a36b      	add	r3, pc, #428	; (adr r3, 800c018 <atan+0x2d8>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fa0c 	bl	800028c <__adddf3>
 800be74:	4632      	mov	r2, r6
 800be76:	463b      	mov	r3, r7
 800be78:	f7f4 fbbe 	bl	80005f8 <__aeabi_dmul>
 800be7c:	a368      	add	r3, pc, #416	; (adr r3, 800c020 <atan+0x2e0>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fa03 	bl	800028c <__adddf3>
 800be86:	4642      	mov	r2, r8
 800be88:	464b      	mov	r3, r9
 800be8a:	f7f4 fbb5 	bl	80005f8 <__aeabi_dmul>
 800be8e:	a366      	add	r3, pc, #408	; (adr r3, 800c028 <atan+0x2e8>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	4680      	mov	r8, r0
 800be96:	4689      	mov	r9, r1
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fbac 	bl	80005f8 <__aeabi_dmul>
 800bea0:	a363      	add	r3, pc, #396	; (adr r3, 800c030 <atan+0x2f0>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f7f4 f9ef 	bl	8000288 <__aeabi_dsub>
 800beaa:	4632      	mov	r2, r6
 800beac:	463b      	mov	r3, r7
 800beae:	f7f4 fba3 	bl	80005f8 <__aeabi_dmul>
 800beb2:	a361      	add	r3, pc, #388	; (adr r3, 800c038 <atan+0x2f8>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f9e6 	bl	8000288 <__aeabi_dsub>
 800bebc:	4632      	mov	r2, r6
 800bebe:	463b      	mov	r3, r7
 800bec0:	f7f4 fb9a 	bl	80005f8 <__aeabi_dmul>
 800bec4:	a35e      	add	r3, pc, #376	; (adr r3, 800c040 <atan+0x300>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 f9dd 	bl	8000288 <__aeabi_dsub>
 800bece:	4632      	mov	r2, r6
 800bed0:	463b      	mov	r3, r7
 800bed2:	f7f4 fb91 	bl	80005f8 <__aeabi_dmul>
 800bed6:	a35c      	add	r3, pc, #368	; (adr r3, 800c048 <atan+0x308>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	f7f4 f9d4 	bl	8000288 <__aeabi_dsub>
 800bee0:	4632      	mov	r2, r6
 800bee2:	463b      	mov	r3, r7
 800bee4:	f7f4 fb88 	bl	80005f8 <__aeabi_dmul>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 f9cc 	bl	800028c <__adddf3>
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb7e 	bl	80005f8 <__aeabi_dmul>
 800befc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	d14b      	bne.n	800bf9e <atan+0x25e>
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 f9bd 	bl	8000288 <__aeabi_dsub>
 800bf0e:	e72c      	b.n	800bd6a <atan+0x2a>
 800bf10:	ee10 0a10 	vmov	r0, s0
 800bf14:	4b53      	ldr	r3, [pc, #332]	; (800c064 <atan+0x324>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 f9b5 	bl	8000288 <__aeabi_dsub>
 800bf1e:	4b51      	ldr	r3, [pc, #324]	; (800c064 <atan+0x324>)
 800bf20:	4606      	mov	r6, r0
 800bf22:	460f      	mov	r7, r1
 800bf24:	2200      	movs	r2, #0
 800bf26:	4620      	mov	r0, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	f7f4 f9af 	bl	800028c <__adddf3>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4630      	mov	r0, r6
 800bf34:	4639      	mov	r1, r7
 800bf36:	f7f4 fc89 	bl	800084c <__aeabi_ddiv>
 800bf3a:	f04f 0a01 	mov.w	sl, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	e764      	b.n	800be0e <atan+0xce>
 800bf44:	4b49      	ldr	r3, [pc, #292]	; (800c06c <atan+0x32c>)
 800bf46:	429e      	cmp	r6, r3
 800bf48:	da1d      	bge.n	800bf86 <atan+0x246>
 800bf4a:	ee10 0a10 	vmov	r0, s0
 800bf4e:	4b48      	ldr	r3, [pc, #288]	; (800c070 <atan+0x330>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	4629      	mov	r1, r5
 800bf54:	f7f4 f998 	bl	8000288 <__aeabi_dsub>
 800bf58:	4b45      	ldr	r3, [pc, #276]	; (800c070 <atan+0x330>)
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460f      	mov	r7, r1
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4620      	mov	r0, r4
 800bf62:	4629      	mov	r1, r5
 800bf64:	f7f4 fb48 	bl	80005f8 <__aeabi_dmul>
 800bf68:	4b3e      	ldr	r3, [pc, #248]	; (800c064 <atan+0x324>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f7f4 f98e 	bl	800028c <__adddf3>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4630      	mov	r0, r6
 800bf76:	4639      	mov	r1, r7
 800bf78:	f7f4 fc68 	bl	800084c <__aeabi_ddiv>
 800bf7c:	f04f 0a02 	mov.w	sl, #2
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	e743      	b.n	800be0e <atan+0xce>
 800bf86:	462b      	mov	r3, r5
 800bf88:	ee10 2a10 	vmov	r2, s0
 800bf8c:	4939      	ldr	r1, [pc, #228]	; (800c074 <atan+0x334>)
 800bf8e:	2000      	movs	r0, #0
 800bf90:	f7f4 fc5c 	bl	800084c <__aeabi_ddiv>
 800bf94:	f04f 0a03 	mov.w	sl, #3
 800bf98:	4604      	mov	r4, r0
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	e737      	b.n	800be0e <atan+0xce>
 800bf9e:	4b36      	ldr	r3, [pc, #216]	; (800c078 <atan+0x338>)
 800bfa0:	4e36      	ldr	r6, [pc, #216]	; (800c07c <atan+0x33c>)
 800bfa2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 f96d 	bl	8000288 <__aeabi_dsub>
 800bfae:	4622      	mov	r2, r4
 800bfb0:	462b      	mov	r3, r5
 800bfb2:	f7f4 f969 	bl	8000288 <__aeabi_dsub>
 800bfb6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bfc2:	f7f4 f961 	bl	8000288 <__aeabi_dsub>
 800bfc6:	f1bb 0f00 	cmp.w	fp, #0
 800bfca:	4604      	mov	r4, r0
 800bfcc:	460d      	mov	r5, r1
 800bfce:	f6bf aed6 	bge.w	800bd7e <atan+0x3e>
 800bfd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd6:	461d      	mov	r5, r3
 800bfd8:	e6d1      	b.n	800bd7e <atan+0x3e>
 800bfda:	a51d      	add	r5, pc, #116	; (adr r5, 800c050 <atan+0x310>)
 800bfdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfe0:	e6cd      	b.n	800bd7e <atan+0x3e>
 800bfe2:	bf00      	nop
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	54442d18 	.word	0x54442d18
 800bfec:	bff921fb 	.word	0xbff921fb
 800bff0:	8800759c 	.word	0x8800759c
 800bff4:	7e37e43c 	.word	0x7e37e43c
 800bff8:	e322da11 	.word	0xe322da11
 800bffc:	3f90ad3a 	.word	0x3f90ad3a
 800c000:	24760deb 	.word	0x24760deb
 800c004:	3fa97b4b 	.word	0x3fa97b4b
 800c008:	a0d03d51 	.word	0xa0d03d51
 800c00c:	3fb10d66 	.word	0x3fb10d66
 800c010:	c54c206e 	.word	0xc54c206e
 800c014:	3fb745cd 	.word	0x3fb745cd
 800c018:	920083ff 	.word	0x920083ff
 800c01c:	3fc24924 	.word	0x3fc24924
 800c020:	5555550d 	.word	0x5555550d
 800c024:	3fd55555 	.word	0x3fd55555
 800c028:	2c6a6c2f 	.word	0x2c6a6c2f
 800c02c:	bfa2b444 	.word	0xbfa2b444
 800c030:	52defd9a 	.word	0x52defd9a
 800c034:	3fadde2d 	.word	0x3fadde2d
 800c038:	af749a6d 	.word	0xaf749a6d
 800c03c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c040:	fe231671 	.word	0xfe231671
 800c044:	3fbc71c6 	.word	0x3fbc71c6
 800c048:	9998ebc4 	.word	0x9998ebc4
 800c04c:	3fc99999 	.word	0x3fc99999
 800c050:	54442d18 	.word	0x54442d18
 800c054:	3ff921fb 	.word	0x3ff921fb
 800c058:	440fffff 	.word	0x440fffff
 800c05c:	7ff00000 	.word	0x7ff00000
 800c060:	3fdbffff 	.word	0x3fdbffff
 800c064:	3ff00000 	.word	0x3ff00000
 800c068:	3ff2ffff 	.word	0x3ff2ffff
 800c06c:	40038000 	.word	0x40038000
 800c070:	3ff80000 	.word	0x3ff80000
 800c074:	bff00000 	.word	0xbff00000
 800c078:	0800e090 	.word	0x0800e090
 800c07c:	0800e070 	.word	0x0800e070

0800c080 <cos>:
 800c080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c082:	ec53 2b10 	vmov	r2, r3, d0
 800c086:	4826      	ldr	r0, [pc, #152]	; (800c120 <cos+0xa0>)
 800c088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c08c:	4281      	cmp	r1, r0
 800c08e:	dc06      	bgt.n	800c09e <cos+0x1e>
 800c090:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c118 <cos+0x98>
 800c094:	b005      	add	sp, #20
 800c096:	f85d eb04 	ldr.w	lr, [sp], #4
 800c09a:	f000 b9b9 	b.w	800c410 <__kernel_cos>
 800c09e:	4821      	ldr	r0, [pc, #132]	; (800c124 <cos+0xa4>)
 800c0a0:	4281      	cmp	r1, r0
 800c0a2:	dd09      	ble.n	800c0b8 <cos+0x38>
 800c0a4:	ee10 0a10 	vmov	r0, s0
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7f4 f8ed 	bl	8000288 <__aeabi_dsub>
 800c0ae:	ec41 0b10 	vmov	d0, r0, r1
 800c0b2:	b005      	add	sp, #20
 800c0b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0b8:	4668      	mov	r0, sp
 800c0ba:	f000 ff51 	bl	800cf60 <__ieee754_rem_pio2>
 800c0be:	f000 0003 	and.w	r0, r0, #3
 800c0c2:	2801      	cmp	r0, #1
 800c0c4:	d00b      	beq.n	800c0de <cos+0x5e>
 800c0c6:	2802      	cmp	r0, #2
 800c0c8:	d016      	beq.n	800c0f8 <cos+0x78>
 800c0ca:	b9e0      	cbnz	r0, 800c106 <cos+0x86>
 800c0cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0d0:	ed9d 0b00 	vldr	d0, [sp]
 800c0d4:	f000 f99c 	bl	800c410 <__kernel_cos>
 800c0d8:	ec51 0b10 	vmov	r0, r1, d0
 800c0dc:	e7e7      	b.n	800c0ae <cos+0x2e>
 800c0de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0e2:	ed9d 0b00 	vldr	d0, [sp]
 800c0e6:	f000 fa5b 	bl	800c5a0 <__kernel_sin>
 800c0ea:	ec53 2b10 	vmov	r2, r3, d0
 800c0ee:	ee10 0a10 	vmov	r0, s0
 800c0f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c0f6:	e7da      	b.n	800c0ae <cos+0x2e>
 800c0f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0fc:	ed9d 0b00 	vldr	d0, [sp]
 800c100:	f000 f986 	bl	800c410 <__kernel_cos>
 800c104:	e7f1      	b.n	800c0ea <cos+0x6a>
 800c106:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c10a:	ed9d 0b00 	vldr	d0, [sp]
 800c10e:	2001      	movs	r0, #1
 800c110:	f000 fa46 	bl	800c5a0 <__kernel_sin>
 800c114:	e7e0      	b.n	800c0d8 <cos+0x58>
 800c116:	bf00      	nop
	...
 800c120:	3fe921fb 	.word	0x3fe921fb
 800c124:	7fefffff 	.word	0x7fefffff

0800c128 <fabs>:
 800c128:	ec51 0b10 	vmov	r0, r1, d0
 800c12c:	ee10 2a10 	vmov	r2, s0
 800c130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c134:	ec43 2b10 	vmov	d0, r2, r3
 800c138:	4770      	bx	lr
 800c13a:	0000      	movs	r0, r0
 800c13c:	0000      	movs	r0, r0
	...

0800c140 <sin>:
 800c140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c142:	ec53 2b10 	vmov	r2, r3, d0
 800c146:	4828      	ldr	r0, [pc, #160]	; (800c1e8 <sin+0xa8>)
 800c148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c14c:	4281      	cmp	r1, r0
 800c14e:	dc07      	bgt.n	800c160 <sin+0x20>
 800c150:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c1e0 <sin+0xa0>
 800c154:	2000      	movs	r0, #0
 800c156:	b005      	add	sp, #20
 800c158:	f85d eb04 	ldr.w	lr, [sp], #4
 800c15c:	f000 ba20 	b.w	800c5a0 <__kernel_sin>
 800c160:	4822      	ldr	r0, [pc, #136]	; (800c1ec <sin+0xac>)
 800c162:	4281      	cmp	r1, r0
 800c164:	dd09      	ble.n	800c17a <sin+0x3a>
 800c166:	ee10 0a10 	vmov	r0, s0
 800c16a:	4619      	mov	r1, r3
 800c16c:	f7f4 f88c 	bl	8000288 <__aeabi_dsub>
 800c170:	ec41 0b10 	vmov	d0, r0, r1
 800c174:	b005      	add	sp, #20
 800c176:	f85d fb04 	ldr.w	pc, [sp], #4
 800c17a:	4668      	mov	r0, sp
 800c17c:	f000 fef0 	bl	800cf60 <__ieee754_rem_pio2>
 800c180:	f000 0003 	and.w	r0, r0, #3
 800c184:	2801      	cmp	r0, #1
 800c186:	d00c      	beq.n	800c1a2 <sin+0x62>
 800c188:	2802      	cmp	r0, #2
 800c18a:	d011      	beq.n	800c1b0 <sin+0x70>
 800c18c:	b9f0      	cbnz	r0, 800c1cc <sin+0x8c>
 800c18e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c192:	ed9d 0b00 	vldr	d0, [sp]
 800c196:	2001      	movs	r0, #1
 800c198:	f000 fa02 	bl	800c5a0 <__kernel_sin>
 800c19c:	ec51 0b10 	vmov	r0, r1, d0
 800c1a0:	e7e6      	b.n	800c170 <sin+0x30>
 800c1a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1a6:	ed9d 0b00 	vldr	d0, [sp]
 800c1aa:	f000 f931 	bl	800c410 <__kernel_cos>
 800c1ae:	e7f5      	b.n	800c19c <sin+0x5c>
 800c1b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1b4:	ed9d 0b00 	vldr	d0, [sp]
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	f000 f9f1 	bl	800c5a0 <__kernel_sin>
 800c1be:	ec53 2b10 	vmov	r2, r3, d0
 800c1c2:	ee10 0a10 	vmov	r0, s0
 800c1c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1ca:	e7d1      	b.n	800c170 <sin+0x30>
 800c1cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1d0:	ed9d 0b00 	vldr	d0, [sp]
 800c1d4:	f000 f91c 	bl	800c410 <__kernel_cos>
 800c1d8:	e7f1      	b.n	800c1be <sin+0x7e>
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w
	...
 800c1e8:	3fe921fb 	.word	0x3fe921fb
 800c1ec:	7fefffff 	.word	0x7fefffff

0800c1f0 <tan>:
 800c1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1f2:	ec53 2b10 	vmov	r2, r3, d0
 800c1f6:	4816      	ldr	r0, [pc, #88]	; (800c250 <tan+0x60>)
 800c1f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1fc:	4281      	cmp	r1, r0
 800c1fe:	dc07      	bgt.n	800c210 <tan+0x20>
 800c200:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800c248 <tan+0x58>
 800c204:	2001      	movs	r0, #1
 800c206:	b005      	add	sp, #20
 800c208:	f85d eb04 	ldr.w	lr, [sp], #4
 800c20c:	f000 ba88 	b.w	800c720 <__kernel_tan>
 800c210:	4810      	ldr	r0, [pc, #64]	; (800c254 <tan+0x64>)
 800c212:	4281      	cmp	r1, r0
 800c214:	dd09      	ble.n	800c22a <tan+0x3a>
 800c216:	ee10 0a10 	vmov	r0, s0
 800c21a:	4619      	mov	r1, r3
 800c21c:	f7f4 f834 	bl	8000288 <__aeabi_dsub>
 800c220:	ec41 0b10 	vmov	d0, r0, r1
 800c224:	b005      	add	sp, #20
 800c226:	f85d fb04 	ldr.w	pc, [sp], #4
 800c22a:	4668      	mov	r0, sp
 800c22c:	f000 fe98 	bl	800cf60 <__ieee754_rem_pio2>
 800c230:	0040      	lsls	r0, r0, #1
 800c232:	f000 0002 	and.w	r0, r0, #2
 800c236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c23a:	ed9d 0b00 	vldr	d0, [sp]
 800c23e:	f1c0 0001 	rsb	r0, r0, #1
 800c242:	f000 fa6d 	bl	800c720 <__kernel_tan>
 800c246:	e7ed      	b.n	800c224 <tan+0x34>
	...
 800c250:	3fe921fb 	.word	0x3fe921fb
 800c254:	7fefffff 	.word	0x7fefffff

0800c258 <__ieee754_sqrt>:
 800c258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	ec55 4b10 	vmov	r4, r5, d0
 800c260:	4e67      	ldr	r6, [pc, #412]	; (800c400 <__ieee754_sqrt+0x1a8>)
 800c262:	43ae      	bics	r6, r5
 800c264:	ee10 0a10 	vmov	r0, s0
 800c268:	ee10 2a10 	vmov	r2, s0
 800c26c:	4629      	mov	r1, r5
 800c26e:	462b      	mov	r3, r5
 800c270:	d10d      	bne.n	800c28e <__ieee754_sqrt+0x36>
 800c272:	f7f4 f9c1 	bl	80005f8 <__aeabi_dmul>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4620      	mov	r0, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	f7f4 f805 	bl	800028c <__adddf3>
 800c282:	4604      	mov	r4, r0
 800c284:	460d      	mov	r5, r1
 800c286:	ec45 4b10 	vmov	d0, r4, r5
 800c28a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	2d00      	cmp	r5, #0
 800c290:	dc0b      	bgt.n	800c2aa <__ieee754_sqrt+0x52>
 800c292:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c296:	4326      	orrs	r6, r4
 800c298:	d0f5      	beq.n	800c286 <__ieee754_sqrt+0x2e>
 800c29a:	b135      	cbz	r5, 800c2aa <__ieee754_sqrt+0x52>
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	f7f4 fad2 	bl	800084c <__aeabi_ddiv>
 800c2a8:	e7eb      	b.n	800c282 <__ieee754_sqrt+0x2a>
 800c2aa:	1509      	asrs	r1, r1, #20
 800c2ac:	f000 808d 	beq.w	800c3ca <__ieee754_sqrt+0x172>
 800c2b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c2b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2bc:	07c9      	lsls	r1, r1, #31
 800c2be:	bf5c      	itt	pl
 800c2c0:	005b      	lslpl	r3, r3, #1
 800c2c2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c2c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2ca:	bf58      	it	pl
 800c2cc:	0052      	lslpl	r2, r2, #1
 800c2ce:	2500      	movs	r5, #0
 800c2d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c2d4:	1076      	asrs	r6, r6, #1
 800c2d6:	0052      	lsls	r2, r2, #1
 800c2d8:	f04f 0e16 	mov.w	lr, #22
 800c2dc:	46ac      	mov	ip, r5
 800c2de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2e2:	eb0c 0001 	add.w	r0, ip, r1
 800c2e6:	4298      	cmp	r0, r3
 800c2e8:	bfde      	ittt	le
 800c2ea:	1a1b      	suble	r3, r3, r0
 800c2ec:	eb00 0c01 	addle.w	ip, r0, r1
 800c2f0:	186d      	addle	r5, r5, r1
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	f1be 0e01 	subs.w	lr, lr, #1
 800c2f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c2fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c300:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c304:	d1ed      	bne.n	800c2e2 <__ieee754_sqrt+0x8a>
 800c306:	4674      	mov	r4, lr
 800c308:	2720      	movs	r7, #32
 800c30a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c30e:	4563      	cmp	r3, ip
 800c310:	eb01 000e 	add.w	r0, r1, lr
 800c314:	dc02      	bgt.n	800c31c <__ieee754_sqrt+0xc4>
 800c316:	d113      	bne.n	800c340 <__ieee754_sqrt+0xe8>
 800c318:	4290      	cmp	r0, r2
 800c31a:	d811      	bhi.n	800c340 <__ieee754_sqrt+0xe8>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	eb00 0e01 	add.w	lr, r0, r1
 800c322:	da57      	bge.n	800c3d4 <__ieee754_sqrt+0x17c>
 800c324:	f1be 0f00 	cmp.w	lr, #0
 800c328:	db54      	blt.n	800c3d4 <__ieee754_sqrt+0x17c>
 800c32a:	f10c 0801 	add.w	r8, ip, #1
 800c32e:	eba3 030c 	sub.w	r3, r3, ip
 800c332:	4290      	cmp	r0, r2
 800c334:	bf88      	it	hi
 800c336:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c33a:	1a12      	subs	r2, r2, r0
 800c33c:	440c      	add	r4, r1
 800c33e:	46c4      	mov	ip, r8
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	3f01      	subs	r7, #1
 800c344:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c348:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c34c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c350:	d1dd      	bne.n	800c30e <__ieee754_sqrt+0xb6>
 800c352:	4313      	orrs	r3, r2
 800c354:	d01b      	beq.n	800c38e <__ieee754_sqrt+0x136>
 800c356:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c404 <__ieee754_sqrt+0x1ac>
 800c35a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c408 <__ieee754_sqrt+0x1b0>
 800c35e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c362:	e9db 2300 	ldrd	r2, r3, [fp]
 800c366:	f7f3 ff8f 	bl	8000288 <__aeabi_dsub>
 800c36a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 fbbb 	bl	8000af0 <__aeabi_dcmple>
 800c37a:	b140      	cbz	r0, 800c38e <__ieee754_sqrt+0x136>
 800c37c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c380:	e9da 0100 	ldrd	r0, r1, [sl]
 800c384:	e9db 2300 	ldrd	r2, r3, [fp]
 800c388:	d126      	bne.n	800c3d8 <__ieee754_sqrt+0x180>
 800c38a:	3501      	adds	r5, #1
 800c38c:	463c      	mov	r4, r7
 800c38e:	106a      	asrs	r2, r5, #1
 800c390:	0863      	lsrs	r3, r4, #1
 800c392:	07e9      	lsls	r1, r5, #31
 800c394:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c398:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c39c:	bf48      	it	mi
 800c39e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c3a2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c3a6:	461c      	mov	r4, r3
 800c3a8:	e76d      	b.n	800c286 <__ieee754_sqrt+0x2e>
 800c3aa:	0ad3      	lsrs	r3, r2, #11
 800c3ac:	3815      	subs	r0, #21
 800c3ae:	0552      	lsls	r2, r2, #21
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0fa      	beq.n	800c3aa <__ieee754_sqrt+0x152>
 800c3b4:	02dc      	lsls	r4, r3, #11
 800c3b6:	d50a      	bpl.n	800c3ce <__ieee754_sqrt+0x176>
 800c3b8:	f1c1 0420 	rsb	r4, r1, #32
 800c3bc:	fa22 f404 	lsr.w	r4, r2, r4
 800c3c0:	1e4d      	subs	r5, r1, #1
 800c3c2:	408a      	lsls	r2, r1
 800c3c4:	4323      	orrs	r3, r4
 800c3c6:	1b41      	subs	r1, r0, r5
 800c3c8:	e772      	b.n	800c2b0 <__ieee754_sqrt+0x58>
 800c3ca:	4608      	mov	r0, r1
 800c3cc:	e7f0      	b.n	800c3b0 <__ieee754_sqrt+0x158>
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	e7ef      	b.n	800c3b4 <__ieee754_sqrt+0x15c>
 800c3d4:	46e0      	mov	r8, ip
 800c3d6:	e7aa      	b.n	800c32e <__ieee754_sqrt+0xd6>
 800c3d8:	f7f3 ff58 	bl	800028c <__adddf3>
 800c3dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	f7f4 fb78 	bl	8000adc <__aeabi_dcmplt>
 800c3ec:	b120      	cbz	r0, 800c3f8 <__ieee754_sqrt+0x1a0>
 800c3ee:	1ca0      	adds	r0, r4, #2
 800c3f0:	bf08      	it	eq
 800c3f2:	3501      	addeq	r5, #1
 800c3f4:	3402      	adds	r4, #2
 800c3f6:	e7ca      	b.n	800c38e <__ieee754_sqrt+0x136>
 800c3f8:	3401      	adds	r4, #1
 800c3fa:	f024 0401 	bic.w	r4, r4, #1
 800c3fe:	e7c6      	b.n	800c38e <__ieee754_sqrt+0x136>
 800c400:	7ff00000 	.word	0x7ff00000
 800c404:	20000208 	.word	0x20000208
 800c408:	20000210 	.word	0x20000210
 800c40c:	00000000 	.word	0x00000000

0800c410 <__kernel_cos>:
 800c410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	ec57 6b10 	vmov	r6, r7, d0
 800c418:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c41c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c420:	ed8d 1b00 	vstr	d1, [sp]
 800c424:	da07      	bge.n	800c436 <__kernel_cos+0x26>
 800c426:	ee10 0a10 	vmov	r0, s0
 800c42a:	4639      	mov	r1, r7
 800c42c:	f7f4 fb94 	bl	8000b58 <__aeabi_d2iz>
 800c430:	2800      	cmp	r0, #0
 800c432:	f000 8088 	beq.w	800c546 <__kernel_cos+0x136>
 800c436:	4632      	mov	r2, r6
 800c438:	463b      	mov	r3, r7
 800c43a:	4630      	mov	r0, r6
 800c43c:	4639      	mov	r1, r7
 800c43e:	f7f4 f8db 	bl	80005f8 <__aeabi_dmul>
 800c442:	4b51      	ldr	r3, [pc, #324]	; (800c588 <__kernel_cos+0x178>)
 800c444:	2200      	movs	r2, #0
 800c446:	4604      	mov	r4, r0
 800c448:	460d      	mov	r5, r1
 800c44a:	f7f4 f8d5 	bl	80005f8 <__aeabi_dmul>
 800c44e:	a340      	add	r3, pc, #256	; (adr r3, 800c550 <__kernel_cos+0x140>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	4682      	mov	sl, r0
 800c456:	468b      	mov	fp, r1
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f4 f8cc 	bl	80005f8 <__aeabi_dmul>
 800c460:	a33d      	add	r3, pc, #244	; (adr r3, 800c558 <__kernel_cos+0x148>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	f7f3 ff11 	bl	800028c <__adddf3>
 800c46a:	4622      	mov	r2, r4
 800c46c:	462b      	mov	r3, r5
 800c46e:	f7f4 f8c3 	bl	80005f8 <__aeabi_dmul>
 800c472:	a33b      	add	r3, pc, #236	; (adr r3, 800c560 <__kernel_cos+0x150>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f3 ff06 	bl	8000288 <__aeabi_dsub>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f8ba 	bl	80005f8 <__aeabi_dmul>
 800c484:	a338      	add	r3, pc, #224	; (adr r3, 800c568 <__kernel_cos+0x158>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f3 feff 	bl	800028c <__adddf3>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f4 f8b1 	bl	80005f8 <__aeabi_dmul>
 800c496:	a336      	add	r3, pc, #216	; (adr r3, 800c570 <__kernel_cos+0x160>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f3 fef4 	bl	8000288 <__aeabi_dsub>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f7f4 f8a8 	bl	80005f8 <__aeabi_dmul>
 800c4a8:	a333      	add	r3, pc, #204	; (adr r3, 800c578 <__kernel_cos+0x168>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	f7f3 feed 	bl	800028c <__adddf3>
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	f7f4 f89f 	bl	80005f8 <__aeabi_dmul>
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	462b      	mov	r3, r5
 800c4be:	f7f4 f89b 	bl	80005f8 <__aeabi_dmul>
 800c4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 f893 	bl	80005f8 <__aeabi_dmul>
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f7f3 fed5 	bl	8000288 <__aeabi_dsub>
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <__kernel_cos+0x17c>)
 800c4e0:	4598      	cmp	r8, r3
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460f      	mov	r7, r1
 800c4e6:	dc10      	bgt.n	800c50a <__kernel_cos+0xfa>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4650      	mov	r0, sl
 800c4ee:	4659      	mov	r1, fp
 800c4f0:	f7f3 feca 	bl	8000288 <__aeabi_dsub>
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4926      	ldr	r1, [pc, #152]	; (800c590 <__kernel_cos+0x180>)
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	f7f3 fec4 	bl	8000288 <__aeabi_dsub>
 800c500:	ec41 0b10 	vmov	d0, r0, r1
 800c504:	b003      	add	sp, #12
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	4b22      	ldr	r3, [pc, #136]	; (800c594 <__kernel_cos+0x184>)
 800c50c:	4920      	ldr	r1, [pc, #128]	; (800c590 <__kernel_cos+0x180>)
 800c50e:	4598      	cmp	r8, r3
 800c510:	bfcc      	ite	gt
 800c512:	4d21      	ldrgt	r5, [pc, #132]	; (800c598 <__kernel_cos+0x188>)
 800c514:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c518:	2400      	movs	r4, #0
 800c51a:	4622      	mov	r2, r4
 800c51c:	462b      	mov	r3, r5
 800c51e:	2000      	movs	r0, #0
 800c520:	f7f3 feb2 	bl	8000288 <__aeabi_dsub>
 800c524:	4622      	mov	r2, r4
 800c526:	4680      	mov	r8, r0
 800c528:	4689      	mov	r9, r1
 800c52a:	462b      	mov	r3, r5
 800c52c:	4650      	mov	r0, sl
 800c52e:	4659      	mov	r1, fp
 800c530:	f7f3 feaa 	bl	8000288 <__aeabi_dsub>
 800c534:	4632      	mov	r2, r6
 800c536:	463b      	mov	r3, r7
 800c538:	f7f3 fea6 	bl	8000288 <__aeabi_dsub>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	4640      	mov	r0, r8
 800c542:	4649      	mov	r1, r9
 800c544:	e7da      	b.n	800c4fc <__kernel_cos+0xec>
 800c546:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c580 <__kernel_cos+0x170>
 800c54a:	e7db      	b.n	800c504 <__kernel_cos+0xf4>
 800c54c:	f3af 8000 	nop.w
 800c550:	be8838d4 	.word	0xbe8838d4
 800c554:	bda8fae9 	.word	0xbda8fae9
 800c558:	bdb4b1c4 	.word	0xbdb4b1c4
 800c55c:	3e21ee9e 	.word	0x3e21ee9e
 800c560:	809c52ad 	.word	0x809c52ad
 800c564:	3e927e4f 	.word	0x3e927e4f
 800c568:	19cb1590 	.word	0x19cb1590
 800c56c:	3efa01a0 	.word	0x3efa01a0
 800c570:	16c15177 	.word	0x16c15177
 800c574:	3f56c16c 	.word	0x3f56c16c
 800c578:	5555554c 	.word	0x5555554c
 800c57c:	3fa55555 	.word	0x3fa55555
 800c580:	00000000 	.word	0x00000000
 800c584:	3ff00000 	.word	0x3ff00000
 800c588:	3fe00000 	.word	0x3fe00000
 800c58c:	3fd33332 	.word	0x3fd33332
 800c590:	3ff00000 	.word	0x3ff00000
 800c594:	3fe90000 	.word	0x3fe90000
 800c598:	3fd20000 	.word	0x3fd20000
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <__kernel_sin>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ed2d 8b04 	vpush	{d8-d9}
 800c5a8:	eeb0 8a41 	vmov.f32	s16, s2
 800c5ac:	eef0 8a61 	vmov.f32	s17, s3
 800c5b0:	ec55 4b10 	vmov	r4, r5, d0
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c5ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c5be:	9001      	str	r0, [sp, #4]
 800c5c0:	da06      	bge.n	800c5d0 <__kernel_sin+0x30>
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f7f4 fac6 	bl	8000b58 <__aeabi_d2iz>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d051      	beq.n	800c674 <__kernel_sin+0xd4>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f4 f80e 	bl	80005f8 <__aeabi_dmul>
 800c5dc:	4682      	mov	sl, r0
 800c5de:	468b      	mov	fp, r1
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	a341      	add	r3, pc, #260	; (adr r3, 800c6f4 <__kernel_sin+0x154>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	4689      	mov	r9, r1
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	4659      	mov	r1, fp
 800c5fa:	f7f3 fffd 	bl	80005f8 <__aeabi_dmul>
 800c5fe:	a33f      	add	r3, pc, #252	; (adr r3, 800c6fc <__kernel_sin+0x15c>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f7f3 fe40 	bl	8000288 <__aeabi_dsub>
 800c608:	4652      	mov	r2, sl
 800c60a:	465b      	mov	r3, fp
 800c60c:	f7f3 fff4 	bl	80005f8 <__aeabi_dmul>
 800c610:	a33c      	add	r3, pc, #240	; (adr r3, 800c704 <__kernel_sin+0x164>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe39 	bl	800028c <__adddf3>
 800c61a:	4652      	mov	r2, sl
 800c61c:	465b      	mov	r3, fp
 800c61e:	f7f3 ffeb 	bl	80005f8 <__aeabi_dmul>
 800c622:	a33a      	add	r3, pc, #232	; (adr r3, 800c70c <__kernel_sin+0x16c>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 fe2e 	bl	8000288 <__aeabi_dsub>
 800c62c:	4652      	mov	r2, sl
 800c62e:	465b      	mov	r3, fp
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	a337      	add	r3, pc, #220	; (adr r3, 800c714 <__kernel_sin+0x174>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe27 	bl	800028c <__adddf3>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	b9eb      	cbnz	r3, 800c682 <__kernel_sin+0xe2>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	f7f3 ffd3 	bl	80005f8 <__aeabi_dmul>
 800c652:	a325      	add	r3, pc, #148	; (adr r3, 800c6e8 <__kernel_sin+0x148>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 fe16 	bl	8000288 <__aeabi_dsub>
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	f7f3 ffca 	bl	80005f8 <__aeabi_dmul>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fe0e 	bl	800028c <__adddf3>
 800c670:	4604      	mov	r4, r0
 800c672:	460d      	mov	r5, r1
 800c674:	ec45 4b10 	vmov	d0, r4, r5
 800c678:	b003      	add	sp, #12
 800c67a:	ecbd 8b04 	vpop	{d8-d9}
 800c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c682:	4b1b      	ldr	r3, [pc, #108]	; (800c6f0 <__kernel_sin+0x150>)
 800c684:	ec51 0b18 	vmov	r0, r1, d8
 800c688:	2200      	movs	r2, #0
 800c68a:	f7f3 ffb5 	bl	80005f8 <__aeabi_dmul>
 800c68e:	4632      	mov	r2, r6
 800c690:	ec41 0b19 	vmov	d9, r0, r1
 800c694:	463b      	mov	r3, r7
 800c696:	4640      	mov	r0, r8
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f3 ffad 	bl	80005f8 <__aeabi_dmul>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	ec51 0b19 	vmov	r0, r1, d9
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	465b      	mov	r3, fp
 800c6ae:	f7f3 ffa3 	bl	80005f8 <__aeabi_dmul>
 800c6b2:	ec53 2b18 	vmov	r2, r3, d8
 800c6b6:	f7f3 fde7 	bl	8000288 <__aeabi_dsub>
 800c6ba:	a30b      	add	r3, pc, #44	; (adr r3, 800c6e8 <__kernel_sin+0x148>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	4649      	mov	r1, r9
 800c6c8:	f7f3 ff96 	bl	80005f8 <__aeabi_dmul>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f3 fdda 	bl	800028c <__adddf3>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fdd2 	bl	8000288 <__aeabi_dsub>
 800c6e4:	e7c4      	b.n	800c670 <__kernel_sin+0xd0>
 800c6e6:	bf00      	nop
 800c6e8:	55555549 	.word	0x55555549
 800c6ec:	3fc55555 	.word	0x3fc55555
 800c6f0:	3fe00000 	.word	0x3fe00000
 800c6f4:	5acfd57c 	.word	0x5acfd57c
 800c6f8:	3de5d93a 	.word	0x3de5d93a
 800c6fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c700:	3e5ae5e6 	.word	0x3e5ae5e6
 800c704:	57b1fe7d 	.word	0x57b1fe7d
 800c708:	3ec71de3 	.word	0x3ec71de3
 800c70c:	19c161d5 	.word	0x19c161d5
 800c710:	3f2a01a0 	.word	0x3f2a01a0
 800c714:	1110f8a6 	.word	0x1110f8a6
 800c718:	3f811111 	.word	0x3f811111
 800c71c:	00000000 	.word	0x00000000

0800c720 <__kernel_tan>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	ed2d 8b06 	vpush	{d8-d10}
 800c728:	ec5b ab10 	vmov	sl, fp, d0
 800c72c:	4be0      	ldr	r3, [pc, #896]	; (800cab0 <__kernel_tan+0x390>)
 800c72e:	b083      	sub	sp, #12
 800c730:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c734:	429f      	cmp	r7, r3
 800c736:	ec59 8b11 	vmov	r8, r9, d1
 800c73a:	4606      	mov	r6, r0
 800c73c:	f8cd b000 	str.w	fp, [sp]
 800c740:	dc61      	bgt.n	800c806 <__kernel_tan+0xe6>
 800c742:	ee10 0a10 	vmov	r0, s0
 800c746:	4659      	mov	r1, fp
 800c748:	f7f4 fa06 	bl	8000b58 <__aeabi_d2iz>
 800c74c:	4605      	mov	r5, r0
 800c74e:	2800      	cmp	r0, #0
 800c750:	f040 8083 	bne.w	800c85a <__kernel_tan+0x13a>
 800c754:	1c73      	adds	r3, r6, #1
 800c756:	4652      	mov	r2, sl
 800c758:	4313      	orrs	r3, r2
 800c75a:	433b      	orrs	r3, r7
 800c75c:	d112      	bne.n	800c784 <__kernel_tan+0x64>
 800c75e:	ec4b ab10 	vmov	d0, sl, fp
 800c762:	f7ff fce1 	bl	800c128 <fabs>
 800c766:	49d3      	ldr	r1, [pc, #844]	; (800cab4 <__kernel_tan+0x394>)
 800c768:	ec53 2b10 	vmov	r2, r3, d0
 800c76c:	2000      	movs	r0, #0
 800c76e:	f7f4 f86d 	bl	800084c <__aeabi_ddiv>
 800c772:	4682      	mov	sl, r0
 800c774:	468b      	mov	fp, r1
 800c776:	ec4b ab10 	vmov	d0, sl, fp
 800c77a:	b003      	add	sp, #12
 800c77c:	ecbd 8b06 	vpop	{d8-d10}
 800c780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c784:	2e01      	cmp	r6, #1
 800c786:	d0f6      	beq.n	800c776 <__kernel_tan+0x56>
 800c788:	4642      	mov	r2, r8
 800c78a:	464b      	mov	r3, r9
 800c78c:	4650      	mov	r0, sl
 800c78e:	4659      	mov	r1, fp
 800c790:	f7f3 fd7c 	bl	800028c <__adddf3>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	460f      	mov	r7, r1
 800c79a:	2000      	movs	r0, #0
 800c79c:	49c6      	ldr	r1, [pc, #792]	; (800cab8 <__kernel_tan+0x398>)
 800c79e:	f7f4 f855 	bl	800084c <__aeabi_ddiv>
 800c7a2:	e9cd 0100 	strd	r0, r1, [sp]
 800c7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7aa:	462e      	mov	r6, r5
 800c7ac:	4652      	mov	r2, sl
 800c7ae:	462c      	mov	r4, r5
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	461d      	mov	r5, r3
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	f7f3 fd66 	bl	8000288 <__aeabi_dsub>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	f7f3 fd60 	bl	8000288 <__aeabi_dsub>
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	462b      	mov	r3, r5
 800c7cc:	f7f3 ff14 	bl	80005f8 <__aeabi_dmul>
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	462b      	mov	r3, r5
 800c7d8:	4630      	mov	r0, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f3 ff0c 	bl	80005f8 <__aeabi_dmul>
 800c7e0:	4bb4      	ldr	r3, [pc, #720]	; (800cab4 <__kernel_tan+0x394>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f7f3 fd52 	bl	800028c <__adddf3>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f7f3 fd4c 	bl	800028c <__adddf3>
 800c7f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	462b      	mov	r3, r5
 800c800:	f7f3 fd44 	bl	800028c <__adddf3>
 800c804:	e7b5      	b.n	800c772 <__kernel_tan+0x52>
 800c806:	4bad      	ldr	r3, [pc, #692]	; (800cabc <__kernel_tan+0x39c>)
 800c808:	429f      	cmp	r7, r3
 800c80a:	dd26      	ble.n	800c85a <__kernel_tan+0x13a>
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	da09      	bge.n	800c826 <__kernel_tan+0x106>
 800c812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c816:	469b      	mov	fp, r3
 800c818:	ee10 aa10 	vmov	sl, s0
 800c81c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c820:	ee11 8a10 	vmov	r8, s2
 800c824:	4699      	mov	r9, r3
 800c826:	4652      	mov	r2, sl
 800c828:	465b      	mov	r3, fp
 800c82a:	a183      	add	r1, pc, #524	; (adr r1, 800ca38 <__kernel_tan+0x318>)
 800c82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c830:	f7f3 fd2a 	bl	8000288 <__aeabi_dsub>
 800c834:	4642      	mov	r2, r8
 800c836:	464b      	mov	r3, r9
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	a180      	add	r1, pc, #512	; (adr r1, 800ca40 <__kernel_tan+0x320>)
 800c83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c842:	f7f3 fd21 	bl	8000288 <__aeabi_dsub>
 800c846:	4622      	mov	r2, r4
 800c848:	462b      	mov	r3, r5
 800c84a:	f7f3 fd1f 	bl	800028c <__adddf3>
 800c84e:	f04f 0800 	mov.w	r8, #0
 800c852:	4682      	mov	sl, r0
 800c854:	468b      	mov	fp, r1
 800c856:	f04f 0900 	mov.w	r9, #0
 800c85a:	4652      	mov	r2, sl
 800c85c:	465b      	mov	r3, fp
 800c85e:	4650      	mov	r0, sl
 800c860:	4659      	mov	r1, fp
 800c862:	f7f3 fec9 	bl	80005f8 <__aeabi_dmul>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	ec43 2b18 	vmov	d8, r2, r3
 800c86e:	f7f3 fec3 	bl	80005f8 <__aeabi_dmul>
 800c872:	ec53 2b18 	vmov	r2, r3, d8
 800c876:	4604      	mov	r4, r0
 800c878:	460d      	mov	r5, r1
 800c87a:	4650      	mov	r0, sl
 800c87c:	4659      	mov	r1, fp
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	a371      	add	r3, pc, #452	; (adr r3, 800ca48 <__kernel_tan+0x328>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	ec41 0b19 	vmov	d9, r0, r1
 800c88c:	4620      	mov	r0, r4
 800c88e:	4629      	mov	r1, r5
 800c890:	f7f3 feb2 	bl	80005f8 <__aeabi_dmul>
 800c894:	a36e      	add	r3, pc, #440	; (adr r3, 800ca50 <__kernel_tan+0x330>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	462b      	mov	r3, r5
 800c8a2:	f7f3 fea9 	bl	80005f8 <__aeabi_dmul>
 800c8a6:	a36c      	add	r3, pc, #432	; (adr r3, 800ca58 <__kernel_tan+0x338>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fcee 	bl	800028c <__adddf3>
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	f7f3 fea0 	bl	80005f8 <__aeabi_dmul>
 800c8b8:	a369      	add	r3, pc, #420	; (adr r3, 800ca60 <__kernel_tan+0x340>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 fce5 	bl	800028c <__adddf3>
 800c8c2:	4622      	mov	r2, r4
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	f7f3 fe97 	bl	80005f8 <__aeabi_dmul>
 800c8ca:	a367      	add	r3, pc, #412	; (adr r3, 800ca68 <__kernel_tan+0x348>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fcdc 	bl	800028c <__adddf3>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	f7f3 fe8e 	bl	80005f8 <__aeabi_dmul>
 800c8dc:	a364      	add	r3, pc, #400	; (adr r3, 800ca70 <__kernel_tan+0x350>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fcd3 	bl	800028c <__adddf3>
 800c8e6:	ec53 2b18 	vmov	r2, r3, d8
 800c8ea:	f7f3 fe85 	bl	80005f8 <__aeabi_dmul>
 800c8ee:	a362      	add	r3, pc, #392	; (adr r3, 800ca78 <__kernel_tan+0x358>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	ec41 0b1a 	vmov	d10, r0, r1
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	f7f3 fe7c 	bl	80005f8 <__aeabi_dmul>
 800c900:	a35f      	add	r3, pc, #380	; (adr r3, 800ca80 <__kernel_tan+0x360>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fcc1 	bl	800028c <__adddf3>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	a35d      	add	r3, pc, #372	; (adr r3, 800ca88 <__kernel_tan+0x368>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	4622      	mov	r2, r4
 800c91e:	462b      	mov	r3, r5
 800c920:	f7f3 fe6a 	bl	80005f8 <__aeabi_dmul>
 800c924:	a35a      	add	r3, pc, #360	; (adr r3, 800ca90 <__kernel_tan+0x370>)
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 fcaf 	bl	800028c <__adddf3>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	f7f3 fe61 	bl	80005f8 <__aeabi_dmul>
 800c936:	a358      	add	r3, pc, #352	; (adr r3, 800ca98 <__kernel_tan+0x378>)
 800c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93c:	f7f3 fca6 	bl	800028c <__adddf3>
 800c940:	4622      	mov	r2, r4
 800c942:	462b      	mov	r3, r5
 800c944:	f7f3 fe58 	bl	80005f8 <__aeabi_dmul>
 800c948:	a355      	add	r3, pc, #340	; (adr r3, 800caa0 <__kernel_tan+0x380>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f7f3 fc9d 	bl	800028c <__adddf3>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	ec51 0b1a 	vmov	r0, r1, d10
 800c95a:	f7f3 fc97 	bl	800028c <__adddf3>
 800c95e:	ec53 2b19 	vmov	r2, r3, d9
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	4642      	mov	r2, r8
 800c968:	464b      	mov	r3, r9
 800c96a:	f7f3 fc8f 	bl	800028c <__adddf3>
 800c96e:	ec53 2b18 	vmov	r2, r3, d8
 800c972:	f7f3 fe41 	bl	80005f8 <__aeabi_dmul>
 800c976:	4642      	mov	r2, r8
 800c978:	464b      	mov	r3, r9
 800c97a:	f7f3 fc87 	bl	800028c <__adddf3>
 800c97e:	a34a      	add	r3, pc, #296	; (adr r3, 800caa8 <__kernel_tan+0x388>)
 800c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c984:	4604      	mov	r4, r0
 800c986:	460d      	mov	r5, r1
 800c988:	ec51 0b19 	vmov	r0, r1, d9
 800c98c:	f7f3 fe34 	bl	80005f8 <__aeabi_dmul>
 800c990:	4622      	mov	r2, r4
 800c992:	462b      	mov	r3, r5
 800c994:	f7f3 fc7a 	bl	800028c <__adddf3>
 800c998:	460b      	mov	r3, r1
 800c99a:	ec41 0b18 	vmov	d8, r0, r1
 800c99e:	4602      	mov	r2, r0
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	4650      	mov	r0, sl
 800c9a4:	f7f3 fc72 	bl	800028c <__adddf3>
 800c9a8:	4b44      	ldr	r3, [pc, #272]	; (800cabc <__kernel_tan+0x39c>)
 800c9aa:	429f      	cmp	r7, r3
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	f340 8086 	ble.w	800cac0 <__kernel_tan+0x3a0>
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7f3 fdb5 	bl	8000524 <__aeabi_i2d>
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	4680      	mov	r8, r0
 800c9be:	4689      	mov	r9, r1
 800c9c0:	462b      	mov	r3, r5
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f3 fe17 	bl	80005f8 <__aeabi_dmul>
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	f7f3 fc59 	bl	800028c <__adddf3>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 ff33 	bl	800084c <__aeabi_ddiv>
 800c9e6:	ec53 2b18 	vmov	r2, r3, d8
 800c9ea:	f7f3 fc4d 	bl	8000288 <__aeabi_dsub>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	f7f3 fc47 	bl	8000288 <__aeabi_dsub>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	f7f3 fc45 	bl	800028c <__adddf3>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f3 fc3d 	bl	8000288 <__aeabi_dsub>
 800ca0e:	9b00      	ldr	r3, [sp, #0]
 800ca10:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800ca14:	f00a 0a02 	and.w	sl, sl, #2
 800ca18:	4604      	mov	r4, r0
 800ca1a:	f1ca 0001 	rsb	r0, sl, #1
 800ca1e:	460d      	mov	r5, r1
 800ca20:	f7f3 fd80 	bl	8000524 <__aeabi_i2d>
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	4620      	mov	r0, r4
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7f3 fde4 	bl	80005f8 <__aeabi_dmul>
 800ca30:	e69f      	b.n	800c772 <__kernel_tan+0x52>
 800ca32:	bf00      	nop
 800ca34:	f3af 8000 	nop.w
 800ca38:	54442d18 	.word	0x54442d18
 800ca3c:	3fe921fb 	.word	0x3fe921fb
 800ca40:	33145c07 	.word	0x33145c07
 800ca44:	3c81a626 	.word	0x3c81a626
 800ca48:	74bf7ad4 	.word	0x74bf7ad4
 800ca4c:	3efb2a70 	.word	0x3efb2a70
 800ca50:	32f0a7e9 	.word	0x32f0a7e9
 800ca54:	3f12b80f 	.word	0x3f12b80f
 800ca58:	1a8d1068 	.word	0x1a8d1068
 800ca5c:	3f3026f7 	.word	0x3f3026f7
 800ca60:	fee08315 	.word	0xfee08315
 800ca64:	3f57dbc8 	.word	0x3f57dbc8
 800ca68:	e96e8493 	.word	0xe96e8493
 800ca6c:	3f8226e3 	.word	0x3f8226e3
 800ca70:	1bb341fe 	.word	0x1bb341fe
 800ca74:	3faba1ba 	.word	0x3faba1ba
 800ca78:	db605373 	.word	0xdb605373
 800ca7c:	bef375cb 	.word	0xbef375cb
 800ca80:	a03792a6 	.word	0xa03792a6
 800ca84:	3f147e88 	.word	0x3f147e88
 800ca88:	f2f26501 	.word	0xf2f26501
 800ca8c:	3f4344d8 	.word	0x3f4344d8
 800ca90:	c9560328 	.word	0xc9560328
 800ca94:	3f6d6d22 	.word	0x3f6d6d22
 800ca98:	8406d637 	.word	0x8406d637
 800ca9c:	3f9664f4 	.word	0x3f9664f4
 800caa0:	1110fe7a 	.word	0x1110fe7a
 800caa4:	3fc11111 	.word	0x3fc11111
 800caa8:	55555563 	.word	0x55555563
 800caac:	3fd55555 	.word	0x3fd55555
 800cab0:	3e2fffff 	.word	0x3e2fffff
 800cab4:	3ff00000 	.word	0x3ff00000
 800cab8:	bff00000 	.word	0xbff00000
 800cabc:	3fe59427 	.word	0x3fe59427
 800cac0:	2e01      	cmp	r6, #1
 800cac2:	d02f      	beq.n	800cb24 <__kernel_tan+0x404>
 800cac4:	460f      	mov	r7, r1
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	4689      	mov	r9, r1
 800cacc:	2000      	movs	r0, #0
 800cace:	4917      	ldr	r1, [pc, #92]	; (800cb2c <__kernel_tan+0x40c>)
 800cad0:	f7f3 febc 	bl	800084c <__aeabi_ddiv>
 800cad4:	2600      	movs	r6, #0
 800cad6:	e9cd 0100 	strd	r0, r1, [sp]
 800cada:	4652      	mov	r2, sl
 800cadc:	465b      	mov	r3, fp
 800cade:	4630      	mov	r0, r6
 800cae0:	4639      	mov	r1, r7
 800cae2:	f7f3 fbd1 	bl	8000288 <__aeabi_dsub>
 800cae6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	ec51 0b18 	vmov	r0, r1, d8
 800caf2:	f7f3 fbc9 	bl	8000288 <__aeabi_dsub>
 800caf6:	4632      	mov	r2, r6
 800caf8:	462b      	mov	r3, r5
 800cafa:	f7f3 fd7d 	bl	80005f8 <__aeabi_dmul>
 800cafe:	46b0      	mov	r8, r6
 800cb00:	460f      	mov	r7, r1
 800cb02:	4642      	mov	r2, r8
 800cb04:	462b      	mov	r3, r5
 800cb06:	4634      	mov	r4, r6
 800cb08:	4649      	mov	r1, r9
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	f7f3 fd73 	bl	80005f8 <__aeabi_dmul>
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <__kernel_tan+0x410>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	f7f3 fbb9 	bl	800028c <__adddf3>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4630      	mov	r0, r6
 800cb20:	4639      	mov	r1, r7
 800cb22:	e665      	b.n	800c7f0 <__kernel_tan+0xd0>
 800cb24:	4682      	mov	sl, r0
 800cb26:	468b      	mov	fp, r1
 800cb28:	e625      	b.n	800c776 <__kernel_tan+0x56>
 800cb2a:	bf00      	nop
 800cb2c:	bff00000 	.word	0xbff00000
 800cb30:	3ff00000 	.word	0x3ff00000
 800cb34:	00000000 	.word	0x00000000

0800cb38 <__ieee754_asin>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	ed2d 8b04 	vpush	{d8-d9}
 800cb40:	ec55 4b10 	vmov	r4, r5, d0
 800cb44:	4bcc      	ldr	r3, [pc, #816]	; (800ce78 <__ieee754_asin+0x340>)
 800cb46:	b083      	sub	sp, #12
 800cb48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cb4c:	4598      	cmp	r8, r3
 800cb4e:	9501      	str	r5, [sp, #4]
 800cb50:	dd33      	ble.n	800cbba <__ieee754_asin+0x82>
 800cb52:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800cb56:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800cb5a:	ea58 0804 	orrs.w	r8, r8, r4
 800cb5e:	d117      	bne.n	800cb90 <__ieee754_asin+0x58>
 800cb60:	a3ab      	add	r3, pc, #684	; (adr r3, 800ce10 <__ieee754_asin+0x2d8>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	ee10 0a10 	vmov	r0, s0
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	a3a9      	add	r3, pc, #676	; (adr r3, 800ce18 <__ieee754_asin+0x2e0>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	4606      	mov	r6, r0
 800cb78:	460f      	mov	r7, r1
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 fb7f 	bl	800028c <__adddf3>
 800cb8e:	e00b      	b.n	800cba8 <__ieee754_asin+0x70>
 800cb90:	ee10 2a10 	vmov	r2, s0
 800cb94:	462b      	mov	r3, r5
 800cb96:	ee10 0a10 	vmov	r0, s0
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	f7f3 fb74 	bl	8000288 <__aeabi_dsub>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	f7f3 fe52 	bl	800084c <__aeabi_ddiv>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460d      	mov	r5, r1
 800cbac:	ec45 4b10 	vmov	d0, r4, r5
 800cbb0:	b003      	add	sp, #12
 800cbb2:	ecbd 8b04 	vpop	{d8-d9}
 800cbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbba:	4bb0      	ldr	r3, [pc, #704]	; (800ce7c <__ieee754_asin+0x344>)
 800cbbc:	4598      	cmp	r8, r3
 800cbbe:	dc11      	bgt.n	800cbe4 <__ieee754_asin+0xac>
 800cbc0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cbc4:	f280 80ae 	bge.w	800cd24 <__ieee754_asin+0x1ec>
 800cbc8:	a395      	add	r3, pc, #596	; (adr r3, 800ce20 <__ieee754_asin+0x2e8>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	ee10 0a10 	vmov	r0, s0
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fb5a 	bl	800028c <__adddf3>
 800cbd8:	4ba9      	ldr	r3, [pc, #676]	; (800ce80 <__ieee754_asin+0x348>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f7f3 ff9c 	bl	8000b18 <__aeabi_dcmpgt>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1e3      	bne.n	800cbac <__ieee754_asin+0x74>
 800cbe4:	ec45 4b10 	vmov	d0, r4, r5
 800cbe8:	f7ff fa9e 	bl	800c128 <fabs>
 800cbec:	49a4      	ldr	r1, [pc, #656]	; (800ce80 <__ieee754_asin+0x348>)
 800cbee:	ec53 2b10 	vmov	r2, r3, d0
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	f7f3 fb48 	bl	8000288 <__aeabi_dsub>
 800cbf8:	4ba2      	ldr	r3, [pc, #648]	; (800ce84 <__ieee754_asin+0x34c>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f7f3 fcfc 	bl	80005f8 <__aeabi_dmul>
 800cc00:	a389      	add	r3, pc, #548	; (adr r3, 800ce28 <__ieee754_asin+0x2f0>)
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	f7f3 fcf5 	bl	80005f8 <__aeabi_dmul>
 800cc0e:	a388      	add	r3, pc, #544	; (adr r3, 800ce30 <__ieee754_asin+0x2f8>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	f7f3 fb3a 	bl	800028c <__adddf3>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	f7f3 fcec 	bl	80005f8 <__aeabi_dmul>
 800cc20:	a385      	add	r3, pc, #532	; (adr r3, 800ce38 <__ieee754_asin+0x300>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fb2f 	bl	8000288 <__aeabi_dsub>
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	f7f3 fce3 	bl	80005f8 <__aeabi_dmul>
 800cc32:	a383      	add	r3, pc, #524	; (adr r3, 800ce40 <__ieee754_asin+0x308>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fb28 	bl	800028c <__adddf3>
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	462b      	mov	r3, r5
 800cc40:	f7f3 fcda 	bl	80005f8 <__aeabi_dmul>
 800cc44:	a380      	add	r3, pc, #512	; (adr r3, 800ce48 <__ieee754_asin+0x310>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	4622      	mov	r2, r4
 800cc50:	462b      	mov	r3, r5
 800cc52:	f7f3 fcd1 	bl	80005f8 <__aeabi_dmul>
 800cc56:	a37e      	add	r3, pc, #504	; (adr r3, 800ce50 <__ieee754_asin+0x318>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f7f3 fb16 	bl	800028c <__adddf3>
 800cc60:	4622      	mov	r2, r4
 800cc62:	462b      	mov	r3, r5
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	a37b      	add	r3, pc, #492	; (adr r3, 800ce58 <__ieee754_asin+0x320>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	ec41 0b18 	vmov	d8, r0, r1
 800cc72:	4620      	mov	r0, r4
 800cc74:	4629      	mov	r1, r5
 800cc76:	f7f3 fcbf 	bl	80005f8 <__aeabi_dmul>
 800cc7a:	a379      	add	r3, pc, #484	; (adr r3, 800ce60 <__ieee754_asin+0x328>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7f3 fb02 	bl	8000288 <__aeabi_dsub>
 800cc84:	4622      	mov	r2, r4
 800cc86:	462b      	mov	r3, r5
 800cc88:	f7f3 fcb6 	bl	80005f8 <__aeabi_dmul>
 800cc8c:	a376      	add	r3, pc, #472	; (adr r3, 800ce68 <__ieee754_asin+0x330>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fafb 	bl	800028c <__adddf3>
 800cc96:	4622      	mov	r2, r4
 800cc98:	462b      	mov	r3, r5
 800cc9a:	f7f3 fcad 	bl	80005f8 <__aeabi_dmul>
 800cc9e:	a374      	add	r3, pc, #464	; (adr r3, 800ce70 <__ieee754_asin+0x338>)
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 faf0 	bl	8000288 <__aeabi_dsub>
 800cca8:	4622      	mov	r2, r4
 800ccaa:	462b      	mov	r3, r5
 800ccac:	f7f3 fca4 	bl	80005f8 <__aeabi_dmul>
 800ccb0:	4b73      	ldr	r3, [pc, #460]	; (800ce80 <__ieee754_asin+0x348>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f7f3 faea 	bl	800028c <__adddf3>
 800ccb8:	ec45 4b10 	vmov	d0, r4, r5
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	f7ff faca 	bl	800c258 <__ieee754_sqrt>
 800ccc4:	4b70      	ldr	r3, [pc, #448]	; (800ce88 <__ieee754_asin+0x350>)
 800ccc6:	4598      	cmp	r8, r3
 800ccc8:	ec5b ab10 	vmov	sl, fp, d0
 800cccc:	f340 80de 	ble.w	800ce8c <__ieee754_asin+0x354>
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	463b      	mov	r3, r7
 800ccd4:	ec51 0b18 	vmov	r0, r1, d8
 800ccd8:	f7f3 fdb8 	bl	800084c <__aeabi_ddiv>
 800ccdc:	4652      	mov	r2, sl
 800ccde:	465b      	mov	r3, fp
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	4652      	mov	r2, sl
 800cce6:	465b      	mov	r3, fp
 800cce8:	f7f3 fad0 	bl	800028c <__adddf3>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	f7f3 facc 	bl	800028c <__adddf3>
 800ccf4:	a348      	add	r3, pc, #288	; (adr r3, 800ce18 <__ieee754_asin+0x2e0>)
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	f7f3 fac5 	bl	8000288 <__aeabi_dsub>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	a143      	add	r1, pc, #268	; (adr r1, 800ce10 <__ieee754_asin+0x2d8>)
 800cd04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd08:	f7f3 fabe 	bl	8000288 <__aeabi_dsub>
 800cd0c:	9b01      	ldr	r3, [sp, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bfdc      	itt	le
 800cd12:	4602      	movle	r2, r0
 800cd14:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800cd18:	4604      	mov	r4, r0
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	bfdc      	itt	le
 800cd1e:	4614      	movle	r4, r2
 800cd20:	461d      	movle	r5, r3
 800cd22:	e743      	b.n	800cbac <__ieee754_asin+0x74>
 800cd24:	ee10 2a10 	vmov	r2, s0
 800cd28:	ee10 0a10 	vmov	r0, s0
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	4629      	mov	r1, r5
 800cd30:	f7f3 fc62 	bl	80005f8 <__aeabi_dmul>
 800cd34:	a33c      	add	r3, pc, #240	; (adr r3, 800ce28 <__ieee754_asin+0x2f0>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	f7f3 fc5b 	bl	80005f8 <__aeabi_dmul>
 800cd42:	a33b      	add	r3, pc, #236	; (adr r3, 800ce30 <__ieee754_asin+0x2f8>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 faa0 	bl	800028c <__adddf3>
 800cd4c:	4632      	mov	r2, r6
 800cd4e:	463b      	mov	r3, r7
 800cd50:	f7f3 fc52 	bl	80005f8 <__aeabi_dmul>
 800cd54:	a338      	add	r3, pc, #224	; (adr r3, 800ce38 <__ieee754_asin+0x300>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fa95 	bl	8000288 <__aeabi_dsub>
 800cd5e:	4632      	mov	r2, r6
 800cd60:	463b      	mov	r3, r7
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	a336      	add	r3, pc, #216	; (adr r3, 800ce40 <__ieee754_asin+0x308>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	f7f3 fa8e 	bl	800028c <__adddf3>
 800cd70:	4632      	mov	r2, r6
 800cd72:	463b      	mov	r3, r7
 800cd74:	f7f3 fc40 	bl	80005f8 <__aeabi_dmul>
 800cd78:	a333      	add	r3, pc, #204	; (adr r3, 800ce48 <__ieee754_asin+0x310>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 fa83 	bl	8000288 <__aeabi_dsub>
 800cd82:	4632      	mov	r2, r6
 800cd84:	463b      	mov	r3, r7
 800cd86:	f7f3 fc37 	bl	80005f8 <__aeabi_dmul>
 800cd8a:	a331      	add	r3, pc, #196	; (adr r3, 800ce50 <__ieee754_asin+0x318>)
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	f7f3 fa7c 	bl	800028c <__adddf3>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 fc2e 	bl	80005f8 <__aeabi_dmul>
 800cd9c:	a32e      	add	r3, pc, #184	; (adr r3, 800ce58 <__ieee754_asin+0x320>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	4680      	mov	r8, r0
 800cda4:	4689      	mov	r9, r1
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fc25 	bl	80005f8 <__aeabi_dmul>
 800cdae:	a32c      	add	r3, pc, #176	; (adr r3, 800ce60 <__ieee754_asin+0x328>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7f3 fa68 	bl	8000288 <__aeabi_dsub>
 800cdb8:	4632      	mov	r2, r6
 800cdba:	463b      	mov	r3, r7
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	a329      	add	r3, pc, #164	; (adr r3, 800ce68 <__ieee754_asin+0x330>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	f7f3 fa61 	bl	800028c <__adddf3>
 800cdca:	4632      	mov	r2, r6
 800cdcc:	463b      	mov	r3, r7
 800cdce:	f7f3 fc13 	bl	80005f8 <__aeabi_dmul>
 800cdd2:	a327      	add	r3, pc, #156	; (adr r3, 800ce70 <__ieee754_asin+0x338>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	f7f3 fa56 	bl	8000288 <__aeabi_dsub>
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	f7f3 fc0a 	bl	80005f8 <__aeabi_dmul>
 800cde4:	4b26      	ldr	r3, [pc, #152]	; (800ce80 <__ieee754_asin+0x348>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	f7f3 fa50 	bl	800028c <__adddf3>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	f7f3 fd2a 	bl	800084c <__aeabi_ddiv>
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	f7f3 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4620      	mov	r0, r4
 800ce06:	4629      	mov	r1, r5
 800ce08:	e6bf      	b.n	800cb8a <__ieee754_asin+0x52>
 800ce0a:	bf00      	nop
 800ce0c:	f3af 8000 	nop.w
 800ce10:	54442d18 	.word	0x54442d18
 800ce14:	3ff921fb 	.word	0x3ff921fb
 800ce18:	33145c07 	.word	0x33145c07
 800ce1c:	3c91a626 	.word	0x3c91a626
 800ce20:	8800759c 	.word	0x8800759c
 800ce24:	7e37e43c 	.word	0x7e37e43c
 800ce28:	0dfdf709 	.word	0x0dfdf709
 800ce2c:	3f023de1 	.word	0x3f023de1
 800ce30:	7501b288 	.word	0x7501b288
 800ce34:	3f49efe0 	.word	0x3f49efe0
 800ce38:	b5688f3b 	.word	0xb5688f3b
 800ce3c:	3fa48228 	.word	0x3fa48228
 800ce40:	0e884455 	.word	0x0e884455
 800ce44:	3fc9c155 	.word	0x3fc9c155
 800ce48:	03eb6f7d 	.word	0x03eb6f7d
 800ce4c:	3fd4d612 	.word	0x3fd4d612
 800ce50:	55555555 	.word	0x55555555
 800ce54:	3fc55555 	.word	0x3fc55555
 800ce58:	b12e9282 	.word	0xb12e9282
 800ce5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ce60:	1b8d0159 	.word	0x1b8d0159
 800ce64:	3fe6066c 	.word	0x3fe6066c
 800ce68:	9c598ac8 	.word	0x9c598ac8
 800ce6c:	40002ae5 	.word	0x40002ae5
 800ce70:	1c8a2d4b 	.word	0x1c8a2d4b
 800ce74:	40033a27 	.word	0x40033a27
 800ce78:	3fefffff 	.word	0x3fefffff
 800ce7c:	3fdfffff 	.word	0x3fdfffff
 800ce80:	3ff00000 	.word	0x3ff00000
 800ce84:	3fe00000 	.word	0x3fe00000
 800ce88:	3fef3332 	.word	0x3fef3332
 800ce8c:	ee10 2a10 	vmov	r2, s0
 800ce90:	ee10 0a10 	vmov	r0, s0
 800ce94:	465b      	mov	r3, fp
 800ce96:	4659      	mov	r1, fp
 800ce98:	f7f3 f9f8 	bl	800028c <__adddf3>
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	463b      	mov	r3, r7
 800cea0:	ec41 0b19 	vmov	d9, r0, r1
 800cea4:	ec51 0b18 	vmov	r0, r1, d8
 800cea8:	f7f3 fcd0 	bl	800084c <__aeabi_ddiv>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	ec51 0b19 	vmov	r0, r1, d9
 800ceb4:	f7f3 fba0 	bl	80005f8 <__aeabi_dmul>
 800ceb8:	f04f 0800 	mov.w	r8, #0
 800cebc:	4606      	mov	r6, r0
 800cebe:	460f      	mov	r7, r1
 800cec0:	4642      	mov	r2, r8
 800cec2:	465b      	mov	r3, fp
 800cec4:	4640      	mov	r0, r8
 800cec6:	4659      	mov	r1, fp
 800cec8:	f7f3 fb96 	bl	80005f8 <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4620      	mov	r0, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 f9d8 	bl	8000288 <__aeabi_dsub>
 800ced8:	4642      	mov	r2, r8
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	465b      	mov	r3, fp
 800cee0:	4650      	mov	r0, sl
 800cee2:	4659      	mov	r1, fp
 800cee4:	f7f3 f9d2 	bl	800028c <__adddf3>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fcac 	bl	800084c <__aeabi_ddiv>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	f7f3 f9c8 	bl	800028c <__adddf3>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	a113      	add	r1, pc, #76	; (adr r1, 800cf50 <__ieee754_asin+0x418>)
 800cf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf06:	f7f3 f9bf 	bl	8000288 <__aeabi_dsub>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 f9b9 	bl	8000288 <__aeabi_dsub>
 800cf16:	4642      	mov	r2, r8
 800cf18:	4604      	mov	r4, r0
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4659      	mov	r1, fp
 800cf22:	f7f3 f9b3 	bl	800028c <__adddf3>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	a10b      	add	r1, pc, #44	; (adr r1, 800cf58 <__ieee754_asin+0x420>)
 800cf2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf30:	f7f3 f9aa 	bl	8000288 <__aeabi_dsub>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4620      	mov	r0, r4
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f7f3 f9a4 	bl	8000288 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	a104      	add	r1, pc, #16	; (adr r1, 800cf58 <__ieee754_asin+0x420>)
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	e6dd      	b.n	800cd08 <__ieee754_asin+0x1d0>
 800cf4c:	f3af 8000 	nop.w
 800cf50:	33145c07 	.word	0x33145c07
 800cf54:	3c91a626 	.word	0x3c91a626
 800cf58:	54442d18 	.word	0x54442d18
 800cf5c:	3fe921fb 	.word	0x3fe921fb

0800cf60 <__ieee754_rem_pio2>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	ed2d 8b02 	vpush	{d8}
 800cf68:	ec55 4b10 	vmov	r4, r5, d0
 800cf6c:	4bca      	ldr	r3, [pc, #808]	; (800d298 <__ieee754_rem_pio2+0x338>)
 800cf6e:	b08b      	sub	sp, #44	; 0x2c
 800cf70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cf74:	4598      	cmp	r8, r3
 800cf76:	4682      	mov	sl, r0
 800cf78:	9502      	str	r5, [sp, #8]
 800cf7a:	dc08      	bgt.n	800cf8e <__ieee754_rem_pio2+0x2e>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2300      	movs	r3, #0
 800cf80:	ed80 0b00 	vstr	d0, [r0]
 800cf84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf88:	f04f 0b00 	mov.w	fp, #0
 800cf8c:	e028      	b.n	800cfe0 <__ieee754_rem_pio2+0x80>
 800cf8e:	4bc3      	ldr	r3, [pc, #780]	; (800d29c <__ieee754_rem_pio2+0x33c>)
 800cf90:	4598      	cmp	r8, r3
 800cf92:	dc78      	bgt.n	800d086 <__ieee754_rem_pio2+0x126>
 800cf94:	9b02      	ldr	r3, [sp, #8]
 800cf96:	4ec2      	ldr	r6, [pc, #776]	; (800d2a0 <__ieee754_rem_pio2+0x340>)
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	ee10 0a10 	vmov	r0, s0
 800cf9e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d260 <__ieee754_rem_pio2+0x300>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	dd39      	ble.n	800d01c <__ieee754_rem_pio2+0xbc>
 800cfa8:	f7f3 f96e 	bl	8000288 <__aeabi_dsub>
 800cfac:	45b0      	cmp	r8, r6
 800cfae:	4604      	mov	r4, r0
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	d01b      	beq.n	800cfec <__ieee754_rem_pio2+0x8c>
 800cfb4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d268 <__ieee754_rem_pio2+0x308>)
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	f7f3 f965 	bl	8000288 <__aeabi_dsub>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	e9ca 2300 	strd	r2, r3, [sl]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 f95d 	bl	8000288 <__aeabi_dsub>
 800cfce:	a3a6      	add	r3, pc, #664	; (adr r3, 800d268 <__ieee754_rem_pio2+0x308>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 f958 	bl	8000288 <__aeabi_dsub>
 800cfd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cfdc:	f04f 0b01 	mov.w	fp, #1
 800cfe0:	4658      	mov	r0, fp
 800cfe2:	b00b      	add	sp, #44	; 0x2c
 800cfe4:	ecbd 8b02 	vpop	{d8}
 800cfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfec:	a3a0      	add	r3, pc, #640	; (adr r3, 800d270 <__ieee754_rem_pio2+0x310>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 f949 	bl	8000288 <__aeabi_dsub>
 800cff6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d278 <__ieee754_rem_pio2+0x318>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	4604      	mov	r4, r0
 800cffe:	460d      	mov	r5, r1
 800d000:	f7f3 f942 	bl	8000288 <__aeabi_dsub>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	e9ca 2300 	strd	r2, r3, [sl]
 800d00c:	4620      	mov	r0, r4
 800d00e:	4629      	mov	r1, r5
 800d010:	f7f3 f93a 	bl	8000288 <__aeabi_dsub>
 800d014:	a398      	add	r3, pc, #608	; (adr r3, 800d278 <__ieee754_rem_pio2+0x318>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	e7db      	b.n	800cfd4 <__ieee754_rem_pio2+0x74>
 800d01c:	f7f3 f936 	bl	800028c <__adddf3>
 800d020:	45b0      	cmp	r8, r6
 800d022:	4604      	mov	r4, r0
 800d024:	460d      	mov	r5, r1
 800d026:	d016      	beq.n	800d056 <__ieee754_rem_pio2+0xf6>
 800d028:	a38f      	add	r3, pc, #572	; (adr r3, 800d268 <__ieee754_rem_pio2+0x308>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7f3 f92d 	bl	800028c <__adddf3>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9ca 2300 	strd	r2, r3, [sl]
 800d03a:	4620      	mov	r0, r4
 800d03c:	4629      	mov	r1, r5
 800d03e:	f7f3 f923 	bl	8000288 <__aeabi_dsub>
 800d042:	a389      	add	r3, pc, #548	; (adr r3, 800d268 <__ieee754_rem_pio2+0x308>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7f3 f920 	bl	800028c <__adddf3>
 800d04c:	f04f 3bff 	mov.w	fp, #4294967295
 800d050:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d054:	e7c4      	b.n	800cfe0 <__ieee754_rem_pio2+0x80>
 800d056:	a386      	add	r3, pc, #536	; (adr r3, 800d270 <__ieee754_rem_pio2+0x310>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f7f3 f916 	bl	800028c <__adddf3>
 800d060:	a385      	add	r3, pc, #532	; (adr r3, 800d278 <__ieee754_rem_pio2+0x318>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	4604      	mov	r4, r0
 800d068:	460d      	mov	r5, r1
 800d06a:	f7f3 f90f 	bl	800028c <__adddf3>
 800d06e:	4602      	mov	r2, r0
 800d070:	460b      	mov	r3, r1
 800d072:	e9ca 2300 	strd	r2, r3, [sl]
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 f905 	bl	8000288 <__aeabi_dsub>
 800d07e:	a37e      	add	r3, pc, #504	; (adr r3, 800d278 <__ieee754_rem_pio2+0x318>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	e7e0      	b.n	800d048 <__ieee754_rem_pio2+0xe8>
 800d086:	4b87      	ldr	r3, [pc, #540]	; (800d2a4 <__ieee754_rem_pio2+0x344>)
 800d088:	4598      	cmp	r8, r3
 800d08a:	f300 80d8 	bgt.w	800d23e <__ieee754_rem_pio2+0x2de>
 800d08e:	f7ff f84b 	bl	800c128 <fabs>
 800d092:	ec55 4b10 	vmov	r4, r5, d0
 800d096:	ee10 0a10 	vmov	r0, s0
 800d09a:	a379      	add	r3, pc, #484	; (adr r3, 800d280 <__ieee754_rem_pio2+0x320>)
 800d09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	4b80      	ldr	r3, [pc, #512]	; (800d2a8 <__ieee754_rem_pio2+0x348>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f7f3 f8ef 	bl	800028c <__adddf3>
 800d0ae:	f7f3 fd53 	bl	8000b58 <__aeabi_d2iz>
 800d0b2:	4683      	mov	fp, r0
 800d0b4:	f7f3 fa36 	bl	8000524 <__aeabi_i2d>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	ec43 2b18 	vmov	d8, r2, r3
 800d0c0:	a367      	add	r3, pc, #412	; (adr r3, 800d260 <__ieee754_rem_pio2+0x300>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 fa97 	bl	80005f8 <__aeabi_dmul>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	f7f3 f8d9 	bl	8000288 <__aeabi_dsub>
 800d0d6:	a364      	add	r3, pc, #400	; (adr r3, 800d268 <__ieee754_rem_pio2+0x308>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	4606      	mov	r6, r0
 800d0de:	460f      	mov	r7, r1
 800d0e0:	ec51 0b18 	vmov	r0, r1, d8
 800d0e4:	f7f3 fa88 	bl	80005f8 <__aeabi_dmul>
 800d0e8:	f1bb 0f1f 	cmp.w	fp, #31
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	dc0d      	bgt.n	800d10e <__ieee754_rem_pio2+0x1ae>
 800d0f2:	4b6e      	ldr	r3, [pc, #440]	; (800d2ac <__ieee754_rem_pio2+0x34c>)
 800d0f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fc:	4543      	cmp	r3, r8
 800d0fe:	d006      	beq.n	800d10e <__ieee754_rem_pio2+0x1ae>
 800d100:	4622      	mov	r2, r4
 800d102:	462b      	mov	r3, r5
 800d104:	4630      	mov	r0, r6
 800d106:	4639      	mov	r1, r7
 800d108:	f7f3 f8be 	bl	8000288 <__aeabi_dsub>
 800d10c:	e00e      	b.n	800d12c <__ieee754_rem_pio2+0x1cc>
 800d10e:	462b      	mov	r3, r5
 800d110:	4622      	mov	r2, r4
 800d112:	4630      	mov	r0, r6
 800d114:	4639      	mov	r1, r7
 800d116:	f7f3 f8b7 	bl	8000288 <__aeabi_dsub>
 800d11a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d11e:	9303      	str	r3, [sp, #12]
 800d120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d124:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d128:	2b10      	cmp	r3, #16
 800d12a:	dc02      	bgt.n	800d132 <__ieee754_rem_pio2+0x1d2>
 800d12c:	e9ca 0100 	strd	r0, r1, [sl]
 800d130:	e039      	b.n	800d1a6 <__ieee754_rem_pio2+0x246>
 800d132:	a34f      	add	r3, pc, #316	; (adr r3, 800d270 <__ieee754_rem_pio2+0x310>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	ec51 0b18 	vmov	r0, r1, d8
 800d13c:	f7f3 fa5c 	bl	80005f8 <__aeabi_dmul>
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	4630      	mov	r0, r6
 800d14a:	4639      	mov	r1, r7
 800d14c:	f7f3 f89c 	bl	8000288 <__aeabi_dsub>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4680      	mov	r8, r0
 800d156:	4689      	mov	r9, r1
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 f894 	bl	8000288 <__aeabi_dsub>
 800d160:	4622      	mov	r2, r4
 800d162:	462b      	mov	r3, r5
 800d164:	f7f3 f890 	bl	8000288 <__aeabi_dsub>
 800d168:	a343      	add	r3, pc, #268	; (adr r3, 800d278 <__ieee754_rem_pio2+0x318>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	4604      	mov	r4, r0
 800d170:	460d      	mov	r5, r1
 800d172:	ec51 0b18 	vmov	r0, r1, d8
 800d176:	f7f3 fa3f 	bl	80005f8 <__aeabi_dmul>
 800d17a:	4622      	mov	r2, r4
 800d17c:	462b      	mov	r3, r5
 800d17e:	f7f3 f883 	bl	8000288 <__aeabi_dsub>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	4640      	mov	r0, r8
 800d18c:	4649      	mov	r1, r9
 800d18e:	f7f3 f87b 	bl	8000288 <__aeabi_dsub>
 800d192:	9a03      	ldr	r2, [sp, #12]
 800d194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	2b31      	cmp	r3, #49	; 0x31
 800d19c:	dc24      	bgt.n	800d1e8 <__ieee754_rem_pio2+0x288>
 800d19e:	e9ca 0100 	strd	r0, r1, [sl]
 800d1a2:	4646      	mov	r6, r8
 800d1a4:	464f      	mov	r7, r9
 800d1a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	f7f3 f869 	bl	8000288 <__aeabi_dsub>
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	f7f3 f865 	bl	8000288 <__aeabi_dsub>
 800d1be:	9b02      	ldr	r3, [sp, #8]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1c6:	f6bf af0b 	bge.w	800cfe0 <__ieee754_rem_pio2+0x80>
 800d1ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800d1d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1d6:	f8ca 8000 	str.w	r8, [sl]
 800d1da:	f8ca 0008 	str.w	r0, [sl, #8]
 800d1de:	f8ca 300c 	str.w	r3, [sl, #12]
 800d1e2:	f1cb 0b00 	rsb	fp, fp, #0
 800d1e6:	e6fb      	b.n	800cfe0 <__ieee754_rem_pio2+0x80>
 800d1e8:	a327      	add	r3, pc, #156	; (adr r3, 800d288 <__ieee754_rem_pio2+0x328>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	ec51 0b18 	vmov	r0, r1, d8
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	460d      	mov	r5, r1
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	f7f3 f841 	bl	8000288 <__aeabi_dsub>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4606      	mov	r6, r0
 800d20c:	460f      	mov	r7, r1
 800d20e:	4640      	mov	r0, r8
 800d210:	4649      	mov	r1, r9
 800d212:	f7f3 f839 	bl	8000288 <__aeabi_dsub>
 800d216:	4622      	mov	r2, r4
 800d218:	462b      	mov	r3, r5
 800d21a:	f7f3 f835 	bl	8000288 <__aeabi_dsub>
 800d21e:	a31c      	add	r3, pc, #112	; (adr r3, 800d290 <__ieee754_rem_pio2+0x330>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	4604      	mov	r4, r0
 800d226:	460d      	mov	r5, r1
 800d228:	ec51 0b18 	vmov	r0, r1, d8
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	4622      	mov	r2, r4
 800d232:	462b      	mov	r3, r5
 800d234:	f7f3 f828 	bl	8000288 <__aeabi_dsub>
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	e760      	b.n	800d100 <__ieee754_rem_pio2+0x1a0>
 800d23e:	4b1c      	ldr	r3, [pc, #112]	; (800d2b0 <__ieee754_rem_pio2+0x350>)
 800d240:	4598      	cmp	r8, r3
 800d242:	dd37      	ble.n	800d2b4 <__ieee754_rem_pio2+0x354>
 800d244:	ee10 2a10 	vmov	r2, s0
 800d248:	462b      	mov	r3, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	4629      	mov	r1, r5
 800d24e:	f7f3 f81b 	bl	8000288 <__aeabi_dsub>
 800d252:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d256:	e9ca 0100 	strd	r0, r1, [sl]
 800d25a:	e695      	b.n	800cf88 <__ieee754_rem_pio2+0x28>
 800d25c:	f3af 8000 	nop.w
 800d260:	54400000 	.word	0x54400000
 800d264:	3ff921fb 	.word	0x3ff921fb
 800d268:	1a626331 	.word	0x1a626331
 800d26c:	3dd0b461 	.word	0x3dd0b461
 800d270:	1a600000 	.word	0x1a600000
 800d274:	3dd0b461 	.word	0x3dd0b461
 800d278:	2e037073 	.word	0x2e037073
 800d27c:	3ba3198a 	.word	0x3ba3198a
 800d280:	6dc9c883 	.word	0x6dc9c883
 800d284:	3fe45f30 	.word	0x3fe45f30
 800d288:	2e000000 	.word	0x2e000000
 800d28c:	3ba3198a 	.word	0x3ba3198a
 800d290:	252049c1 	.word	0x252049c1
 800d294:	397b839a 	.word	0x397b839a
 800d298:	3fe921fb 	.word	0x3fe921fb
 800d29c:	4002d97b 	.word	0x4002d97b
 800d2a0:	3ff921fb 	.word	0x3ff921fb
 800d2a4:	413921fb 	.word	0x413921fb
 800d2a8:	3fe00000 	.word	0x3fe00000
 800d2ac:	0800e0b0 	.word	0x0800e0b0
 800d2b0:	7fefffff 	.word	0x7fefffff
 800d2b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d2b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d2bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	460d      	mov	r5, r1
 800d2c4:	f7f3 fc48 	bl	8000b58 <__aeabi_d2iz>
 800d2c8:	f7f3 f92c 	bl	8000524 <__aeabi_i2d>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2d8:	f7f2 ffd6 	bl	8000288 <__aeabi_dsub>
 800d2dc:	4b21      	ldr	r3, [pc, #132]	; (800d364 <__ieee754_rem_pio2+0x404>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	460d      	mov	r5, r1
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	f7f3 fc36 	bl	8000b58 <__aeabi_d2iz>
 800d2ec:	f7f3 f91a 	bl	8000524 <__aeabi_i2d>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2fc:	f7f2 ffc4 	bl	8000288 <__aeabi_dsub>
 800d300:	4b18      	ldr	r3, [pc, #96]	; (800d364 <__ieee754_rem_pio2+0x404>)
 800d302:	2200      	movs	r2, #0
 800d304:	f7f3 f978 	bl	80005f8 <__aeabi_dmul>
 800d308:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d30c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d310:	2703      	movs	r7, #3
 800d312:	2400      	movs	r4, #0
 800d314:	2500      	movs	r5, #0
 800d316:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d31a:	4622      	mov	r2, r4
 800d31c:	462b      	mov	r3, r5
 800d31e:	46b9      	mov	r9, r7
 800d320:	3f01      	subs	r7, #1
 800d322:	f7f3 fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d326:	2800      	cmp	r0, #0
 800d328:	d1f5      	bne.n	800d316 <__ieee754_rem_pio2+0x3b6>
 800d32a:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <__ieee754_rem_pio2+0x408>)
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	2302      	movs	r3, #2
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	4632      	mov	r2, r6
 800d334:	464b      	mov	r3, r9
 800d336:	4651      	mov	r1, sl
 800d338:	a804      	add	r0, sp, #16
 800d33a:	f000 f819 	bl	800d370 <__kernel_rem_pio2>
 800d33e:	9b02      	ldr	r3, [sp, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	4683      	mov	fp, r0
 800d344:	f6bf ae4c 	bge.w	800cfe0 <__ieee754_rem_pio2+0x80>
 800d348:	e9da 2100 	ldrd	r2, r1, [sl]
 800d34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d350:	e9ca 2300 	strd	r2, r3, [sl]
 800d354:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d358:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d35c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d360:	e73f      	b.n	800d1e2 <__ieee754_rem_pio2+0x282>
 800d362:	bf00      	nop
 800d364:	41700000 	.word	0x41700000
 800d368:	0800e130 	.word	0x0800e130
 800d36c:	00000000 	.word	0x00000000

0800d370 <__kernel_rem_pio2>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ed2d 8b02 	vpush	{d8}
 800d378:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d37c:	f112 0f14 	cmn.w	r2, #20
 800d380:	9306      	str	r3, [sp, #24]
 800d382:	9104      	str	r1, [sp, #16]
 800d384:	4bc2      	ldr	r3, [pc, #776]	; (800d690 <__kernel_rem_pio2+0x320>)
 800d386:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d388:	9009      	str	r0, [sp, #36]	; 0x24
 800d38a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	9b06      	ldr	r3, [sp, #24]
 800d392:	f103 33ff 	add.w	r3, r3, #4294967295
 800d396:	bfa8      	it	ge
 800d398:	1ed4      	subge	r4, r2, #3
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	bfb2      	itee	lt
 800d39e:	2400      	movlt	r4, #0
 800d3a0:	2318      	movge	r3, #24
 800d3a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d3a6:	f06f 0317 	mvn.w	r3, #23
 800d3aa:	fb04 3303 	mla	r3, r4, r3, r3
 800d3ae:	eb03 0a02 	add.w	sl, r3, r2
 800d3b2:	9b00      	ldr	r3, [sp, #0]
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d680 <__kernel_rem_pio2+0x310>
 800d3ba:	eb03 0802 	add.w	r8, r3, r2
 800d3be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d3c0:	1aa7      	subs	r7, r4, r2
 800d3c2:	ae20      	add	r6, sp, #128	; 0x80
 800d3c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	4545      	cmp	r5, r8
 800d3cc:	dd13      	ble.n	800d3f6 <__kernel_rem_pio2+0x86>
 800d3ce:	9b06      	ldr	r3, [sp, #24]
 800d3d0:	aa20      	add	r2, sp, #128	; 0x80
 800d3d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d3d6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d3da:	f04f 0800 	mov.w	r8, #0
 800d3de:	9b00      	ldr	r3, [sp, #0]
 800d3e0:	4598      	cmp	r8, r3
 800d3e2:	dc31      	bgt.n	800d448 <__kernel_rem_pio2+0xd8>
 800d3e4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d680 <__kernel_rem_pio2+0x310>
 800d3e8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d3ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3f0:	462f      	mov	r7, r5
 800d3f2:	2600      	movs	r6, #0
 800d3f4:	e01b      	b.n	800d42e <__kernel_rem_pio2+0xbe>
 800d3f6:	42ef      	cmn	r7, r5
 800d3f8:	d407      	bmi.n	800d40a <__kernel_rem_pio2+0x9a>
 800d3fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3fe:	f7f3 f891 	bl	8000524 <__aeabi_i2d>
 800d402:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d406:	3501      	adds	r5, #1
 800d408:	e7df      	b.n	800d3ca <__kernel_rem_pio2+0x5a>
 800d40a:	ec51 0b18 	vmov	r0, r1, d8
 800d40e:	e7f8      	b.n	800d402 <__kernel_rem_pio2+0x92>
 800d410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d414:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d418:	f7f3 f8ee 	bl	80005f8 <__aeabi_dmul>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d424:	f7f2 ff32 	bl	800028c <__adddf3>
 800d428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d42c:	3601      	adds	r6, #1
 800d42e:	9b05      	ldr	r3, [sp, #20]
 800d430:	429e      	cmp	r6, r3
 800d432:	f1a7 0708 	sub.w	r7, r7, #8
 800d436:	ddeb      	ble.n	800d410 <__kernel_rem_pio2+0xa0>
 800d438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d43c:	f108 0801 	add.w	r8, r8, #1
 800d440:	ecab 7b02 	vstmia	fp!, {d7}
 800d444:	3508      	adds	r5, #8
 800d446:	e7ca      	b.n	800d3de <__kernel_rem_pio2+0x6e>
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	aa0c      	add	r2, sp, #48	; 0x30
 800d44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d450:	930b      	str	r3, [sp, #44]	; 0x2c
 800d452:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d454:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d458:	9c00      	ldr	r4, [sp, #0]
 800d45a:	930a      	str	r3, [sp, #40]	; 0x28
 800d45c:	00e3      	lsls	r3, r4, #3
 800d45e:	9308      	str	r3, [sp, #32]
 800d460:	ab98      	add	r3, sp, #608	; 0x260
 800d462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d466:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d46a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d46e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d470:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d474:	46c3      	mov	fp, r8
 800d476:	46a1      	mov	r9, r4
 800d478:	f1b9 0f00 	cmp.w	r9, #0
 800d47c:	f1a5 0508 	sub.w	r5, r5, #8
 800d480:	dc77      	bgt.n	800d572 <__kernel_rem_pio2+0x202>
 800d482:	ec47 6b10 	vmov	d0, r6, r7
 800d486:	4650      	mov	r0, sl
 800d488:	f000 fac2 	bl	800da10 <scalbn>
 800d48c:	ec57 6b10 	vmov	r6, r7, d0
 800d490:	2200      	movs	r2, #0
 800d492:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d496:	ee10 0a10 	vmov	r0, s0
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f3 f8ac 	bl	80005f8 <__aeabi_dmul>
 800d4a0:	ec41 0b10 	vmov	d0, r0, r1
 800d4a4:	f000 fb34 	bl	800db10 <floor>
 800d4a8:	4b7a      	ldr	r3, [pc, #488]	; (800d694 <__kernel_rem_pio2+0x324>)
 800d4aa:	ec51 0b10 	vmov	r0, r1, d0
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f7f3 f8a2 	bl	80005f8 <__aeabi_dmul>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f7f2 fee4 	bl	8000288 <__aeabi_dsub>
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	f7f3 fb48 	bl	8000b58 <__aeabi_d2iz>
 800d4c8:	9002      	str	r0, [sp, #8]
 800d4ca:	f7f3 f82b 	bl	8000524 <__aeabi_i2d>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	f1ba 0f00 	cmp.w	sl, #0
 800d4de:	4606      	mov	r6, r0
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	dd6d      	ble.n	800d5c0 <__kernel_rem_pio2+0x250>
 800d4e4:	1e61      	subs	r1, r4, #1
 800d4e6:	ab0c      	add	r3, sp, #48	; 0x30
 800d4e8:	9d02      	ldr	r5, [sp, #8]
 800d4ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4ee:	f1ca 0018 	rsb	r0, sl, #24
 800d4f2:	fa43 f200 	asr.w	r2, r3, r0
 800d4f6:	4415      	add	r5, r2
 800d4f8:	4082      	lsls	r2, r0
 800d4fa:	1a9b      	subs	r3, r3, r2
 800d4fc:	aa0c      	add	r2, sp, #48	; 0x30
 800d4fe:	9502      	str	r5, [sp, #8]
 800d500:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d504:	f1ca 0217 	rsb	r2, sl, #23
 800d508:	fa43 fb02 	asr.w	fp, r3, r2
 800d50c:	f1bb 0f00 	cmp.w	fp, #0
 800d510:	dd65      	ble.n	800d5de <__kernel_rem_pio2+0x26e>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	2200      	movs	r2, #0
 800d516:	3301      	adds	r3, #1
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	4615      	mov	r5, r2
 800d51c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d520:	4294      	cmp	r4, r2
 800d522:	f300 809f 	bgt.w	800d664 <__kernel_rem_pio2+0x2f4>
 800d526:	f1ba 0f00 	cmp.w	sl, #0
 800d52a:	dd07      	ble.n	800d53c <__kernel_rem_pio2+0x1cc>
 800d52c:	f1ba 0f01 	cmp.w	sl, #1
 800d530:	f000 80c1 	beq.w	800d6b6 <__kernel_rem_pio2+0x346>
 800d534:	f1ba 0f02 	cmp.w	sl, #2
 800d538:	f000 80c7 	beq.w	800d6ca <__kernel_rem_pio2+0x35a>
 800d53c:	f1bb 0f02 	cmp.w	fp, #2
 800d540:	d14d      	bne.n	800d5de <__kernel_rem_pio2+0x26e>
 800d542:	4632      	mov	r2, r6
 800d544:	463b      	mov	r3, r7
 800d546:	4954      	ldr	r1, [pc, #336]	; (800d698 <__kernel_rem_pio2+0x328>)
 800d548:	2000      	movs	r0, #0
 800d54a:	f7f2 fe9d 	bl	8000288 <__aeabi_dsub>
 800d54e:	4606      	mov	r6, r0
 800d550:	460f      	mov	r7, r1
 800d552:	2d00      	cmp	r5, #0
 800d554:	d043      	beq.n	800d5de <__kernel_rem_pio2+0x26e>
 800d556:	4650      	mov	r0, sl
 800d558:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d688 <__kernel_rem_pio2+0x318>
 800d55c:	f000 fa58 	bl	800da10 <scalbn>
 800d560:	4630      	mov	r0, r6
 800d562:	4639      	mov	r1, r7
 800d564:	ec53 2b10 	vmov	r2, r3, d0
 800d568:	f7f2 fe8e 	bl	8000288 <__aeabi_dsub>
 800d56c:	4606      	mov	r6, r0
 800d56e:	460f      	mov	r7, r1
 800d570:	e035      	b.n	800d5de <__kernel_rem_pio2+0x26e>
 800d572:	4b4a      	ldr	r3, [pc, #296]	; (800d69c <__kernel_rem_pio2+0x32c>)
 800d574:	2200      	movs	r2, #0
 800d576:	4630      	mov	r0, r6
 800d578:	4639      	mov	r1, r7
 800d57a:	f7f3 f83d 	bl	80005f8 <__aeabi_dmul>
 800d57e:	f7f3 faeb 	bl	8000b58 <__aeabi_d2iz>
 800d582:	f7f2 ffcf 	bl	8000524 <__aeabi_i2d>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	ec43 2b18 	vmov	d8, r2, r3
 800d58e:	4b44      	ldr	r3, [pc, #272]	; (800d6a0 <__kernel_rem_pio2+0x330>)
 800d590:	2200      	movs	r2, #0
 800d592:	f7f3 f831 	bl	80005f8 <__aeabi_dmul>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4630      	mov	r0, r6
 800d59c:	4639      	mov	r1, r7
 800d59e:	f7f2 fe73 	bl	8000288 <__aeabi_dsub>
 800d5a2:	f7f3 fad9 	bl	8000b58 <__aeabi_d2iz>
 800d5a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5aa:	f84b 0b04 	str.w	r0, [fp], #4
 800d5ae:	ec51 0b18 	vmov	r0, r1, d8
 800d5b2:	f7f2 fe6b 	bl	800028c <__adddf3>
 800d5b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	e75b      	b.n	800d478 <__kernel_rem_pio2+0x108>
 800d5c0:	d106      	bne.n	800d5d0 <__kernel_rem_pio2+0x260>
 800d5c2:	1e63      	subs	r3, r4, #1
 800d5c4:	aa0c      	add	r2, sp, #48	; 0x30
 800d5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d5ce:	e79d      	b.n	800d50c <__kernel_rem_pio2+0x19c>
 800d5d0:	4b34      	ldr	r3, [pc, #208]	; (800d6a4 <__kernel_rem_pio2+0x334>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f7f3 fa96 	bl	8000b04 <__aeabi_dcmpge>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d140      	bne.n	800d65e <__kernel_rem_pio2+0x2ee>
 800d5dc:	4683      	mov	fp, r0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f3 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f000 80c1 	beq.w	800d772 <__kernel_rem_pio2+0x402>
 800d5f0:	1e65      	subs	r5, r4, #1
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	9900      	ldr	r1, [sp, #0]
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	da6d      	bge.n	800d6d8 <__kernel_rem_pio2+0x368>
 800d5fc:	2a00      	cmp	r2, #0
 800d5fe:	f000 808a 	beq.w	800d716 <__kernel_rem_pio2+0x3a6>
 800d602:	ab0c      	add	r3, sp, #48	; 0x30
 800d604:	f1aa 0a18 	sub.w	sl, sl, #24
 800d608:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80ae 	beq.w	800d76e <__kernel_rem_pio2+0x3fe>
 800d612:	4650      	mov	r0, sl
 800d614:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d688 <__kernel_rem_pio2+0x318>
 800d618:	f000 f9fa 	bl	800da10 <scalbn>
 800d61c:	1c6b      	adds	r3, r5, #1
 800d61e:	00da      	lsls	r2, r3, #3
 800d620:	9205      	str	r2, [sp, #20]
 800d622:	ec57 6b10 	vmov	r6, r7, d0
 800d626:	aa70      	add	r2, sp, #448	; 0x1c0
 800d628:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d69c <__kernel_rem_pio2+0x32c>
 800d62c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d630:	462c      	mov	r4, r5
 800d632:	f04f 0800 	mov.w	r8, #0
 800d636:	2c00      	cmp	r4, #0
 800d638:	f280 80d4 	bge.w	800d7e4 <__kernel_rem_pio2+0x474>
 800d63c:	462c      	mov	r4, r5
 800d63e:	2c00      	cmp	r4, #0
 800d640:	f2c0 8102 	blt.w	800d848 <__kernel_rem_pio2+0x4d8>
 800d644:	4b18      	ldr	r3, [pc, #96]	; (800d6a8 <__kernel_rem_pio2+0x338>)
 800d646:	461e      	mov	r6, r3
 800d648:	ab70      	add	r3, sp, #448	; 0x1c0
 800d64a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d64e:	1b2b      	subs	r3, r5, r4
 800d650:	f04f 0900 	mov.w	r9, #0
 800d654:	f04f 0a00 	mov.w	sl, #0
 800d658:	2700      	movs	r7, #0
 800d65a:	9306      	str	r3, [sp, #24]
 800d65c:	e0e6      	b.n	800d82c <__kernel_rem_pio2+0x4bc>
 800d65e:	f04f 0b02 	mov.w	fp, #2
 800d662:	e756      	b.n	800d512 <__kernel_rem_pio2+0x1a2>
 800d664:	f8d8 3000 	ldr.w	r3, [r8]
 800d668:	bb05      	cbnz	r5, 800d6ac <__kernel_rem_pio2+0x33c>
 800d66a:	b123      	cbz	r3, 800d676 <__kernel_rem_pio2+0x306>
 800d66c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d670:	f8c8 3000 	str.w	r3, [r8]
 800d674:	2301      	movs	r3, #1
 800d676:	3201      	adds	r2, #1
 800d678:	f108 0804 	add.w	r8, r8, #4
 800d67c:	461d      	mov	r5, r3
 800d67e:	e74f      	b.n	800d520 <__kernel_rem_pio2+0x1b0>
	...
 800d68c:	3ff00000 	.word	0x3ff00000
 800d690:	0800e278 	.word	0x0800e278
 800d694:	40200000 	.word	0x40200000
 800d698:	3ff00000 	.word	0x3ff00000
 800d69c:	3e700000 	.word	0x3e700000
 800d6a0:	41700000 	.word	0x41700000
 800d6a4:	3fe00000 	.word	0x3fe00000
 800d6a8:	0800e238 	.word	0x0800e238
 800d6ac:	1acb      	subs	r3, r1, r3
 800d6ae:	f8c8 3000 	str.w	r3, [r8]
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	e7df      	b.n	800d676 <__kernel_rem_pio2+0x306>
 800d6b6:	1e62      	subs	r2, r4, #1
 800d6b8:	ab0c      	add	r3, sp, #48	; 0x30
 800d6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d6c2:	a90c      	add	r1, sp, #48	; 0x30
 800d6c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d6c8:	e738      	b.n	800d53c <__kernel_rem_pio2+0x1cc>
 800d6ca:	1e62      	subs	r2, r4, #1
 800d6cc:	ab0c      	add	r3, sp, #48	; 0x30
 800d6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6d6:	e7f4      	b.n	800d6c2 <__kernel_rem_pio2+0x352>
 800d6d8:	a90c      	add	r1, sp, #48	; 0x30
 800d6da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	430a      	orrs	r2, r1
 800d6e2:	e788      	b.n	800d5f6 <__kernel_rem_pio2+0x286>
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d6ea:	2900      	cmp	r1, #0
 800d6ec:	d0fa      	beq.n	800d6e4 <__kernel_rem_pio2+0x374>
 800d6ee:	9a08      	ldr	r2, [sp, #32]
 800d6f0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d6f4:	446a      	add	r2, sp
 800d6f6:	3a98      	subs	r2, #152	; 0x98
 800d6f8:	9208      	str	r2, [sp, #32]
 800d6fa:	9a06      	ldr	r2, [sp, #24]
 800d6fc:	a920      	add	r1, sp, #128	; 0x80
 800d6fe:	18a2      	adds	r2, r4, r2
 800d700:	18e3      	adds	r3, r4, r3
 800d702:	f104 0801 	add.w	r8, r4, #1
 800d706:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d70a:	9302      	str	r3, [sp, #8]
 800d70c:	9b02      	ldr	r3, [sp, #8]
 800d70e:	4543      	cmp	r3, r8
 800d710:	da04      	bge.n	800d71c <__kernel_rem_pio2+0x3ac>
 800d712:	461c      	mov	r4, r3
 800d714:	e6a2      	b.n	800d45c <__kernel_rem_pio2+0xec>
 800d716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d718:	2301      	movs	r3, #1
 800d71a:	e7e4      	b.n	800d6e6 <__kernel_rem_pio2+0x376>
 800d71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d71e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d722:	f7f2 feff 	bl	8000524 <__aeabi_i2d>
 800d726:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72c:	46ab      	mov	fp, r5
 800d72e:	461c      	mov	r4, r3
 800d730:	f04f 0900 	mov.w	r9, #0
 800d734:	2600      	movs	r6, #0
 800d736:	2700      	movs	r7, #0
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	4599      	cmp	r9, r3
 800d73c:	dd06      	ble.n	800d74c <__kernel_rem_pio2+0x3dc>
 800d73e:	9b08      	ldr	r3, [sp, #32]
 800d740:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d744:	f108 0801 	add.w	r8, r8, #1
 800d748:	9308      	str	r3, [sp, #32]
 800d74a:	e7df      	b.n	800d70c <__kernel_rem_pio2+0x39c>
 800d74c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d750:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d754:	f7f2 ff50 	bl	80005f8 <__aeabi_dmul>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	f7f2 fd94 	bl	800028c <__adddf3>
 800d764:	f109 0901 	add.w	r9, r9, #1
 800d768:	4606      	mov	r6, r0
 800d76a:	460f      	mov	r7, r1
 800d76c:	e7e4      	b.n	800d738 <__kernel_rem_pio2+0x3c8>
 800d76e:	3d01      	subs	r5, #1
 800d770:	e747      	b.n	800d602 <__kernel_rem_pio2+0x292>
 800d772:	ec47 6b10 	vmov	d0, r6, r7
 800d776:	f1ca 0000 	rsb	r0, sl, #0
 800d77a:	f000 f949 	bl	800da10 <scalbn>
 800d77e:	ec57 6b10 	vmov	r6, r7, d0
 800d782:	4ba0      	ldr	r3, [pc, #640]	; (800da04 <__kernel_rem_pio2+0x694>)
 800d784:	ee10 0a10 	vmov	r0, s0
 800d788:	2200      	movs	r2, #0
 800d78a:	4639      	mov	r1, r7
 800d78c:	f7f3 f9ba 	bl	8000b04 <__aeabi_dcmpge>
 800d790:	b1f8      	cbz	r0, 800d7d2 <__kernel_rem_pio2+0x462>
 800d792:	4b9d      	ldr	r3, [pc, #628]	; (800da08 <__kernel_rem_pio2+0x698>)
 800d794:	2200      	movs	r2, #0
 800d796:	4630      	mov	r0, r6
 800d798:	4639      	mov	r1, r7
 800d79a:	f7f2 ff2d 	bl	80005f8 <__aeabi_dmul>
 800d79e:	f7f3 f9db 	bl	8000b58 <__aeabi_d2iz>
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	f7f2 febe 	bl	8000524 <__aeabi_i2d>
 800d7a8:	4b96      	ldr	r3, [pc, #600]	; (800da04 <__kernel_rem_pio2+0x694>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f7f2 fd66 	bl	8000288 <__aeabi_dsub>
 800d7bc:	f7f3 f9cc 	bl	8000b58 <__aeabi_d2iz>
 800d7c0:	1c65      	adds	r5, r4, #1
 800d7c2:	ab0c      	add	r3, sp, #48	; 0x30
 800d7c4:	f10a 0a18 	add.w	sl, sl, #24
 800d7c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7cc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d7d0:	e71f      	b.n	800d612 <__kernel_rem_pio2+0x2a2>
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f3 f9bf 	bl	8000b58 <__aeabi_d2iz>
 800d7da:	ab0c      	add	r3, sp, #48	; 0x30
 800d7dc:	4625      	mov	r5, r4
 800d7de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7e2:	e716      	b.n	800d612 <__kernel_rem_pio2+0x2a2>
 800d7e4:	ab0c      	add	r3, sp, #48	; 0x30
 800d7e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d7ea:	f7f2 fe9b 	bl	8000524 <__aeabi_i2d>
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	f7f2 ff01 	bl	80005f8 <__aeabi_dmul>
 800d7f6:	4642      	mov	r2, r8
 800d7f8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d7fc:	464b      	mov	r3, r9
 800d7fe:	4630      	mov	r0, r6
 800d800:	4639      	mov	r1, r7
 800d802:	f7f2 fef9 	bl	80005f8 <__aeabi_dmul>
 800d806:	3c01      	subs	r4, #1
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	e713      	b.n	800d636 <__kernel_rem_pio2+0x2c6>
 800d80e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d812:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d816:	f7f2 feef 	bl	80005f8 <__aeabi_dmul>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	4648      	mov	r0, r9
 800d820:	4651      	mov	r1, sl
 800d822:	f7f2 fd33 	bl	800028c <__adddf3>
 800d826:	3701      	adds	r7, #1
 800d828:	4681      	mov	r9, r0
 800d82a:	468a      	mov	sl, r1
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	429f      	cmp	r7, r3
 800d830:	dc02      	bgt.n	800d838 <__kernel_rem_pio2+0x4c8>
 800d832:	9b06      	ldr	r3, [sp, #24]
 800d834:	429f      	cmp	r7, r3
 800d836:	ddea      	ble.n	800d80e <__kernel_rem_pio2+0x49e>
 800d838:	9a06      	ldr	r2, [sp, #24]
 800d83a:	ab48      	add	r3, sp, #288	; 0x120
 800d83c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d840:	e9c6 9a00 	strd	r9, sl, [r6]
 800d844:	3c01      	subs	r4, #1
 800d846:	e6fa      	b.n	800d63e <__kernel_rem_pio2+0x2ce>
 800d848:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	dc0b      	bgt.n	800d866 <__kernel_rem_pio2+0x4f6>
 800d84e:	2b00      	cmp	r3, #0
 800d850:	dc39      	bgt.n	800d8c6 <__kernel_rem_pio2+0x556>
 800d852:	d05d      	beq.n	800d910 <__kernel_rem_pio2+0x5a0>
 800d854:	9b02      	ldr	r3, [sp, #8]
 800d856:	f003 0007 	and.w	r0, r3, #7
 800d85a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d85e:	ecbd 8b02 	vpop	{d8}
 800d862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d866:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d868:	2b03      	cmp	r3, #3
 800d86a:	d1f3      	bne.n	800d854 <__kernel_rem_pio2+0x4e4>
 800d86c:	9b05      	ldr	r3, [sp, #20]
 800d86e:	9500      	str	r5, [sp, #0]
 800d870:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d874:	eb0d 0403 	add.w	r4, sp, r3
 800d878:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d87c:	46a2      	mov	sl, r4
 800d87e:	9b00      	ldr	r3, [sp, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	f1aa 0a08 	sub.w	sl, sl, #8
 800d886:	dc69      	bgt.n	800d95c <__kernel_rem_pio2+0x5ec>
 800d888:	46aa      	mov	sl, r5
 800d88a:	f1ba 0f01 	cmp.w	sl, #1
 800d88e:	f1a4 0408 	sub.w	r4, r4, #8
 800d892:	f300 8083 	bgt.w	800d99c <__kernel_rem_pio2+0x62c>
 800d896:	9c05      	ldr	r4, [sp, #20]
 800d898:	ab48      	add	r3, sp, #288	; 0x120
 800d89a:	441c      	add	r4, r3
 800d89c:	2000      	movs	r0, #0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	2d01      	cmp	r5, #1
 800d8a2:	f300 809a 	bgt.w	800d9da <__kernel_rem_pio2+0x66a>
 800d8a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d8aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d8ae:	f1bb 0f00 	cmp.w	fp, #0
 800d8b2:	f040 8098 	bne.w	800d9e6 <__kernel_rem_pio2+0x676>
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	e9c3 7800 	strd	r7, r8, [r3]
 800d8bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d8c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d8c4:	e7c6      	b.n	800d854 <__kernel_rem_pio2+0x4e4>
 800d8c6:	9e05      	ldr	r6, [sp, #20]
 800d8c8:	ab48      	add	r3, sp, #288	; 0x120
 800d8ca:	441e      	add	r6, r3
 800d8cc:	462c      	mov	r4, r5
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	2c00      	cmp	r4, #0
 800d8d4:	da33      	bge.n	800d93e <__kernel_rem_pio2+0x5ce>
 800d8d6:	f1bb 0f00 	cmp.w	fp, #0
 800d8da:	d036      	beq.n	800d94a <__kernel_rem_pio2+0x5da>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8e2:	9c04      	ldr	r4, [sp, #16]
 800d8e4:	e9c4 2300 	strd	r2, r3, [r4]
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d8f0:	f7f2 fcca 	bl	8000288 <__aeabi_dsub>
 800d8f4:	ae4a      	add	r6, sp, #296	; 0x128
 800d8f6:	2401      	movs	r4, #1
 800d8f8:	42a5      	cmp	r5, r4
 800d8fa:	da29      	bge.n	800d950 <__kernel_rem_pio2+0x5e0>
 800d8fc:	f1bb 0f00 	cmp.w	fp, #0
 800d900:	d002      	beq.n	800d908 <__kernel_rem_pio2+0x598>
 800d902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d906:	4619      	mov	r1, r3
 800d908:	9b04      	ldr	r3, [sp, #16]
 800d90a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d90e:	e7a1      	b.n	800d854 <__kernel_rem_pio2+0x4e4>
 800d910:	9c05      	ldr	r4, [sp, #20]
 800d912:	ab48      	add	r3, sp, #288	; 0x120
 800d914:	441c      	add	r4, r3
 800d916:	2000      	movs	r0, #0
 800d918:	2100      	movs	r1, #0
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	da09      	bge.n	800d932 <__kernel_rem_pio2+0x5c2>
 800d91e:	f1bb 0f00 	cmp.w	fp, #0
 800d922:	d002      	beq.n	800d92a <__kernel_rem_pio2+0x5ba>
 800d924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d928:	4619      	mov	r1, r3
 800d92a:	9b04      	ldr	r3, [sp, #16]
 800d92c:	e9c3 0100 	strd	r0, r1, [r3]
 800d930:	e790      	b.n	800d854 <__kernel_rem_pio2+0x4e4>
 800d932:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d936:	f7f2 fca9 	bl	800028c <__adddf3>
 800d93a:	3d01      	subs	r5, #1
 800d93c:	e7ed      	b.n	800d91a <__kernel_rem_pio2+0x5aa>
 800d93e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d942:	f7f2 fca3 	bl	800028c <__adddf3>
 800d946:	3c01      	subs	r4, #1
 800d948:	e7c3      	b.n	800d8d2 <__kernel_rem_pio2+0x562>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	e7c8      	b.n	800d8e2 <__kernel_rem_pio2+0x572>
 800d950:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d954:	f7f2 fc9a 	bl	800028c <__adddf3>
 800d958:	3401      	adds	r4, #1
 800d95a:	e7cd      	b.n	800d8f8 <__kernel_rem_pio2+0x588>
 800d95c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d960:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d964:	9b00      	ldr	r3, [sp, #0]
 800d966:	3b01      	subs	r3, #1
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	4632      	mov	r2, r6
 800d96c:	463b      	mov	r3, r7
 800d96e:	4640      	mov	r0, r8
 800d970:	4649      	mov	r1, r9
 800d972:	f7f2 fc8b 	bl	800028c <__adddf3>
 800d976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc81 	bl	8000288 <__aeabi_dsub>
 800d986:	4632      	mov	r2, r6
 800d988:	463b      	mov	r3, r7
 800d98a:	f7f2 fc7f 	bl	800028c <__adddf3>
 800d98e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d992:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d996:	ed8a 7b00 	vstr	d7, [sl]
 800d99a:	e770      	b.n	800d87e <__kernel_rem_pio2+0x50e>
 800d99c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d9a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	463b      	mov	r3, r7
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f2 fc6e 	bl	800028c <__adddf3>
 800d9b0:	e9cd 0100 	strd	r0, r1, [sp]
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	f7f2 fc64 	bl	8000288 <__aeabi_dsub>
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	f7f2 fc62 	bl	800028c <__adddf3>
 800d9c8:	ed9d 7b00 	vldr	d7, [sp]
 800d9cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9d0:	ed84 7b00 	vstr	d7, [r4]
 800d9d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9d8:	e757      	b.n	800d88a <__kernel_rem_pio2+0x51a>
 800d9da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d9de:	f7f2 fc55 	bl	800028c <__adddf3>
 800d9e2:	3d01      	subs	r5, #1
 800d9e4:	e75c      	b.n	800d8a0 <__kernel_rem_pio2+0x530>
 800d9e6:	9b04      	ldr	r3, [sp, #16]
 800d9e8:	9a04      	ldr	r2, [sp, #16]
 800d9ea:	601f      	str	r7, [r3, #0]
 800d9ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d9f0:	605c      	str	r4, [r3, #4]
 800d9f2:	609d      	str	r5, [r3, #8]
 800d9f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d9f8:	60d3      	str	r3, [r2, #12]
 800d9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fe:	6110      	str	r0, [r2, #16]
 800da00:	6153      	str	r3, [r2, #20]
 800da02:	e727      	b.n	800d854 <__kernel_rem_pio2+0x4e4>
 800da04:	41700000 	.word	0x41700000
 800da08:	3e700000 	.word	0x3e700000
 800da0c:	00000000 	.word	0x00000000

0800da10 <scalbn>:
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	ec55 4b10 	vmov	r4, r5, d0
 800da16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800da1a:	4606      	mov	r6, r0
 800da1c:	462b      	mov	r3, r5
 800da1e:	b999      	cbnz	r1, 800da48 <scalbn+0x38>
 800da20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da24:	4323      	orrs	r3, r4
 800da26:	d03f      	beq.n	800daa8 <scalbn+0x98>
 800da28:	4b35      	ldr	r3, [pc, #212]	; (800db00 <scalbn+0xf0>)
 800da2a:	4629      	mov	r1, r5
 800da2c:	ee10 0a10 	vmov	r0, s0
 800da30:	2200      	movs	r2, #0
 800da32:	f7f2 fde1 	bl	80005f8 <__aeabi_dmul>
 800da36:	4b33      	ldr	r3, [pc, #204]	; (800db04 <scalbn+0xf4>)
 800da38:	429e      	cmp	r6, r3
 800da3a:	4604      	mov	r4, r0
 800da3c:	460d      	mov	r5, r1
 800da3e:	da10      	bge.n	800da62 <scalbn+0x52>
 800da40:	a327      	add	r3, pc, #156	; (adr r3, 800dae0 <scalbn+0xd0>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	e01f      	b.n	800da88 <scalbn+0x78>
 800da48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800da4c:	4291      	cmp	r1, r2
 800da4e:	d10c      	bne.n	800da6a <scalbn+0x5a>
 800da50:	ee10 2a10 	vmov	r2, s0
 800da54:	4620      	mov	r0, r4
 800da56:	4629      	mov	r1, r5
 800da58:	f7f2 fc18 	bl	800028c <__adddf3>
 800da5c:	4604      	mov	r4, r0
 800da5e:	460d      	mov	r5, r1
 800da60:	e022      	b.n	800daa8 <scalbn+0x98>
 800da62:	460b      	mov	r3, r1
 800da64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800da68:	3936      	subs	r1, #54	; 0x36
 800da6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800da6e:	4296      	cmp	r6, r2
 800da70:	dd0d      	ble.n	800da8e <scalbn+0x7e>
 800da72:	2d00      	cmp	r5, #0
 800da74:	a11c      	add	r1, pc, #112	; (adr r1, 800dae8 <scalbn+0xd8>)
 800da76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da7a:	da02      	bge.n	800da82 <scalbn+0x72>
 800da7c:	a11c      	add	r1, pc, #112	; (adr r1, 800daf0 <scalbn+0xe0>)
 800da7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da82:	a319      	add	r3, pc, #100	; (adr r3, 800dae8 <scalbn+0xd8>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	f7f2 fdb6 	bl	80005f8 <__aeabi_dmul>
 800da8c:	e7e6      	b.n	800da5c <scalbn+0x4c>
 800da8e:	1872      	adds	r2, r6, r1
 800da90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800da94:	428a      	cmp	r2, r1
 800da96:	dcec      	bgt.n	800da72 <scalbn+0x62>
 800da98:	2a00      	cmp	r2, #0
 800da9a:	dd08      	ble.n	800daae <scalbn+0x9e>
 800da9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800daa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800daa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800daa8:	ec45 4b10 	vmov	d0, r4, r5
 800daac:	bd70      	pop	{r4, r5, r6, pc}
 800daae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dab2:	da08      	bge.n	800dac6 <scalbn+0xb6>
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	a10a      	add	r1, pc, #40	; (adr r1, 800dae0 <scalbn+0xd0>)
 800dab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dabc:	dac0      	bge.n	800da40 <scalbn+0x30>
 800dabe:	a10e      	add	r1, pc, #56	; (adr r1, 800daf8 <scalbn+0xe8>)
 800dac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac4:	e7bc      	b.n	800da40 <scalbn+0x30>
 800dac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800daca:	3236      	adds	r2, #54	; 0x36
 800dacc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dad4:	4620      	mov	r0, r4
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <scalbn+0xf8>)
 800dad8:	2200      	movs	r2, #0
 800dada:	e7d5      	b.n	800da88 <scalbn+0x78>
 800dadc:	f3af 8000 	nop.w
 800dae0:	c2f8f359 	.word	0xc2f8f359
 800dae4:	01a56e1f 	.word	0x01a56e1f
 800dae8:	8800759c 	.word	0x8800759c
 800daec:	7e37e43c 	.word	0x7e37e43c
 800daf0:	8800759c 	.word	0x8800759c
 800daf4:	fe37e43c 	.word	0xfe37e43c
 800daf8:	c2f8f359 	.word	0xc2f8f359
 800dafc:	81a56e1f 	.word	0x81a56e1f
 800db00:	43500000 	.word	0x43500000
 800db04:	ffff3cb0 	.word	0xffff3cb0
 800db08:	3c900000 	.word	0x3c900000
 800db0c:	00000000 	.word	0x00000000

0800db10 <floor>:
 800db10:	ec51 0b10 	vmov	r0, r1, d0
 800db14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db1c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800db20:	2e13      	cmp	r6, #19
 800db22:	ee10 5a10 	vmov	r5, s0
 800db26:	ee10 8a10 	vmov	r8, s0
 800db2a:	460c      	mov	r4, r1
 800db2c:	dc31      	bgt.n	800db92 <floor+0x82>
 800db2e:	2e00      	cmp	r6, #0
 800db30:	da14      	bge.n	800db5c <floor+0x4c>
 800db32:	a333      	add	r3, pc, #204	; (adr r3, 800dc00 <floor+0xf0>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	f7f2 fba8 	bl	800028c <__adddf3>
 800db3c:	2200      	movs	r2, #0
 800db3e:	2300      	movs	r3, #0
 800db40:	f7f2 ffea 	bl	8000b18 <__aeabi_dcmpgt>
 800db44:	b138      	cbz	r0, 800db56 <floor+0x46>
 800db46:	2c00      	cmp	r4, #0
 800db48:	da53      	bge.n	800dbf2 <floor+0xe2>
 800db4a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800db4e:	4325      	orrs	r5, r4
 800db50:	d052      	beq.n	800dbf8 <floor+0xe8>
 800db52:	4c2d      	ldr	r4, [pc, #180]	; (800dc08 <floor+0xf8>)
 800db54:	2500      	movs	r5, #0
 800db56:	4621      	mov	r1, r4
 800db58:	4628      	mov	r0, r5
 800db5a:	e024      	b.n	800dba6 <floor+0x96>
 800db5c:	4f2b      	ldr	r7, [pc, #172]	; (800dc0c <floor+0xfc>)
 800db5e:	4137      	asrs	r7, r6
 800db60:	ea01 0307 	and.w	r3, r1, r7
 800db64:	4303      	orrs	r3, r0
 800db66:	d01e      	beq.n	800dba6 <floor+0x96>
 800db68:	a325      	add	r3, pc, #148	; (adr r3, 800dc00 <floor+0xf0>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	f7f2 fb8d 	bl	800028c <__adddf3>
 800db72:	2200      	movs	r2, #0
 800db74:	2300      	movs	r3, #0
 800db76:	f7f2 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d0eb      	beq.n	800db56 <floor+0x46>
 800db7e:	2c00      	cmp	r4, #0
 800db80:	bfbe      	ittt	lt
 800db82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800db86:	4133      	asrlt	r3, r6
 800db88:	18e4      	addlt	r4, r4, r3
 800db8a:	ea24 0407 	bic.w	r4, r4, r7
 800db8e:	2500      	movs	r5, #0
 800db90:	e7e1      	b.n	800db56 <floor+0x46>
 800db92:	2e33      	cmp	r6, #51	; 0x33
 800db94:	dd0b      	ble.n	800dbae <floor+0x9e>
 800db96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db9a:	d104      	bne.n	800dba6 <floor+0x96>
 800db9c:	ee10 2a10 	vmov	r2, s0
 800dba0:	460b      	mov	r3, r1
 800dba2:	f7f2 fb73 	bl	800028c <__adddf3>
 800dba6:	ec41 0b10 	vmov	d0, r0, r1
 800dbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800dbb2:	f04f 37ff 	mov.w	r7, #4294967295
 800dbb6:	40df      	lsrs	r7, r3
 800dbb8:	4238      	tst	r0, r7
 800dbba:	d0f4      	beq.n	800dba6 <floor+0x96>
 800dbbc:	a310      	add	r3, pc, #64	; (adr r3, 800dc00 <floor+0xf0>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	f7f2 fb63 	bl	800028c <__adddf3>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f7f2 ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d0c1      	beq.n	800db56 <floor+0x46>
 800dbd2:	2c00      	cmp	r4, #0
 800dbd4:	da0a      	bge.n	800dbec <floor+0xdc>
 800dbd6:	2e14      	cmp	r6, #20
 800dbd8:	d101      	bne.n	800dbde <floor+0xce>
 800dbda:	3401      	adds	r4, #1
 800dbdc:	e006      	b.n	800dbec <floor+0xdc>
 800dbde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	40b3      	lsls	r3, r6
 800dbe6:	441d      	add	r5, r3
 800dbe8:	45a8      	cmp	r8, r5
 800dbea:	d8f6      	bhi.n	800dbda <floor+0xca>
 800dbec:	ea25 0507 	bic.w	r5, r5, r7
 800dbf0:	e7b1      	b.n	800db56 <floor+0x46>
 800dbf2:	2500      	movs	r5, #0
 800dbf4:	462c      	mov	r4, r5
 800dbf6:	e7ae      	b.n	800db56 <floor+0x46>
 800dbf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dbfc:	e7ab      	b.n	800db56 <floor+0x46>
 800dbfe:	bf00      	nop
 800dc00:	8800759c 	.word	0x8800759c
 800dc04:	7e37e43c 	.word	0x7e37e43c
 800dc08:	bff00000 	.word	0xbff00000
 800dc0c:	000fffff 	.word	0x000fffff

0800dc10 <_init>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr

0800dc1c <_fini>:
 800dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1e:	bf00      	nop
 800dc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc22:	bc08      	pop	{r3}
 800dc24:	469e      	mov	lr, r3
 800dc26:	4770      	bx	lr
